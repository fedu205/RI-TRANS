unit Agree2;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, Default,
  StdCtrls, ComCtrls, ExtCtrls, Variants, ToolWin, Db, ADODB, ComObj, Menus, ActnList, DBClient, cxGridCustomTableView, cxGridTableView,
  cxGridBandedTableView, cxGridDBBandedTableView, cxClasses, cxControls, cxGridCustomView, cxGridLevel, cxGrid, cxPropertiesStore,
  cxGraphics, cxFilter, cxGridExportLink, cxGridDBTableView, cxSplitter, cxDBData, cxGridDBDataDefinitions, ADOInt, cxEdit,
  cxTextEdit, cxMaskEdit, cxLookupEdit, cxDropDownEdit, cxCustomData, cxDBLookupComboBox, cxStyles, cxData, cxDataStorage, cxCurrencyEdit,
  cxCheckBox, cxLabel, cxCheckListBox,  cxButtons, cxCheckComboBox, cxContainer, cxCalendar, cxLookAndFeelPainters, dxBar, cxBarEditItem,
  dxBarExtDBItems, cxColorComboBox, cxLookAndFeels, cxNavigator, dxGDIPlusClasses, dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinBlueprint,
  dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin,
  dxSkinMetropolis, dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue, dxSkinOffice2010Silver,
  dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray, dxSkinOffice2013White, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp,
  dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVS2010, dxSkinWhiteprint, dxSkinXmas2008Blue, dxSkinscxPCPainter, dxSkinsdxBarPainter, dxSkinOffice2016Colorful,
  dxSkinOffice2016Dark, dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark, dxSkinVisualStudio2013Light, cxFontNameComboBox,
  dxColorEdit, cxMemo, cxButtonEdit,cxPC, cxGroupBox, dxSkinTheBezier, dxmdaset, dxDateRanges, ImageList, ImgList, cxImageList, dxBarBuiltInMenu,
  cxCustomPivotGrid, cxDBPivotGrid, cxExportPivotGridLink, cxPivotGridCustomDataSet, cxPivotGridDrillDownDataSet,
  dxSpreadSheetCore, dxSpreadSheetGraphics, dxSpreadSheet, dxSpreadSheetFormatXLSX,  dxScrollbarAnnotations,
  dxSkinBasic, dxSkinOffice2019Black, dxSkinOffice2019Colorful,
  dxSkinOffice2019DarkGray, dxSkinOffice2019White, dxSkinWXI;


type
  TfmAgree2 = class(TForm)
    DS_Agree: TDataSource;
    Splitter1: TSplitter;
    DS_FactClient: TDataSource;
    Panel16: TPanel;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    cxGrid1DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid1DBBandedTableView1our_rate_val: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_id: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1contract_id: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1firm_customer_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1firm_self_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1brief_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1users_owner_id: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1FIO_users_owner: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1node_begin_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1node_end_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_sum: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1kargoETSNG_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1vid_transfer_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1vid_transfer_cod: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1our_rate_comiss_val: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1quantity: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1quantity_units: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1ed_izm_cod: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1amount_fact: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1amount_units_fact: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_sum_fact: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_sum_fact_USD: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_comiss_USD: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_cod: TcxGridDBBandedColumn;
    cxPropertiesStore1: TcxPropertiesStore;
    cxGrid1DBBandedTableView1currency_id: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1state_begin_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1state_end_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1kargoETSNG_group_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1our_rate_vid_send: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1date_enter: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_num: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1contract_cod: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1fact_weight: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1date_period_finance: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1set_bargain_block: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1global_color: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1global_copy: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_correct_group: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_correct_type: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_correct_type_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1date_period: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_note: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_comiss: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_rights: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_sum_fact_RUB: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1bargain_comiss_RUB: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1firm_self: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1firm_customer: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1date_modify: TcxGridDBBandedColumn;
    dxBarManager1: TdxBarManager;
    N15: TdxBarButton;
    Act_basic_SFH: TdxBarButton;
    N197: TdxBarButton;
    N102: TdxBarButton;
    N146: TdxBarButton;
    N210: TdxBarButton;
    N145: TdxBarSubItem;
    N170: TdxBarButton;
    N169: TdxBarSubItem;
    N193: TdxBarButton;
    N192: TdxBarSubItem;
    N99: TdxBarButton;
    N165: TdxBarButton;
    N113: TdxBarButton;
    N101: TdxBarSubItem;
    N167: TdxBarButton;
    dxBarManager1Bar1: TdxBar;
    Popup_Main: TdxBarPopupMenu;
    dxBarButton101: TdxBarButton;
    dxBarButton102: TdxBarButton;
    N49: TdxBarButton;
    N8: TdxBarButton;
    N70: TdxBarButton;
    N75: TdxBarButton;
    N109: TdxBarButton;
    N106: TdxBarButton;
    N9: TdxBarButton;
    N105: TdxBarButton;
    N108: TdxBarButton;
    N68: TdxBarSubItem;
    Excel3: TdxBarButton;
    N46: TdxBarButton;
    N82: TdxBarButton;
    N83: TdxBarButton;
    N14: TdxBarButton;
    N74: TdxBarButton;
    N10: TdxBarSubItem;
    Popup_FactClient: TdxBarPopupMenu;
    N137: TdxBarButton;
    N23: TdxBarButton;
    N22: TdxBarButton;
    N34: TdxBarButton;
    N25: TdxBarButton;
    N56: TdxBarButton;
    N24: TdxBarButton;
    N27: TdxBarSubItem;
    N30: TdxBarButton;
    N62: TdxBarButton;
    N63: TdxBarButton;
    N12: TdxBarButton;
    N116: TdxBarButton;
    N178: TdxBarButton;
    N128: TdxBarButton;
    N129: TdxBarButton;
    N130: TdxBarSubItem;
    N64: TdxBarSubItem;
    N119: TdxBarButton;
    N141: TdxBarSubItem;
    N44: TdxBarButton;
    N45: TdxBarButton;
    N98: TdxBarButton;
    N96: TdxBarButton;
    N31: TdxBarSubItem;
    dxBarSubItem1: TdxBarSubItem;
    dxBarButton1: TdxBarButton;
    dxBarSubItem2: TdxBarSubItem;
    dxBarButton2: TdxBarButton;
    dxBarSubItem3: TdxBarSubItem;
    dxBarButton3: TdxBarButton;
    dxBarButton4: TdxBarButton;
    dxBarButton5: TdxBarButton;
    dxBarButton6: TdxBarButton;
    dxBarButton7: TdxBarButton;
    dxBarButton8: TdxBarButton;
    dxBarButton9: TdxBarButton;
    dxBarSeparator1: TdxBarSeparator;
    dxBarManager1Bar2: TdxBar;
    dxBarButton10: TdxBarButton;
    dxBarButton11: TdxBarButton;
    dxBarButton12: TdxBarButton;
    dxBarLookupCombo1: TdxBarLookupCombo;
    dxBarButton13: TdxBarButton;
    GroupBox4: TGroupBox;
    cxGrid2: TcxGrid;
    cxGrid2DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid2DBBandedTableView1fact_id: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1bargain_id: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1firm_info_name: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1num_document_pref: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1num_document: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1num_vagon: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1num_konten: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1sub_cod_self: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1from_to: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1date_from_to: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1datpr: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1date_ready: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1date_delivery: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1type_kontener: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1fact_weight: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1calc_weight: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1kargo_capacity: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1transport_pay: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1kateg_send: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1nds: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1set_main: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1firm_info_id: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1xml_reply_id: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1fact_etran_comment: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1fact_users_comment: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1global_color: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1node_begin_name: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1node_end_name: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1etran_folder: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1etran_owner_name: TcxGridDBBandedColumn;
    cxGrid2Level1: TcxGridLevel;
    dxBarDockControl1: TdxBarDockControl;
    cxBarEditItem2: TcxBarEditItem;
    dxBarSubItem6: TdxBarSubItem;
    dxBarButton19: TdxBarButton;
    dxBarButton21: TdxBarButton;
    dxBarSubItem8: TdxBarSubItem;
    dxBarButton25: TdxBarButton;
    cxGrid1DBBandedTableView1set_return: TcxGridDBBandedColumn;
    dxBarSubItem14: TdxBarSubItem;
    dxBarButton33: TdxBarButton;
    cxGrid1DBBandedTableView1kargoETSNG_cod: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1quantity: TcxGridDBBandedColumn;
    dxBarSubItem16: TdxBarSubItem;
    dxBarButton47: TdxBarButton;
    dxBarButton53: TdxBarButton;
    dxBarButton55: TdxBarButton;
    dxBarButton56: TdxBarButton;
    dxBarSubItem23: TdxBarSubItem;
    dxBarButton57: TdxBarButton;
    dxBarButton58: TdxBarButton;
    dxBarButton61: TdxBarButton;
    dxBarSubItem24: TdxBarSubItem;
    cxGrid2DBBandedTableView1add_collection: TcxGridDBBandedColumn;
    dxBarSubItem25: TdxBarSubItem;
    dxBarButton63: TdxBarButton;
    dxBarButton70: TdxBarButton;
    Query_NDS: TADOQuery;
    dxBarButton72: TdxBarButton;
    dxBarSubItem27: TdxBarSubItem;
    dxBarButton75: TdxBarButton;
    dxBarSubItem28: TdxBarSubItem;
    dxBarButton77: TdxBarButton;
    cxGrid1DBBandedTableView1return_name: TcxGridDBBandedColumn;
    dxBarButton66: TdxBarButton;
    dxBarButton79: TdxBarButton;
    dxBarButton81: TdxBarButton;
    dxBarButton83: TdxBarButton;
    dxBarButton86: TdxBarButton;
    cxGrid2DBBandedTableView1node_begin_cod: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1node_end_cod: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1kargoGNG_cod: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1kargoETSNG_cod: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1attr_self: TcxGridDBBandedColumn;
    dxBarButton87: TdxBarButton;
    dxBarButton34: TdxBarButton;
    dxBarButton88: TdxBarButton;
    cxGrid5: TcxGrid;
    cxGrid5DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid5Level1: TcxGridLevel;
    Splitter5: TSplitter;
    Query_Acts: TADOQuery;
    DS_Acts: TDataSource;
    cxGrid5DBBandedTableView1acts_id: TcxGridDBBandedColumn;
    cxGrid5DBBandedTableView1acts_cod: TcxGridDBBandedColumn;
    cxGrid5DBBandedTableView1acts_type_name: TcxGridDBBandedColumn;
    cxGrid5DBBandedTableView1acts_sum: TcxGridDBBandedColumn;
    cxGrid5DBBandedTableView1acts_currency_cod: TcxGridDBBandedColumn;
    cxGrid5DBBandedTableView1FIO_users: TcxGridDBBandedColumn;
    Popup_Acts: TdxBarPopupMenu;
    dxBarButton90: TdxBarButton;
    dxBarSubItem31: TdxBarSubItem;
    dxBarButton94: TdxBarButton;
    dxBarButton95: TdxBarButton;
    dxBarButton96: TdxBarButton;
    cxGrid5DBBandedTableView1global_color: TcxGridDBBandedColumn;
    dxBarButton97: TdxBarButton;
    cxGrid2DBBandedTableView1fkv: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1kateg_send_name: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1set_depo_repair: TcxGridDBBandedColumn;
    dxBarButton107: TdxBarButton;
    cxGrid2DBBandedTableView1set_econ_tarif: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1day_rent: TcxGridDBBandedColumn;
    dxBarSubItem36: TdxBarSubItem;
    dxBarButton74: TdxBarButton;
    dxBarSubItem37: TdxBarSubItem;
    dxBarButton119: TdxBarButton;
    cxGrid1DBBandedTableView1five_days_zfto_name: TcxGridDBBandedColumn;
    dxBarButton121: TdxBarButton;
    dxBarButton_ToZFTOScore: TdxBarButton;
    dxBarButton122: TdxBarButton;
    dxBarButton127: TdxBarButton;
    dxBarButton_TransportPayRefresh: TdxBarButton;
    dxBarSubItem_ViewFactSum: TdxBarSubItem;
    dxBarButton_GotoSumFact: TdxBarButton;
    dxBarButton_TransportPayVochrRefresh: TdxBarButton;
    dxBarButton128: TdxBarButton;
    dxBarButton129: TdxBarButton;
    dxBarButton_GetFactSum: TdxBarButton;
    dxBarButton1_NoFactSum: TdxBarButton;
    dxBarButton_AllFactSum: TdxBarButton;
    Panel1: TPanel;
    Image1: TImage;
    Panel6: TPanel;
    cxLabel4: TcxLabel;
    cxLabel6: TcxLabel;
    dxBarButton130: TdxBarButton;
    dxBarButton_AddSF: TdxBarButton;
    dxBarButton132: TdxBarButton;
    dxBarButton135: TdxBarButton;
    dxBarButton136: TdxBarButton;
    dxBarButton15: TdxBarButton;
    dxBarButton_RefreshWeight: TdxBarButton;
    dxBarButton17: TdxBarButton;
    dxBarButton27: TdxBarButton;
    dxBarSubItem4: TdxBarSubItem;
    dxBarButton28: TdxBarButton;
    dxBarButton29: TdxBarButton;
    dxBarButton31: TdxBarButton;
    dxBarButton36: TdxBarButton;
    cxGrid1DBBandedTableView1client_NDS_RUB: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1client_notNDS_RUB: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1comiss_notNDS_RUB: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1comiss_NDS_RUB: TcxGridDBBandedColumn;
    dxBarButton38: TdxBarButton;
    dxBarButton40: TdxBarButton;
    dxBarButton42: TdxBarButton;
    dxBarSubItem10: TdxBarSubItem;
    dxBarButton43: TdxBarButton;
    cxGrid1DBBandedTableView1kargoGNG_name: TcxGridDBBandedColumn;
    dxBarButton51: TdxBarButton;
    dxBarButton52: TdxBarButton;
    dxBarButton54: TdxBarButton;
    dxBarButton67: TdxBarButton;
    dxBarButton138: TdxBarButton;
    dxBarButton139: TdxBarButton;
    dxBarButton140: TdxBarButton;
    dxBarSubItem15: TdxBarSubItem;
    dxBarButton141: TdxBarButton;
    dxBarSubItem20: TdxBarSubItem;
    dxBarButton142: TdxBarButton;
    dxBarSubItem21: TdxBarSubItem;
    dxBarButton144: TdxBarButton;
    dxBarButton145: TdxBarButton;
    dxBarSubItem26: TdxBarSubItem;
    dxBarButton149: TdxBarButton;
    dxBarButton150: TdxBarButton;
    dxBarButton151: TdxBarButton;
    dxBarButton154: TdxBarButton;
    dxBarButton156: TdxBarButton;
    dxBarSubItem12: TdxBarSubItem;
    dxBarButton157: TdxBarButton;
    dxBarButton158: TdxBarButton;
    dxBarButton159: TdxBarButton;
    dxBarSubItem29: TdxBarSubItem;
    dxBarButton160: TdxBarButton;
    dxBarButton161: TdxBarButton;
    dxBarSubItem39: TdxBarSubItem;
    dxBarButton162: TdxBarButton;
    cxGrid1DBBandedTableView1road_begin_name: TcxGridDBBandedColumn;
    cxGrid1DBBandedTableView1road_end_name: TcxGridDBBandedColumn;
    dxBarButton163: TdxBarButton;
    dxBarButton164: TdxBarButton;
    dxBarButton165: TdxBarButton;
    dxBarButton166: TdxBarButton;
    cxGrid1DBBandedTableView1set_bargain_weight: TcxGridDBBandedColumn;
    dxBarButton59: TdxBarButton;
    dxBarSubItem11: TdxBarSubItem;
    dxBarButton26: TdxBarButton;
    dxBarButton32: TdxBarButton;
    dxBarButton41: TdxBarButton;
    dxBarButton48: TdxBarButton;
    dxBarButton65: TdxBarButton;
    dxBarButton82: TdxBarButton;
    dxBarButton117: TdxBarButton;
    dxBarButton123: TdxBarButton;
    dxBarButton124: TdxBarButton;
    dxBarButton125: TdxBarButton;
    dxBarButton167: TdxBarButton;
    dxBarSubItem19: TdxBarSubItem;
    dxBarButton168: TdxBarButton;
    dxBarButton170: TdxBarButton;
    dxBarButton171: TdxBarButton;
    cxLabel1: TcxLabel;
    dxBarSubItem40: TdxBarSubItem;
    dxBarButton173: TdxBarButton;
    dxBarSubItem41: TdxBarSubItem;
    dxBarButton174: TdxBarButton;
    dxBarButton175: TdxBarButton;
    dxBarButton177: TdxBarButton;
    dxBarButton178: TdxBarButton;
    dxBarButton181: TdxBarButton;
    dxBarSubItem43: TdxBarSubItem;
    dxBarButton182: TdxBarButton;
    dxBarButton183: TdxBarButton;
    dxBarButton184: TdxBarButton;
    dxBarButton185: TdxBarButton;
    dxBarButton186: TdxBarButton;
    dxBarButton187: TdxBarButton;
    dxBarButton188: TdxBarButton;
    dxBarButton189: TdxBarButton;
    cxGrid1DBBandedTableView1FIO_users_modify: TcxGridDBBandedColumn;
    dxBarButton190: TdxBarButton;
    dxBarSeparator3: TdxBarSeparator;
    dxBarButton193: TdxBarButton;
    dxBarButton196: TdxBarButton;
    cxGrid2DBBandedTableView1vagon_owner: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1type_park_name: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1type_sps_name: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1payer_cod: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1road_begin_name: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1road_end_name: TcxGridDBBandedColumn;
    dxBarButton18: TdxBarButton;
    dxBarButton23: TdxBarButton;
    cxGrid2DBBandedTableView1rod_vagon_name: TcxGridDBBandedColumn;
    dxBarSubItem7: TdxBarSubItem;
    dxBarButton24: TdxBarButton;
    dxBarSubItem9: TdxBarSubItem;
    dxBarButton30: TdxBarButton;
    cxGrid1DBBandedTableView1rod_vagon_name: TcxGridDBBandedColumn;
    dxBarSubItem13: TdxBarSubItem;
    dxBarButton39: TdxBarButton;
    SP_Agree: TADOStoredProc;
    dxBarButton45: TdxBarButton;
    dxBarButton46: TdxBarButton;
    dxBarButton50: TdxBarButton;
    dxBarButton60: TdxBarButton;
    dxBarButton98: TdxBarButton;
    dxBarButton80: TdxBarButton;
    cxGrid1DBBandedTableView1date_period_service: TcxGridDBBandedColumn;
    dxBarButton73: TdxBarButton;
    cxPageControl1: TcxPageControl;
    cxTabSheet1: TcxTabSheet;
    cxTabSheet2: TcxTabSheet;
    cxPageControl2: TcxPageControl;
    cxTabSheet3: TcxTabSheet;
    cxTabSheet4: TcxTabSheet;
    cxTabSheet5: TcxTabSheet;
    cxTabSheet6: TcxTabSheet;
    cxGrid3: TcxGrid;
    cxGrid3DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid3DBBandedTableView1shaping_rate_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_date_period: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_date_period_finance: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_date_period_service: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_correct_group: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_correct_type_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1contract_agent_cod: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1firm_self_agent_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1firm_customer_agent_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1contract_agent_date_begin: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1set_return: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1set_self_rate: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1service_type: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1shaping_rate_count: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1shaping_rate_sum: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1service_type_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1shaping_rate_type_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1type_calc_sum_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_amount_fact_calc: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_amount_units_fact: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_sum_fact_real: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_sum_fact_NDS_real: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_sum_fact_notNDS_real: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_sum_fact: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_sum_fact_NDS: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_sum_fact_notNDS: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_sum_fact_RUB: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_NDS_RUB: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agent_notNDS_RUB: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1brief_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1node_begin_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1node_end_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1state_begin_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1state_end_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1agreement_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1kargoETSNG_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1kargoETSNG_group_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1budget_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1ed_izm_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1return_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1shaping_rate_nds_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1date_enter: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1global_color1: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1FIO_users: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1currency_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_contract_cod: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_firm_customer_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_firm_self_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1set_bargain_block: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_cod: TcxGridDBBandedColumn;
    cxGrid3Level1: TcxGridLevel;
    SP_shaping_rate_get_list: TADOStoredProc;
    DS_shaping_rate_get_list: TDataSource;
    Query_FactShapingRate: TADOQuery;
    DS_FactShapingRate: TDataSource;
    dxBarPopupMenu1: TdxBarPopupMenu;
    dxBarSubItem53: TdxBarSubItem;
    dxBarPopupMenu2: TdxBarPopupMenu;
    dxBarSubItem54: TdxBarSubItem;
    cxGrid9: TcxGrid;
    cxGrid9DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid9DBBandedTableView1pay_id: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1pay_date: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1pay_note: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1contract_cod: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1firm_self_name: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1firm_customer_name: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1pay_sum: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1brief_name: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1pay_cod: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1first_pay: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1type_pay: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1FIO_users: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1global_color: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1nds_sum: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1type_nds_name: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1incomming_cod: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1set_return: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1exchange_USD_val: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1exchange_EUR_val: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1exchange_CHF_val: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1pay_rest: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1pay_sum_inv: TcxGridDBBandedColumn;
    cxGrid9DBBandedTableView1pay_comment: TcxGridDBBandedColumn;
    cxGrid9Level1: TcxGridLevel;
    cxGroupBox2: TcxGroupBox;
    cxGrid4: TcxGrid;
    cxGrid4DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid4DBBandedTableView1Invoice_id: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1type_rec_name: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1type_rec: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1orders_pay_id: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1bargain_id: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1contract_id: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1contract_cod: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1date_begin: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1invoice_sum: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1plan_pay_date: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1invoice_cod: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1invoice_date: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1orders_date: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1orders_payment_sum: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1brief_name: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1currency_id: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1firm_self: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1firm_self_name: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1firm_customer: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1firm_customer_name: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1docs_id: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1docs_status_name: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1docs_date_agree: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1process_step_name: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1docs_payment_sum: TcxGridDBBandedColumn;
    cxGrid4DBBandedTableView1docs_payment_date: TcxGridDBBandedColumn;
    cxGrid4Level1: TcxGridLevel;
    cxSplitter2: TcxSplitter;
    Panel3: TPanel;
    cxGroupBox1: TcxGroupBox;
    cxGrid8: TcxGrid;
    cxGrid8DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid3DBBandedTableView1pay_inv_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1inv_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_inv_sum: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_inv_brief_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1inv_brief_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1inv_currency_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_firm_self_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_currency_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_brief_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_cod: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1invoice_cod: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1invoice_date: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1invoice_sum: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1exchange_USD_val: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1exchange_EUR_val: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1exchange_CHF_val: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1inv_sum_income: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_sum_income: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1inv_firm_customer_name_short: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1rest_invoice_sum: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_rest: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_sum_inv: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1inv_sum_pay: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_sum: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_inv_currency_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_inv_date: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_date: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1pay_firm_customer_name_short: TcxGridDBBandedColumn;
    cxGrid8Level1: TcxGridLevel;
    cxGrid3DBBandedTableView1five_days_zfto_name: TcxGridDBBandedColumn;
    cxGrid7: TcxGrid;
    cxGrid7DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid7DBBandedTableView1bargain_id: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_date_period: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_date_period_finance: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_date_period_service: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_correct_group: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_correct_type_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1contract_agent_cod: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1firm_self_agent_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1firm_customer_agent_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1contract_agent_date_begin: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1set_return: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1set_self_rate: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1service_type: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1shaping_rate_count: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1shaping_rate_sum: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1service_type_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1shaping_rate_type_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1type_calc_sum_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_amount_fact_calc: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_amount_units_fact: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_sum_fact_real: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_sum_fact_NDS_real: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_sum_fact_notNDS_real: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_sum_fact: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_sum_fact_NDS: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_sum_fact_notNDS: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_sum_fact_RUB: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_NDS_RUB: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agent_notNDS_RUB: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1brief_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1node_begin_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1node_end_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1state_begin_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1state_end_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agreement_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1kargoETSNG_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1kargoETSNG_group_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1budget_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1ed_izm_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1return_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1shaping_rate_nds_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1date_enter: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1global_color1: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1FIO_users: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1currency_id: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_contract_cod: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_firm_customer_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_firm_self_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1set_bargain_block: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1bargain_cod: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1five_days_zfto_name: TcxGridDBBandedColumn;
    cxGrid7Level5: TcxGridLevel;
    dxBarButton44: TdxBarButton;
    DS_shaping_rate_get: TDataSource;
    SP_shaping_rate_get: TADOStoredProc;
    dxBarPopupMenu3: TdxBarPopupMenu;
    dxBarSubItem17: TdxBarSubItem;
    dxBarButton68: TdxBarButton;
    dxBarButton76: TdxBarButton;
    dxBarButton89: TdxBarButton;
    dxBarButton100: TdxBarButton;
    dxBarButton105: TdxBarButton;
    dxBarPopupMenu4: TdxBarPopupMenu;
    dxBarSubItem55: TdxBarSubItem;
    Query_Pay: TADOQuery;
    DS_Pay: TDataSource;
    dxBarPopupMenu5: TdxBarPopupMenu;
    dxBarSubItem56: TdxBarSubItem;
    dxBarPopupMenu6: TdxBarPopupMenu;
    dxBarSubItem57: TdxBarSubItem;
    dxBarPopupMenu7: TdxBarPopupMenu;
    dxBarSubItem58: TdxBarSubItem;
    dxBarButton14: TdxBarButton;
    dxBarButton108: TdxBarButton;
    dxBarSubItem18: TdxBarSubItem;
    dxBarButton109: TdxBarButton;
    dxBarButton110: TdxBarButton;
    dxBarButton111: TdxBarButton;
    dxBarButton113: TdxBarButton;
    dxBarButton114: TdxBarButton;
    cxGrid3DBBandedTableView1contract_agent_id: TcxGridDBBandedColumn;
    dxBarButton116: TdxBarButton;
    dxBarButton22: TdxBarButton;
    dxBarButton115: TdxBarButton;
    dxBarSubItem22: TdxBarSubItem;
    dxBarButton20: TdxBarButton;
    dxBarButton37: TdxBarButton;
    dxBarButton69: TdxBarButton;
    dxBarButton126: TdxBarButton;
    dxBarButton131: TdxBarButton;
    dxBarButton133: TdxBarButton;
    dxBarButton134: TdxBarButton;
    dxBarButton137: TdxBarButton;
    dxBarSubItem33: TdxBarSubItem;
    dxBarButton143: TdxBarButton;
    dxBarButton146: TdxBarButton;
    dxBarButton147: TdxBarButton;
    GroupBox1: TGroupBox;
    cxGrid6: TcxGrid;
    cxGrid6DBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid6DBBandedTableView1fact_id: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1bargain_id: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1firm_info_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1num_document_pref: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1num_document: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1num_vagon: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1num_konten: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1sub_cod_self: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1from_to: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1date_from_to: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1datpr: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1date_ready: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1date_delivery: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1type_kontener: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1fact_weight: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1calc_weight: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1kargo_capacity: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1transport_pay: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1kateg_send: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1nds: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1set_main: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1firm_info_id: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1xml_reply_id: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1fact_etran_comment: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1fact_users_comment: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1global_color: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1node_begin_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1node_end_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1etran_folder: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1etran_owner_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1quantity: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1add_collection: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1node_begin_cod: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1node_end_cod: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1kargoGNG_cod: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1kargoETSNG_cod: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1kargoETSNG_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1attr_self: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1fkv: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1kateg_send_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1set_depo_repair: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1set_econ_tarif: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1vagon_owner: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1type_park_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1type_sps_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1payer_cod: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1road_begin_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1road_end_name: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1rod_vagon_name: TcxGridDBBandedColumn;
    cxGrid6Level1: TcxGridLevel;
    cxGrid6DBBandedTableView1sum_fact_RUB: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1sum_fact_nds_RUB: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1sum_fact_not_nds_RUB: TcxGridDBBandedColumn;
    cxGrid6DBBandedTableView1rate_val: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1subdivision_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1subdivision_name: TcxGridDBBandedColumn;
    dxBarButton62: TdxBarButton;
    cxGrid3DBBandedTableView1agreement_note: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1vid_transfer_name: TcxGridDBBandedColumn;
    cxTabSheet7: TcxTabSheet;
    DS_shaping_rate_pivot: TDataSource;
    cxDBPivotGrid1: TcxDBPivotGrid;
    cxDBPivotGrid1shaping_rate_id: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_id: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_date_period: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_date_period_finance: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_date_period_service: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_contract_cod: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_firm_customer_name: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_firm_self_name: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_contract_date_begin: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_correct_group: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_correct_type_name: TcxDBPivotGridField;
    cxDBPivotGrid1bargain_cod: TcxDBPivotGridField;
    cxDBPivotGrid1set_bargain_block: TcxDBPivotGridField;
    cxDBPivotGrid1contract_agent_cod: TcxDBPivotGridField;
    cxDBPivotGrid1firm_self_agent_name: TcxDBPivotGridField;
    cxDBPivotGrid1firm_customer_agent_name: TcxDBPivotGridField;
    cxDBPivotGrid1contract_agent_date_begin: TcxDBPivotGridField;
    cxDBPivotGrid1agreement_note: TcxDBPivotGridField;
    cxDBPivotGrid1set_return: TcxDBPivotGridField;
    cxDBPivotGrid1set_self_rate: TcxDBPivotGridField;
    cxDBPivotGrid1service_type: TcxDBPivotGridField;
    cxDBPivotGrid1shaping_rate_count: TcxDBPivotGridField;
    cxDBPivotGrid1shaping_rate_sum: TcxDBPivotGridField;
    cxDBPivotGrid1service_type_name: TcxDBPivotGridField;
    cxDBPivotGrid1shaping_rate_type_name: TcxDBPivotGridField;
    cxDBPivotGrid1type_calc_sum_name: TcxDBPivotGridField;
    cxDBPivotGrid1vested_remainder: TcxDBPivotGridField;
    cxDBPivotGrid1agent_amount_fact_calc: TcxDBPivotGridField;
    cxDBPivotGrid1agent_amount_units_fact: TcxDBPivotGridField;
    cxDBPivotGrid1agent_sum_fact_real: TcxDBPivotGridField;
    cxDBPivotGrid1agent_sum_fact_NDS_real: TcxDBPivotGridField;
    cxDBPivotGrid1agent_sum_fact_notNDS_real: TcxDBPivotGridField;
    cxDBPivotGrid1agent_sum_fact: TcxDBPivotGridField;
    cxDBPivotGrid1agent_sum_fact_NDS: TcxDBPivotGridField;
    cxDBPivotGrid1agent_sum_fact_notNDS: TcxDBPivotGridField;
    cxDBPivotGrid1agent_sum_fact_RUB: TcxDBPivotGridField;
    cxDBPivotGrid1agent_NDS_RUB: TcxDBPivotGridField;
    cxDBPivotGrid1agent_notNDS_RUB: TcxDBPivotGridField;
    cxDBPivotGrid1brief_name: TcxDBPivotGridField;
    cxDBPivotGrid1node_begin_name: TcxDBPivotGridField;
    cxDBPivotGrid1node_end_name: TcxDBPivotGridField;
    cxDBPivotGrid1state_begin_name: TcxDBPivotGridField;
    cxDBPivotGrid1state_end_name: TcxDBPivotGridField;
    cxDBPivotGrid1agreement_name: TcxDBPivotGridField;
    cxDBPivotGrid1kargoETSNG_name: TcxDBPivotGridField;
    cxDBPivotGrid1kargoETSNG_group_name: TcxDBPivotGridField;
    cxDBPivotGrid1budget_name: TcxDBPivotGridField;
    cxDBPivotGrid1ed_izm_name: TcxDBPivotGridField;
    cxDBPivotGrid1return_name: TcxDBPivotGridField;
    cxDBPivotGrid1shaping_rate_nds_name: TcxDBPivotGridField;
    cxDBPivotGrid1five_days_zfto_name: TcxDBPivotGridField;
    cxDBPivotGrid1date_enter: TcxDBPivotGridField;
    cxDBPivotGrid1global_color: TcxDBPivotGridField;
    cxDBPivotGrid1shaping_rate_note: TcxDBPivotGridField;
    cxDBPivotGrid1FIO_users: TcxDBPivotGridField;
    cxDBPivotGrid1zfto_sum_fact: TcxDBPivotGridField;
    cxDBPivotGrid1calc_profit: TcxDBPivotGridField;
    cxDBPivotGrid1calc_profit_USD: TcxDBPivotGridField;
    cxDBPivotGrid1rod_vagon_name: TcxDBPivotGridField;
    cxGrid3DBBandedTableView1bargain_five_days_zfto_name: TcxGridDBBandedColumn;
    dxBarSubItem34: TdxBarSubItem;
    dxBarButton148: TdxBarButton;
    dxBarButton152: TdxBarButton;
    cxGrid7DBBandedTableView1contract_agent_id: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1rod_vagon_name: TcxGridDBBandedColumn;
    dxBarPopupMenu8: TdxBarPopupMenu;
    dxBarButton49: TdxBarButton;
    dxBarButton64: TdxBarButton;
    cxGrid3DBBandedTableView1bargain_node_begin_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_node_end_name: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1bargain_kargoETSNG_name: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1agreement_note: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1set_bargain_weight: TcxGridDBBandedColumn;
    DataSource1: TDataSource;
    cxPivotGridDrillDownDataSet1: TcxPivotGridDrillDownDataSet;
    cxGrid10: TcxGrid;
    cxGridDBBandedTableView1: TcxGridDBBandedTableView;
    cxGrid10Level1: TcxGridLevel;
    dxBarPopupMenu9: TdxBarPopupMenu;
    dxBarPopupMenu10: TdxBarPopupMenu;
    dxBarSubItem65: TdxBarSubItem;
    cxDBPivotGrid1set_bargain_weight: TcxDBPivotGridField;
    cxGrid3DBBandedTableView1bargain_note: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1shaping_rate_note: TcxGridDBBandedColumn;
    cxDBPivotGrid1bargain_note: TcxDBPivotGridField;
    cxGridDBBandedTableView1RecId: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn1: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn2: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedbargain_date_period_finance: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn4: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn5: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn6: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn7: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn8: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn9: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn10: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn11: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn12: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn13: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn14: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn15: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn16: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn17: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn18: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn19: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn20: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn21: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn22: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn23: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn24: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn25: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn26: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn27: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn28: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn29: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn30: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn31: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1USD: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1USD1: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1USD2: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1RUB: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1RUB1: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1RUB2: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn32: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn33: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn34: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn35: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn36: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn37: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn38: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn39: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn40: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn41: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn42: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn43: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn44: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn45: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn46: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn47: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn48: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn49: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1USD3: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn50: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn51: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn52: TcxGridDBBandedColumn;
    cxGridDBBandedTableView1DBBandedColumn53: TcxGridDBBandedColumn;
    dxBarSubItem32: TdxBarSubItem;
    dxBarButton71: TdxBarButton;
    dxBarButton78: TdxBarButton;
    dxBarButton99: TdxBarButton;
    dxBarButton106: TdxBarButton;
    dxBarButton112: TdxBarButton;
    dxBarButton118: TdxBarButton;
    dxBarButton120: TdxBarButton;
    dxBarButton153: TdxBarButton;
    dxBarButton155: TdxBarButton;
    cxDBPivotGrid1vid_transfer_name: TcxDBPivotGridField;
    cxGridDBBandedTableView1vid_transfer_name: TcxGridDBBandedColumn;
    dxBarButton35: TdxBarButton;
    dxBarButton176: TdxBarButton;
    dxBarButton179: TdxBarButton;
    cxGrid3DBBandedTableView1set_include_nds: TcxGridDBBandedColumn;
    dxBarButton180: TdxBarButton;
    cxGrid3DBBandedTableView1budget_id: TcxGridDBBandedColumn;
    dxBarSubItem30: TdxBarSubItem;
    dxBarButton192: TdxBarButton;
    dxBarButton195: TdxBarButton;
    dxBarButton197: TdxBarButton;
    dxBarButton198: TdxBarButton;
    dxBarSubItem35: TdxBarSubItem;
    dxBarButton199: TdxBarButton;
    dxBarButton200: TdxBarButton;
    dxBarButton201: TdxBarButton;
    dxBarButton202: TdxBarButton;
    dxBarButton203: TdxBarButton;
    dxBarSubItem38: TdxBarSubItem;
    dxBarButton204: TdxBarButton;
    dxBarButton205: TdxBarButton;
    dxBarButton206: TdxBarButton;
    dxBarButton207: TdxBarButton;
    dxBarButton208: TdxBarButton;
    dxBarButton209: TdxBarButton;
    dxBarSubItem42: TdxBarSubItem;
    cxImageList1: TcxImageList;
    dxBarButton210: TdxBarButton;
    dxBarButton211: TdxBarButton;
    cxGrid5DBBandedTableView1acts_type_cod: TcxGridDBBandedColumn;
    cxGrid5DBBandedTableView1date_modify: TcxGridDBBandedColumn;
    dxBarButton103: TdxBarButton;
    dxBarButton104: TdxBarButton;
    cxGrid2DBBandedTableView1comment1: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1etran_carTypeCode: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1etran_carTypeName: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1fact_num: TcxGridDBBandedColumn;
    cxGrid2DBBandedTableView1fact_date: TcxGridDBBandedColumn;
    dxBarButton214: TdxBarButton;
    DS_Invoice: TDataSource;
    Query_Invoice: TADOQuery;
    cxGrid1DBBandedTableView1comiss_ton_notNDS_RUB: TcxGridDBBandedColumn;
    dxBarButton84: TdxBarButton;
    dxBarButton85: TdxBarButton;
    dxBarButton91: TdxBarButton;
    cxGrid7DBBandedTableView1shaping_rate_val: TcxGridDBBandedColumn;
    dxBarSubItem5: TdxBarSubItem;
    dxBarButton92: TdxBarButton;
    dxBarButton93: TdxBarButton;
    cxGrid7DBBandedTableView1date_period_finance: TcxGridDBBandedColumn;
    cxGrid3DBBandedTableView1date_period_finance: TcxGridDBBandedColumn;
    cxGrid7DBBandedTableView1shaping_rate_id: TcxGridDBBandedColumn;
    SP_FactClient: TADOStoredProc;
    cxGrid2DBBandedTableView1distance: TcxGridDBBandedColumn;
    dxBarButton169: TdxBarButton;
    procedure dxBarButton25Click(Sender: TObject);
    procedure dxBarButton21Click(Sender: TObject);
    procedure dxBarButton19Click(Sender: TObject);
    procedure dxBarSubItem2Popup(Sender: TObject);
    procedure dxBarButton10Click(Sender: TObject);
    procedure dxBarButton1Click(Sender: TObject);
    procedure dxBarButton7Click(Sender: TObject);
    procedure N8Click(Sender: TObject);
    procedure dxBarButton4Click(Sender: TObject);
    procedure dxBarButton3Click(Sender: TObject);
    procedure dxBarButton102Click(Sender: TObject);
    procedure dxBarButton8Click(Sender: TObject);
    procedure dxBarButton5Click(Sender: TObject);
    procedure dxBarButton101Click(Sender: TObject);
    procedure dxBarButton2Click(Sender: TObject);
    procedure N102Click(Sender: TObject);
    procedure N197Click(Sender: TObject);
    procedure N193Click(Sender: TObject);
    procedure RUS2Click(Sender: TObject);
    procedure N178Click(Sender: TObject);
    procedure N113Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure N170Click(Sender: TObject);
    procedure N167Click(Sender: TObject);
    procedure N99Click(Sender: TObject);
    procedure N165Click(Sender: TObject);
    procedure N146Click(Sender: TObject);
    procedure N137Click(Sender: TObject);
    procedure N44Click(Sender: TObject);
    procedure N46Click(Sender: TObject);
    procedure N128Click(Sender: TObject);
    procedure N9Click(Sender: TObject);
    procedure cxGrid1DBBandedTableView1FocusedItemChanged(Sender: TcxCustomGridTableView; APrevFocusedItem, AFocusedItem: TcxCustomGridTableItem);
    procedure N119Click(Sender: TObject);
    procedure N116Click(Sender: TObject);
    procedure cxGrid1DBBandedTableView1CustomDrawColumnHeader(Sender: TcxGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridColumnHeaderViewInfo; var ADone: Boolean);
    procedure cxGrid1DBBandedTableView1DataControllerFilterChanged(Sender: TObject);

    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Popup_MainPopup(Sender: TObject);
    // ------------
    procedure OnMenuUsersClick(Sender:TObject);
    procedure N14Click(Sender: TObject);
    procedure N25Click(Sender: TObject);
    procedure Popup_FactClientPopup(Sender: TObject);
    procedure N24Click(Sender: TObject);
    procedure N30Click(Sender: TObject);
    procedure N22Click(Sender: TObject);
    procedure N23Click(Sender: TObject);
    procedure N34Click(Sender: TObject);
    procedure N49Click(Sender: TObject);
    procedure N56Click(Sender: TObject);
    procedure N62Click(Sender: TObject);
    procedure N63Click(Sender: TObject);
    procedure N70Click(Sender: TObject);
    procedure N72Click(Sender: TObject);
    procedure N74Click(Sender: TObject);
    procedure N15Click(Sender: TObject);
    procedure N82Click(Sender: TObject);
    procedure cxGrid1DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure cxGrid2DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure Excel3Click(Sender: TObject);
    procedure N12Click(Sender: TObject);
    procedure N96Click(Sender: TObject);
    procedure N98Click(Sender: TObject);
    procedure N105Click(Sender: TObject);
    procedure N108Click(Sender: TObject);
    procedure N106Click(Sender: TObject);
    procedure N75Click(Sender: TObject);
    procedure cxGrid1DBBandedTableView1KeyPress(Sender: TObject; var Key: Char);
    procedure dxBarButton42Click(Sender: TObject);
    procedure dxBarButton47Click(Sender: TObject);
    procedure dxBarButton55Click(Sender: TObject);
    procedure dxBarButton57Click(Sender: TObject);
    procedure dxBarButton61Click(Sender: TObject);
    procedure dxBarButton70Click(Sender: TObject);
    procedure dxBarButton72Click(Sender: TObject);
    procedure dxBarButton63Click(Sender: TObject);
    procedure dxBarButton79Click(Sender: TObject);
    procedure dxBarButton81Click(Sender: TObject);
    procedure dxBarButton87Click(Sender: TObject);
    procedure dxBarButton88Click(Sender: TObject);
    procedure cxGrid5DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure dxBarButton90Click(Sender: TObject);
    procedure dxBarButton94Click(Sender: TObject);
    procedure dxBarButton95Click(Sender: TObject);
    procedure dxBarButton97Click(Sender: TObject);
    procedure dxBarButton51Click(Sender: TObject);
    procedure dxBarButton74Click(Sender: TObject);
    procedure dxBarButton119Click(Sender: TObject);
    procedure dxBarButton121Click(Sender: TObject);
    procedure dxBarButton_ToZFTOScoreClick(Sender: TObject);
    procedure dxBarButton127Click(Sender: TObject);
    procedure dxBarButton_TransportPayRefreshClick(Sender: TObject);
    procedure dxBarButton_GotoSumFactClick(Sender: TObject);
    procedure dxBarButton128Click(Sender: TObject);
    procedure dxBarButton_GetFactSumClick(Sender: TObject);
    procedure dxBarButton130Click(Sender: TObject);
    procedure dxBarButton_AddSFClick(Sender: TObject);
    procedure dxBarButton132Click(Sender: TObject);
    procedure dxBarButton135Click(Sender: TObject);
    procedure dxBarButton136Click(Sender: TObject);
    procedure dxBarButton_RefreshWeightClick(Sender: TObject);
    procedure dxBarButton16Click(Sender: TObject);
    procedure dxBarButton17Click(Sender: TObject);
    procedure dxBarButton27Click(Sender: TObject);
    procedure dxBarButton29Click(Sender: TObject);
    procedure dxBarButton31Click(Sender: TObject);
    procedure dxBarButton34Click(Sender: TObject);
    procedure dxBarButton138Click(Sender: TObject);
    procedure dxBarButton53Click(Sender: TObject);
    procedure dxBarButton141Click(Sender: TObject);
    procedure dxBarButton145Click(Sender: TObject);
    procedure dxBarButton149Click(Sender: TObject);
    procedure dxBarButton150Click(Sender: TObject);
    procedure dxBarButton151Click(Sender: TObject);
    procedure dxBarButton157Click(Sender: TObject);
    procedure dxBarButton158Click(Sender: TObject);
    procedure dxBarButton159Click(Sender: TObject);
    procedure dxBarButton160Click(Sender: TObject);
    procedure dxBarButton161Click(Sender: TObject);
    procedure dxBarButton163Click(Sender: TObject);
    procedure dxBarButton164Click(Sender: TObject);
    procedure dxBarButton165Click(Sender: TObject);
    procedure dxBarButton59Click(Sender: TObject);
    procedure Act_basic_SFHClick(Sender: TObject);
    procedure dxBarButton144Click(Sender: TObject);
    procedure dxBarButton26Click(Sender: TObject);
    procedure dxBarButton41Click(Sender: TObject);
    procedure dxBarButton48Click(Sender: TObject);
    procedure dxBarButton65Click(Sender: TObject);
    procedure dxBarButton123Click(Sender: TObject);
    procedure dxBarButton124Click(Sender: TObject);
    procedure dxBarButton125Click(Sender: TObject);
    procedure dxBarButton167Click(Sender: TObject);
    procedure dxBarButton170Click(Sender: TObject);
    procedure dxBarButton171Click(Sender: TObject);
    procedure dxBarButton173Click(Sender: TObject);
    procedure dxBarButton174Click(Sender: TObject);
    procedure dxBarButton175Click(Sender: TObject);
    procedure dxBarButton177Click(Sender: TObject);
    procedure dxBarButton178Click(Sender: TObject);
    procedure dxBarButton181Click(Sender: TObject);
    procedure dxBarButton186Click(Sender: TObject);
    procedure dxBarButton187Click(Sender: TObject);
    procedure dxBarButton189Click(Sender: TObject);
    procedure dxBarButton188Click(Sender: TObject);
    procedure dxBarButton190Click(Sender: TObject);
    procedure dxBarButton193Click(Sender: TObject);
    procedure dxBarButton18Click(Sender: TObject);
    procedure dxBarButton23Click(Sender: TObject);
    procedure dxBarButton24Click(Sender: TObject);
    procedure dxBarButton30Click(Sender: TObject);
    procedure dxBarButton98Click(Sender: TObject);
    procedure dxBarButton80Click(Sender: TObject);
    procedure dxBarButton168Click(Sender: TObject);
    procedure dxBarButton73Click(Sender: TObject);
    procedure cxGrid3DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure cxGrid6DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure cxGrid1DBBandedTableView1SelectionChanged(Sender: TcxCustomGridTableView);
    procedure dxBarButton44Click(Sender: TObject);
    procedure cxGrid7DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure cxPageControl2Change(Sender: TObject);
    procedure cxGrid9DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure cxGrid4DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure cxGrid8DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure cxGrid3DBBandedTableView1SelectionChanged(Sender: TcxCustomGridTableView);
    procedure dxBarButton14Click(Sender: TObject);
    procedure dxBarButton108Click(Sender: TObject);
    procedure dxBarButton109Click(Sender: TObject);
    procedure dxBarButton116Click(Sender: TObject);
    procedure dxBarButton22Click(Sender: TObject);
    procedure dxBarButton32Click(Sender: TObject);
    procedure dxBarButton115Click(Sender: TObject);
    procedure dxBarButton20Click(Sender: TObject);
    procedure dxBarButton37Click(Sender: TObject);
    procedure dxBarButton126Click(Sender: TObject);
    procedure dxBarButton131Click(Sender: TObject);
    procedure dxBarButton133Click(Sender: TObject);
    procedure dxBarButton134Click(Sender: TObject);
    procedure dxBarButton143Click(Sender: TObject);
    procedure dxBarButton147Click(Sender: TObject);
    procedure dxBarButton69Click(Sender: TObject);
    procedure dxBarButton62Click(Sender: TObject);
    procedure dxBarButton110Click(Sender: TObject);
    procedure cxPageControl1PageChanging(Sender: TObject; NewPage: TcxTabSheet;var AllowChange: Boolean);
    procedure dxBarButton66Click(Sender: TObject);
    procedure dxBarPopupMenu4Popup(Sender: TObject);
    procedure dxBarButton49Click(Sender: TObject);
    procedure cxGrid3DBBandedTableView1DblClick(Sender: TObject);
    procedure cxGridDBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
    procedure dxBarButton71Click(Sender: TObject);
    procedure dxBarButton106Click(Sender: TObject);
    procedure dxBarButton120Click(Sender: TObject);
    procedure dxBarButton114Click(Sender: TObject);
    procedure dxBarButton35Click(Sender: TObject);
    procedure dxBarButton176Click(Sender: TObject);
    procedure dxBarButton179Click(Sender: TObject);
    procedure dxBarButton180Click(Sender: TObject);
    procedure dxBarButton192Click(Sender: TObject);
    procedure dxBarButton195Click(Sender: TObject);
    procedure dxBarButton198Click(Sender: TObject);
    procedure dxBarButton203Click(Sender: TObject);
    procedure dxBarButton204Click(Sender: TObject);
    procedure dxBarButton205Click(Sender: TObject);
    procedure dxBarButton208Click(Sender: TObject);
    procedure dxBarButton209Click(Sender: TObject);
    procedure dxBarButton210Click(Sender: TObject);
    procedure dxBarButton211Click(Sender: TObject);
    procedure dxBarButton104Click(Sender: TObject);
    procedure dxBarButton214Click(Sender: TObject);
    procedure dxBarButton84Click(Sender: TObject);
    procedure dxBarButton92Click(Sender: TObject);
    procedure dxBarButton93Click(Sender: TObject);
    procedure dxBarButton169Click(Sender: TObject);
  private
    Fcalc_flag     : boolean;
    index_MenuItem : integer;
    Fstr_bargain_id     : string;
    Ftype_open_form     : integer;
    // Запущена как DLL
    Fset_run_dll : boolean;
    Fconnect     : TADOConnection;
    Fusr_pwd_lis : PUser_pwd;
    Fusr_pwd     : PUser_pwd;

    procedure SetDate1(date1: TDateTime);
    procedure SetDate2(date2: TDateTime);
    procedure GetContractBargain(contract_id : integer);

    procedure Report_TTKTrans(retActSettings: Variant; exWkb: Variant; str_bargain_id: string);
    procedure Report_VagonList(retActSettings: Variant; exWkb: Variant; str_bargain_id: string);
    procedure Report_SFHPrivolzhsk(cod_shablon: integer; retActSettings: Variant; exWkb: Variant; str_bargain_id: string; set_recalc_distance: boolean);
    procedure Report_WorkVolume(retActSettings: Variant; exWkb: Variant; str_bargain_id: string; Query_Act: TCustomADODataSet);
    procedure Report_RegistrVolume(retActSettings: Variant; exWkb: Variant; str_bargain_id: string; Query_Act: TCustomADODataSet);

    procedure LocateBargainID(bargain_id: integer);
    procedure LocateStrBargainID(str_bargain_id: string);

    procedure RefreshProcedure(id: integer; page_id: integer);
    procedure RefreshProcedureDetail();
  public
    Fdate1, Fdate2    : TDateTime;
    set_main          : integer;
    set_FactSum       : integer;
    str_vagon_num     : string;
    Factive_users_id  : integer;
    constructor Create(AOwner: TApplication; flag: boolean);
    constructor CreateDLL(AOwner:TApplication; flag:boolean; usr_pwd: PUser_pwd);
    procedure AddFact(string_list : TStringList);
    procedure OpenAgree4List(Adate1, Adate2 : TDate; set_finance : boolean; str_bargain_id : string);
  published
    property PeriodDate1: TDateTime read FDate1 write SetDate1;
    property PeriodDate2: TDateTime read FDate2 write SetDate2;
    property _AddFact : TStringList write AddFact;
    property _GetContractBargain: integer write GetContractBargain;
    property _LocateBargainID : integer write LocateBargainID;
    property _GetStrBargainId : string read Fstr_bargain_id;
    property _SetTypeOpenForm : integer write Ftype_open_form;
    property _LocateStrBargainID : string write LocateStrBargainID;
  end;

var
  fmAgree2 : TfmAgree2;

implementation
        uses Main, AgreeAdd2, Other, Period, LoadFact, Raznoe,  FactCard, Fact,  AgreeFactInc, Filter, FileCtrl,
            FactTrack, VagonArendaAdd, Contract, FirmBalance, Acts, FactSum, ZFTOScoreAdd, VagonArenda,
             EDOXMLAct, EDOXMLInvoice, InvoiceScore, ZFTOScore, InvoiceScoreAdd,
             DateUtils, StrUtils, Registry, Math, Clipbrd, xmldoc, XMLIntf, ShellApi;
{$R *.DFM}

constructor TfmAgree2.CreateDLL(AOwner: TApplication; flag: boolean; usr_pwd: PUser_pwd);
begin
  inherited Create(AOwner);

  Fcalc_flag := True;
  index_MenuItem   := -1;
  Fstr_bargain_id  := '-9';
  Ftype_open_form  := -9;
  Fusr_pwd         :=  usr_pwd;
  Fset_run_dll     := True;
  Factive_users_id := Fusr_pwd^.users_id;

  Fconnect := TADOConnection.Create(nil);
  Fconnect.ConnectionString := 'Persist Security Info=True;Provider=SQLOLEDB.1;User ID='+Fusr_pwd^.user_name+';Password='+Fusr_pwd^.user_pass+';Initial Catalog='+Fusr_pwd^.catalog+';Data Source='+Fusr_pwd^.server+';';
  Fconnect.KeepConnection   := False;
  Fconnect.LoginPrompt      := False;

  SP_Agree.Connection                 := Fconnect;
//  SP_FactClient.Connection         := Fconnect;
  SP_FactClient.Connection            := Fconnect;
  SP_FactClient.Parameters.Refresh;
  Query_FactShapingRate.Connection    := Fconnect;
  Query_NDS.Connection                := Fconnect;
  SP_shaping_rate_get_list.Connection := Fconnect;
  SP_shaping_rate_get.Connection      := Fconnect;
  Query_Acts.Connection               := Fconnect;
  Query_Pay.Connection                := Fconnect;

  Fcalc_flag := True;
  index_MenuItem := -1;
  Fstr_bargain_id := '-9';
  Ftype_open_form := -9;
  //Factive_users_id := usr_pwd^.users_id;
  Factive_users_id := -9;
  Caption := 'Перевозки по договорам (Все)';

  dxBarSubItem3.Caption := StoreRegistryDate(rgLoad, '\Software\Lis1\DateTime\Agree', Fdate1, Fdate2);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid1DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid2DBBandedTableView1);
//  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid3DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid4DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid5DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid6DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid7DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid8DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid9DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGridDBBandedTableView1);


  SP_Agree.Close;
  SP_Agree.Parameters.Refresh;
  SP_Agree.Parameters.ParamByName('@date_begin').Value          := Fdate1;
  SP_Agree.Parameters.ParamByName('@date_end').Value            := Fdate2;
  SP_Agree.Parameters.ParamByName('@users_owner_id').Value      := Factive_users_id;
  SP_Agree.Parameters.ParamByName('@set_period_finance').Value  := dxBarButton6.Down;
  if cxPageControl1.ActivePageIndex = 0 then
    SP_Agree.Open;

  Query_NDS.Open;

  set_main := 2;
  set_FactSum := 2;
  str_vagon_num := '';

  SP_FactClient.Parameters.ParamByName('set_main'     ).Value := set_main;
  SP_FactClient.Parameters.ParamByName('type_fact_sum').Value := set_FactSum;
  SP_FactClient.Parameters.ParamByName('user_group_id').Value := usr_pwd^.user_group_id;

  Query_FactShapingRate.Parameters.ParamByName('set_main'     ).Value := set_main;
  Query_FactShapingRate.Parameters.ParamByName('type_fact_sum').Value := set_FactSum;
  Query_FactShapingRate.Parameters.ParamByName('user_group_id').Value := usr_pwd^.user_group_id;

  cxPageControl1.ActivePageIndex := 0;
  cxPageControl2.ActivePageIndex := 0;

  SetUsersModuleRights(self, Fconnect);
  MonitorEventFormOpen('OPEN_FORM', self.Name, Fconnect, -9);

  if flag then begin
    FormStyle := fsNormal;
    dxBarButton5.Visible := ivAlways;
    WindowState := wsMaximized;
  end else begin
    FormStyle := fsMDIChild;
    WindowState := wsMaximized;
  end;
end;

constructor TfmAgree2.Create(AOwner: TApplication; flag: boolean);
begin
  Screen.Cursor := crHourglass;

  inherited Create(AOwner);

  Fcalc_flag := True;
  index_MenuItem := -1;
  Fstr_bargain_id := '-9';
  Ftype_open_form := -9;
  Factive_users_id := usr_pwd^.users_id;
  Fconnect         := fmMain.Lis;
  Fset_run_dll     := False;

  dxBarSubItem3.Caption := StoreRegistryDate(rgLoad, '\Software\Lis1\DateTime\Agree', Fdate1, Fdate2);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid1DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid2DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid3DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid4DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid5DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid6DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid7DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid8DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGrid9DBBandedTableView1);
  StoreRegistryGrid2(rgLoad, '\Software\Lis1\Agree_Grids', cxGridDBBandedTableView1);


  SP_Agree.Close;
  SP_Agree.Parameters.Refresh;
  SP_Agree.Parameters.ParamByName('@date_begin').Value          := Fdate1;
  SP_Agree.Parameters.ParamByName('@date_end').Value            := Fdate2;
  SP_Agree.Parameters.ParamByName('@users_owner_id').Value      := Factive_users_id;
  SP_Agree.Parameters.ParamByName('@set_period_finance').Value  := dxBarButton6.Down;
  if cxPageControl1.ActivePageIndex = 0 then
    SP_Agree.Open;

  Query_NDS.Open;

  set_main := 2;
  set_FactSum := 2;
  str_vagon_num := '';

  SP_FactClient.Parameters.Refresh;
  SP_FactClient.Parameters.ParamByName('@set_main'     ).Value := set_main;
  SP_FactClient.Parameters.ParamByName('@type_fact_sum').Value := set_FactSum;
  SP_FactClient.Parameters.ParamByName('@user_group_id').Value := usr_pwd^.user_group_id;


  Query_FactShapingRate.Parameters.ParamByName('set_main'     ).Value := set_main;
  Query_FactShapingRate.Parameters.ParamByName('type_fact_sum').Value := set_FactSum;
  Query_FactShapingRate.Parameters.ParamByName('user_group_id').Value := usr_pwd^.user_group_id;


  cxPageControl1.ActivePageIndex := 0;
  cxPageControl2.ActivePageIndex := 0;

  SetUsersModuleRights(self, Fconnect);
  MonitorEventFormOpen('OPEN_FORM', self.Name, Fconnect, -9);


  if flag then begin
    FormStyle := fsNormal;
    dxBarButton5.Visible := ivAlways;
    WindowState := wsMaximized;
  end else begin
    FormStyle := fsMDIChild;
    WindowState := wsMaximized;
  end;

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.GetContractBargain(contract_id : integer);
var Q : TADOQuery;
begin
  Q := TADOQuery.Create(Application);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT firm_customer_name, contract_cod FROM view_contract WHERE contract_id='+IntToStr(contract_id));
  Q.Open;

  cxGrid1DBBandedTableView1.DataController.ClearSelection;
  cxGrid1DBBandedTableView1.DataController.Filter.BeginUpdate;
  try
    cxGrid1DBBandedTableView1.DataController.Filter.Root.Clear;
    cxGrid1DBBandedTableView1.DataController.Filter.Root.AddItem(cxGrid1DBBandedTableView1firm_customer_name, foEqual, Q.FieldByName('firm_customer_name').AsString, Q.FieldByName('firm_customer_name').AsString);
    cxGrid1DBBandedTableView1.DataController.Filter.Root.AddItem(cxGrid1DBBandedTableView1contract_cod, foEqual, Q.FieldByName('contract_cod').AsString, Q.FieldByName('contract_cod').AsString);
    cxGrid1DBBandedTableView1.DataController.Filter.Active := True;

    Factive_users_id := -9;
    Caption := 'Перевозки по договорам (Все)';

    SP_Agree.Close;
    SP_Agree.Parameters.ParamByName('@date_begin').Value        := Fdate1;
    SP_Agree.Parameters.ParamByName('@date_end').Value        := Fdate2;
    SP_Agree.Parameters.ParamByName('@users_owner_id').Value      := Factive_users_id;
    SP_Agree.Parameters.ParamByName('@set_period_finance').Value  := dxBarButton6.Down;

    SP_Agree.Open;
  finally
    Q.Free;
    cxGrid1DBBandedTableView1.DataController.Filter.EndUpdate;
  end;
end;

procedure TfmAgree2.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if Fset_run_dll then begin
   Fconnect.Close;
   Fconnect.Free;
  end;
  Action := caFree;
end;

procedure TfmAgree2.FormDestroy(Sender: TObject);
begin
  RestoreGroupedColumns(cxGrid1DBBandedTableView1);
  StoreRegistryDate(rgSave, '\Software\Lis1\DateTime\Agree', Fdate1, Fdate2);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid1DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid2DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid3DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid4DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid5DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid6DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid7DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid8DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGrid9DBBandedTableView1);
  StoreRegistryGrid2(rgSave, '\Software\Lis1\Agree_Grids', cxGridDBBandedTableView1);
end;


procedure TfmAgree2.RefreshProcedure(id: integer; page_id: integer);
begin
  Screen.Cursor := crHourGlass;
  if ((cxPageControl1.ActivePageIndex=0) and (page_id=-9)) or (page_id=0) then begin // Перевозки
    if id = -9 then begin
      if SP_Agree.Active then begin
        if cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.IsNull then id:=-9
        else  id := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.Value;
      end else id:=-9;
    end;

    cxGrid1DBBandedTableView1.OnSelectionChanged := nil;

    SP_Agree.Close;
    SP_Agree.Parameters.Refresh;
    SP_Agree.Parameters.ParamByName('@date_begin'        ).Value := Fdate1;
    SP_Agree.Parameters.ParamByName('@date_end'          ).Value := Fdate2;
    SP_Agree.Parameters.ParamByName('@users_owner_id'    ).Value := Factive_users_id;
    SP_Agree.Parameters.ParamByName('@set_period_finance').Value := dxBarButton6.Down;
    SP_Agree.Open;

    if id <> -9 then begin
      cxGrid1DBBandedTableView1.Controller.ClearSelection;
      if cxGrid1DBBandedTableView1.DataController.LocateByKey(id) = False then cxGrid1DBBandedTableView1.Controller.GoToFirst;;
      if cxGrid1DBBandedTableView1.Controller.FocusedRecord <> nil then  cxGrid1DBBandedTableView1.Controller.FocusedRecord.Selected := True;
    end;

    cxGrid1DBBandedTableView1.OnSelectionChanged := cxGrid1DBBandedTableView1SelectionChanged;

    cxGrid1DBBandedTableView1SelectionChanged(nil);
  end else if (cxPageControl1.ActivePageIndex = 1) or (cxPageControl1.ActivePageIndex = 2) or (page_id=1) or (page_id=2) then begin // Услуги

    if id = -9 then begin
      if SP_shaping_rate_get_list.Active then begin
        if cxGrid3DBBandedTableView1shaping_rate_id.DataBinding.Field.IsNull then id:=-9
        else  id := cxGrid3DBBandedTableView1shaping_rate_id.DataBinding.Field.Value;
      end else id:=-9;
    end;

    SP_shaping_rate_get_list.Close;
    SP_shaping_rate_get_list.Parameters.Refresh;
    SP_shaping_rate_get_list.Parameters.ParamByName('@bargain_id'  ).Value := null;
    SP_shaping_rate_get_list.Parameters.ParamByName('@date_begin'  ).Value := Fdate1;
    SP_shaping_rate_get_list.Parameters.ParamByName('@date_end'    ).Value := Fdate2;
    SP_shaping_rate_get_list.Parameters.ParamByName('@users_id'    ).Value := Factive_users_id;
    SP_shaping_rate_get_list.Parameters.ParamByName('@set_sum_sign').Value := dxBarButton44.Down;
    SP_shaping_rate_get_list.Parameters.ParamByName('@set_period_finance').Value := dxBarButton6.Down;

    SP_shaping_rate_get_list.Open;

    if id <> -9 then begin
       cxGrid3DBBandedTableView1.Controller.ClearSelection;
      if cxGrid3DBBandedTableView1.DataController.LocateByKey(id) = False then
          cxGrid3DBBandedTableView1.Controller.GoToFirst;
      if cxGrid3DBBandedTableView1.Controller.FocusedRecord <> nil then
          cxGrid3DBBandedTableView1.Controller.FocusedRecord.Selected := True;
    end;
  end;

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.RefreshProcedureDetail();
begin
  Screen.Cursor := crHourGlass;
  SP_shaping_rate_get.Close;
  Query_Acts.Close;
  Query_Pay.Close;
  Query_Invoice.Close;
  //SP_FactClient.Close;
  SP_FactClient.Close;
  Query_FactShapingRate.Close;

  if dxBarButton8.Down then begin
    if cxPageControl1.ActivePageIndex = 0 then begin
      if cxGrid1DBBandedTableView1bargain_id.DataBinding.Field <> nil then
        if cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.Value <> null then
          case cxPageControl2.ActivePageIndex of
            0:  begin
                  SP_shaping_rate_get.Close;
                  SP_shaping_rate_get.Parameters.Refresh;
                  SP_shaping_rate_get.Parameters.ParamByName('@bargain_id'  ).Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.Value;
                  SP_shaping_rate_get.Parameters.ParamByName('@set_sum_sign').Value := dxBarButton44.Down;
                  SP_shaping_rate_get.Parameters.ParamByName('@type_result' ).Value := 1;
                  SP_shaping_rate_get.Open;
                end;
            1:  begin
                  Query_Acts.Parameters.ParamByName('contract_id').Value := cxGrid1DBBandedTableView1contract_id.DataBinding.Field.AsInteger;
                  Query_Acts.Parameters.ParamByName('bargain_id' ).Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
                  Query_Acts.Parameters.ParamByName('date_period').Value := cxGrid1DBBandedTableView1date_period.DataBinding.Field.AsDateTime;
                  Query_Acts.Open;
                end;
            2:  begin
                  Query_Pay.Parameters.ParamByName('bargain_id').Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
                  Query_Pay.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(Fdate1);
                  Query_Pay.Parameters.ParamByName('date_end'  ).Value := EndOfTheMonth(Fdate2);
                  Query_Pay.Open;
                end;
            3:  begin
                  Query_Invoice.Parameters.ParamByName('bargain_id').Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
                  Query_Invoice.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(Fdate1);
                  Query_Invoice.Parameters.ParamByName('date_end'  ).Value := EndOfTheMonth(Fdate2);
                  Query_Invoice.Open;
                end;

          end;
    end;
  end;

  if dxBarButton2.Down then begin
    if cxPageControl1.ActivePageIndex = 0 then begin
      if cxGrid1DBBandedTableView1bargain_id.DataBinding.Field <> nil then
        if cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.Value <> null then begin
          SP_FactClient.Parameters.ParamByName('@bargain_id').Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
          SP_FactClient.Open;

//          SP_FactClient.Parameters.ParamByName('bargain_id').Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
//          SP_FactClient.Open;
        end;
    end;

    if cxPageControl1.ActivePageIndex = 1 then begin
      if cxGrid3DBBandedTableView1bargain_id.DataBinding.Field <> nil then
        if cxGrid3DBBandedTableView1bargain_id.DataBinding.Field.Value <> null then begin
          Query_FactShapingRate.Parameters.ParamByName('bargain_id'     ).Value := cxGrid3DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
          Query_FactShapingRate.Parameters.ParamByName('client_agent_id').Value := cxGrid3DBBandedTableView1shaping_rate_id.DataBinding.Field.AsInteger;
          Query_FactShapingRate.Open;
        end;
    end;
  end;

  Screen.Cursor := crDefault;
end;


procedure TfmAgree2.cxGrid1DBBandedTableView1FocusedItemChanged(Sender: TcxCustomGridTableView; APrevFocusedItem, AFocusedItem: TcxCustomGridTableItem);
begin
  Sender.Painter.Invalidate;
end;

procedure TfmAgree2.cxGrid1DBBandedTableView1KeyPress(Sender: TObject; var Key: Char);
begin
  FilterColumnGridOnKeyPress(TcxGridDBBandedTableView(TcxGridSite(Sender).GridView), Key);
end;

procedure TfmAgree2.cxGrid1DBBandedTableView1SelectionChanged(Sender: TcxCustomGridTableView);
begin
  RefreshProcedureDetail();

  if cxGrid1DBBandedTableView1kargoETSNG_cod.DataBinding.Field.AsString = '000012' then begin // Аренда вагонов
    cxGrid2DBBandedTableView1date_from_to.Caption    := 'Начало аренды';
    cxGrid2DBBandedTableView1datpr.Caption           := 'Конец аренды';
    cxGrid2DBBandedTableView1date_ready.Caption      := 'План. ремонт';
    cxGrid2DBBandedTableView1node_begin_name.Caption := 'Ст.передачи';
  end else begin
    cxGrid2DBBandedTableView1date_from_to.Caption    := 'ДатаОтпр';
    cxGrid2DBBandedTableView1datpr.Caption           := 'ДатаПриб';
    cxGrid2DBBandedTableView1date_ready.Caption      := 'Дата Погрузки';
    cxGrid2DBBandedTableView1node_begin_name.Caption := 'Ст.Отпр';
  end;
end;

procedure TfmAgree2.Popup_MainPopup(Sender: TObject);
var bln : boolean;
      i : integer;
begin
  Screen.Cursor := crHourglass;

  if usr_pwd.user_func.Locate('func_name', 'set_change_month', [loCaseInsensitive]) then dxBarSubItem23.Visible := ivAlways
  else dxBarSubItem23.Visible := ivNever;

  N70.Enabled  := cxGrid1DBBandedTableView1date_period_finance.DataBinding.Field.IsNull AND (not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean);
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarSubItem2Popup(Sender: TObject);
var   i, cnt : integer;
  bar_button : TdxBarButton;
           Q : TADOQuery;
begin
  Screen.Cursor := crHourglass;

  cnt := dxBarSubItem2.ItemLinks.Count;
  for i := 2 to cnt-1 do dxBarSubItem2.ItemLinks.Items[cnt-i+1].Destroy;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT users_owner_id, FIO_users_owner FROM view_bargain_rights');
  if dxBarButton6.Down then begin
    Q.SQL.Add('WHERE date_period_finance between ' + DateToSQL(Fdate1) + ' AND ' + DateToSQL(Fdate2));
  end else begin
    Q.SQL.Add('WHERE date_period between ' + DateToSQL(Fdate1) + ' AND ' + DateToSQL(Fdate2));
  end;
  Q.SQL.Add('ORDER BY FIO_users_owner');
  Q.Open;

  while not Q.Eof do begin
    bar_button := TdxBarButton.Create(nil);
    bar_button.ImageIndex := 39;
    bar_button.Caption    := Q.FieldByName('FIO_users_owner').AsString;
    bar_button.Tag        := Q.FieldByName('users_owner_id').AsInteger;
    bar_button.OnClick    := OnMenuUsersClick;
    with dxBarSubItem2.ItemLinks.Add do begin
      Index := 1 + Q.RecNo;
      Item := bar_button;
    end;
    Q.Next;
  end;

  Q.Free;
  Screen.Cursor := crDefault;
end;


procedure TfmAgree2.OnMenuUsersClick(Sender:TObject);
begin
  Screen.Cursor := crHourglass;

  Factive_users_id := TdxBarItem(Sender).Tag;
  Caption := 'Перевозки по договорам (' + TdxBarItem(Sender).Caption +')';

  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.SetDate1(date1: TDateTime);
begin
  Fdate1 := date1;
end;

procedure TfmAgree2.SetDate2(date2: TDateTime);
begin
  Fdate2 := date2;
end;

procedure TfmAgree2.N146Click(Sender: TObject);
var str_bargain_id : string;
                 i : integer;
begin
  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  PrintActRusCoal(str_bargain_id, Fdate1, Fdate2, TControl(Sender).Tag, Fconnect);
end;


procedure TfmAgree2.N25Click(Sender: TObject);
begin
  if Fset_run_dll then exit;

  if not SP_FactClient.Eof then begin
    fmFactCard := TfmFactCard.Create(Application, fmMain.Lis);
    fmFactCard._UpdateFact(SP_FactClient.FieldByName('fact_id').AsInteger);
    if fmFactCard.ShowModal = mrOk then
      RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
  end;
end;

procedure TfmAgree2.Popup_FactClientPopup(Sender: TObject);
var Q : TADOQuery;
begin
  if SP_FactClient.Active AND (SP_FactClient.FieldByName('set_main').AsInteger = 1) then begin
    N30.Caption := 'Снять признак основного факта';
    N30.ImageIndex := 132;
    N30.Tag := 0;
  end else begin
    N30.Caption := 'Сделать факт основным';
    N30.ImageIndex := 10;
    N30.Tag := 1;
  end;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT cast(dbo.func_CheckCloseBargain('+IntToStr(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger) + ') as integer) as set_contract_close');
  Q.Open;

  if Q.FieldByName('set_contract_close').AsInteger = 1 then begin
    dxBarSeparator3.Visible := ivAlways;
    dxBarSeparator3.Caption := 'Есть закрытый договор!';

    N22.Enabled := False;
    N23.Enabled := False;
    N24.Enabled := False;
    N34.Enabled := False;
    N56.Enabled := False;
    N30.Enabled := False;
    N56.Enabled := False;

    N63.Enabled               := False;
    N116.Enabled              := False;
    dxBarButton72.Enabled     := False;
    dxBarButton181.Enabled     := False;
    dxBarButton128.Enabled    := False;
  end else begin
    if cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean then begin
      dxBarSeparator3.Visible := ivAlways;
      dxBarSeparator3.Caption := 'Перевозка закрыта!';
    end else begin
      dxBarSeparator3.Visible := ivNever;
    end;

    N22.Enabled := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    N23.Enabled := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    N24.Enabled := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    N34.Enabled := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    N56.Enabled := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    N30.Enabled := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    N56.Enabled := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;

    N63.Enabled               := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    N116.Enabled              := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    dxBarButton72.Enabled     := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    dxBarButton181.Enabled    := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
    dxBarButton128.Enabled    := not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean;
  end;
  Q.Free;
end;

procedure TfmAgree2.N56Click(Sender: TObject);
var                  i : integer;
   SP_FactClientDelete : TADOStoredProc;
begin
  if Application.MessageBox(PChar('Выделенный факт потеряет связь с перевозкой!'), 'ВНИМАНИЕ', MB_OKCANCEL) = ID_OK then begin

    SP_FactClientDelete := TADOStoredProc.Create(nil);
    SP_FactClientDelete.Connection := Fconnect;
    SP_FactClientDelete.ProcedureName := 'sp_fact_delete;1';

    for i := 0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
      SP_FactClientDelete.Close;
      SP_FactClientDelete.Parameters.Refresh;
      SP_FactClientDelete.Parameters.ParamByName('@fact_id'    ).Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      SP_FactClientDelete.Parameters.ParamByName('@type_action').Value := 3;
      try
        SP_FactClientDelete.ExecProc;
      except
      end;
    end;

    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);

    if Assigned(fmFact) then begin
      fmFact.SP_fact_GET.Close;
      fmFact.SP_fact_GET.Open;
    end;

    ShowTextMessage;
    Screen.Cursor := crDefault;
  end;
end;


procedure TfmAgree2.N24Click(Sender: TObject);
var                 i : integer;
  SP_FactClientDelete : TADOStoredProc;
begin
  if Application.MessageBox(PChar('Выделенный факт будет СОВСЕМ удалён из базы!'+#10#13+'Вы уверены?'), 'ВНИМАНИЕ', MB_OKCANCEL+MB_ICONQUESTION) = ID_OK then begin
    Screen.Cursor := crHourglass;

    SP_FactClientDelete := TADOStoredProc.Create(nil);
    SP_FactClientDelete.Connection := Fconnect;
    SP_FactClientDelete.ProcedureName := 'sp_fact_delete;1';

    for i := 0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
      SP_FactClientDelete.Close;
      SP_FactClientDelete.Parameters.Refresh;
      SP_FactClientDelete.Parameters.ParamByName('@fact_id'    ).Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      SP_FactClientDelete.Parameters.ParamByName('@type_action').Value := 2;
      try
        SP_FactClientDelete.ExecProc;
      except
      end;

      ShowTextMessage('Осталось '+ IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i) + ' записей...', False);
    end;

    SP_FactClientDelete.Free;
    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);

    ShowTextMessage;
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.N30Click(Sender: TObject);
var   i : integer;
      Q, Q2 : TADOQuery;
begin
  if DeleteFrahtCard(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger, Fconnect) = False then Exit;

  try
    Screen.Cursor := crHourglass;

    Q := TADOQuery.Create(nil);
    Q.Connection := Fconnect;

    Q2 := TADOQuery.Create(nil);
    Q2.Connection := Fconnect;

    Q.SQL.Add('UPDATE fact SET set_main='+IntToStr(N30.Tag)+' WHERE fact_id = :fact_id');
    for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount -1 do begin

      Q2.Close;
      Q2.SQL.Clear;
      Q2.SQL.Add('SELECT fact.fact_id');
      Q2.SQL.Add('FROM	fact');
      Q2.SQL.Add('inner join fraht_fact on fact.fact_id = fraht_fact.fact_id');
      Q2.SQL.Add('inner join shaping_rate on fraht_fact.client_agent_id = shaping_rate.shaping_rate_id and shaping_rate.date_period_finance is not null');
      Q2.SQL.Add('WHERE	fact.fact_id = ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index]));
      Q2.Open;

      if Q2.RecordCount = 0 then begin
        Q.Close;
        Q.Parameters.ParamByName('fact_id').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
        Q.ExecSQL;
      end else begin
        Application.MessageBox(PChar('Вагон в закрытой услуге!'), 'ВНИМАНИЕ', MB_OK);
      end;

      ShowTextMessage('Осталось '+IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i)+' строк...', False);
    end;

    ShowTextMessage('Обновление данных...', False);
    RefreshQueryGrid(cxGrid1DBBandedTableView1, 'bargain_id');
    RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');

    Q.Free;
    Q2.Free;
    ShowTextMessage;

    Screen.Cursor := crDefault;
  except
    Q.Free;
    ShowTextMessage;

    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.N22Click(Sender: TObject);
begin
   fmLoadFact := TfmLoadFact.Create(Application, SP_Agree.FieldByName('bargain_id').AsInteger);
   fmLoadFact.SetConnection(Fconnect, usr_pwd);
   fmLoadFact.LoadFromAgree(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger);
   if fmLoadFact.ShowModal=mrOk then begin
     Screen.Cursor := crHourglass;
     SP_FactClient.Close;
     SP_FactClient.Open;
     Screen.Cursor := crDefault;
   end;
end;

procedure TfmAgree2.N23Click(Sender: TObject);
begin
  fmFactCard := TfmFactCard.Create(Application, Fconnect);
  fmFactCard._InsertFactAgree(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger);
  if fmFactCard.ShowModal = mrOk then
    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
end;

procedure TfmAgree2.N34Click(Sender: TObject);
var          i : integer;
      ClientDS : TClientDataSet;
begin
  ClientDS := TClientDataSet.Create(nil);
  if ShowSearchFact(Application.Handle, usr_pwd, ClientDS, 0) then begin

    for i:=0 to fmMain.MDIChildCount-1 Do
      if (fmMain.MDIChildren[i].ClassName = 'TfmFact') then begin
        fmMain.MDIChildren[i].Free;
        break;
      end;
    fmFact := TfmFact.Create(self, True);
    fmFact._SetSQLFilter := ClientDS;
    //fmFact.Visible := False;

//    WindowState := wsNormal;
//    Height := fmMain.ClientHeight - fmMain.dxStatusBar1.Height - 30;
//    Top := 0; Left := 0;
//    Width := trunc((fmMain.ClientWidth/3)*2);
//
    //fmFact.WindowState := wsNormal;
    fmFact.Height := Height;
    fmFact.Top := 0;
    fmFact.Left := 700; //Width - 1;
    fmFact.Width := trunc((fmMain.ClientWidth/3))-5;

    fmFact.Show;

  end;
  ClientDS.Free;
end;

procedure TfmAgree2.N44Click(Sender: TObject);
begin
  SetRecordColor('fact_id', cxGrid2DBBandedTableView1, 'FACT', TComponent(Sender).Tag=1);
  RefreshQueryGrid(cxGrid2DBBandedTableView1,'fact_id');
end;

procedure TfmAgree2.N46Click(Sender: TObject);
var Q : TADOQuery;
begin
  Screen.Cursor := crHourglass;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Text := 'SELECT node_begin_cod, node_end_cod FROM view_bargain_rights WHERE bargain_id = '+IntToStr(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger);
  Q.Open;
  Screen.Cursor := crDefault;

  RailAtlas_ShowRoute(Fconnect, Q.FieldByName('node_begin_cod').AsString, Q.FieldByName('node_end_cod').AsString);
  Q.Free;
end;

procedure TfmAgree2.N49Click(Sender: TObject);
var   SP_BargainCopy : TADOStoredProc;
  SP_FactCopyBargain : TADOStoredProc;
                   Q : TADOQuery;
    date_period_move : TDateTime;
begin
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT  isnull(dateadd(m, 1, max(view_contract_period_close.date_period)), max(check_contract.date_period)) as date_period');
  Q.SQL.Add('FROM	   (  SELECT	contract_id, date_period');
  Q.SQL.Add('			      FROM	  bargain');
  Q.SQL.Add('			      WHERE	  bargain_id = ' + IntToStr(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger));
  Q.SQL.Add('			      UNION');
  Q.SQL.Add('			      SELECT	contract_agent_id, bargain_date_period');
  Q.SQL.Add('			      FROM	  view_shaping_rate');
  Q.SQL.Add('			      WHERE	  bargain_id = ' + IntToStr(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger));
  Q.SQL.Add('		     )	check_contract left join view_contract_period_close on  view_contract_period_close.contract_id = check_contract.contract_id');
  Q.Open;
  date_period_move :=  Q.FieldByName('date_period').AsDateTime;
  Q.Free;

  if date_period_move < cxGrid1DBBandedTableView1date_period.DataBinding.Field.AsDateTime then
    date_period_move := cxGrid1DBBandedTableView1date_period.DataBinding.Field.AsDateTime;

  fmPeriod := TfmPeriod.Create(Application, date_period_move, date_period_move, 3);
  if fmPeriod.ShowModal=mrOK then begin
    date_period_move := fmPeriod._GetMonth;

    Q := TADOQuery.Create(nil);
    Q.Connection := Fconnect;
    Q.SQL.Add('SELECT  *');
    Q.SQL.Add('FROM');
    Q.SQL.Add('(  SELECT		contract_id, contract_cod, firm_customer_name');
    Q.SQL.Add('	  FROM		  view_bargain');
    Q.SQL.Add('	  WHERE		  bargain_id = ' + IntToStr(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger));
    Q.SQL.Add('	  UNION');
    Q.SQL.Add('	  SELECT 		contract_agent_id, contract_agent_cod, firm_agent_name');
    Q.SQL.Add('	  FROM		  view_shaping_rate');
    Q.SQL.Add('	  WHERE		  bargain_id = ' + IntToStr(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger));
    Q.SQL.Add(')	check_contract left join view_contract_period_close on  view_contract_period_close.contract_id = check_contract.contract_id');
    Q.SQL.Add('WHERE view_contract_period_close.date_period = ' + DateToSQL(date_period_move));
    Q.Open;

    if Q.RecordCount>0 then begin
      Application.MessageBox(PChar('Невозможно скопировать перевозку в ' + FormatDateTime('mmmm yyyy', date_period_move) + '.'+#13+#10+
                                   'В перевозке участвуют закрытые договоры.' + #13 + #10 +
                                   '№' + Q.FieldByName('contract_cod').AsString + ' ' + Q.FieldByName('firm_customer_name').AsString), 'Внимание', MB_ICONSTOP or MB_OK);
      Q.Free;
      Exit;
    end;


    Q.Free;

    Screen.Cursor := crHourglass;
    try
      SP_BargainCopy := TADOStoredProc.Create(nil);
      SP_BargainCopy.Connection := Fconnect;
      SP_BargainCopy.ProcedureName := 'sp_Bargain_Copy;1';
      SP_BargainCopy.Parameters.Refresh;
      SP_BargainCopy.Parameters.ParamByName('@bargain_id' ).Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
      SP_BargainCopy.Parameters.ParamByName('@date_period').Value := date_period_move;
      SP_BargainCopy.ExecProc;
    except
    end;

    if SP_BargainCopy.Parameters.ParamByName('@bargain_id').Value = -9 then begin
      Application.MessageBox('Невозможно скопировать перевозку!', 'Ошибка', MB_OK+MB_ICONERROR);
      SP_BargainCopy.Free;
      Screen.Cursor := crDefault;
      exit;
    end;

    if Application.MessageBox('Копировать факт в новую перевозку?.','Внимание!', MB_YESNO+MB_ICONWARNING) = ID_YES then begin

      Q := TADOQuery.Create(nil);
      Q.Connection := Fconnect;
      Q.SQL.Add('SELECT  fact_id FROM fact WHERE bargain_id = ' + IntToStr(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger));
      Q.Open;

      SP_FactCopyBargain := TADOStoredProc.Create(nil);
      SP_FactCopyBargain.Connection := Fconnect;
      SP_FactCopyBargain.ProcedureName := 'sp_fact_copy_bargain';
      while not Q.Eof do begin

        SP_FactCopyBargain.Parameters.Refresh;
        SP_FactCopyBargain.Parameters.ParamByName('@fact_id'   ).Value := Q.FieldByName('fact_id').Value;
        SP_FactCopyBargain.Parameters.ParamByName('@bargain_id').Value := SP_BargainCopy.Parameters.ParamByName('@bargain_id').Value;
        SP_FactCopyBargain.Parameters.ParamByName('@users_id'  ).Value := usr_pwd.users_id;
        try
          SP_FactCopyBargain.ExecProc;
        except
        end;

        ShowTextMessage('Осталось ' + IntToStr(Q.RecordCount - Q.RecNo) + ' записей...',  False);
        Q.Next;
      end;

      ShowTextMessage;
      SP_FactCopyBargain.Free;
      Q.Free;
    end;


    if (date_period_move < Fdate1) or (date_period_move > Fdate2) then begin
      Fdate1 := date_period_move;
      Fdate2 := IncMonth(Fdate1, 1) - 1;
      SP_Agree.Close;
      SP_Agree.Parameters.ParamByName('@date_begin').Value := Fdate1;
      SP_Agree.Parameters.ParamByName('@date_end').Value := Fdate2;
      SP_Agree.Open;
      dxBarSubItem3.Caption := FormatDateTime('mmmm yyyy', Fdate1);
    end;

    RefreshProcedure(SP_BargainCopy.Parameters.ParamByName('@bargain_id').Value,-9);
    SP_BargainCopy.Free;
  end;
  Screen.Cursor := crDefault;
end;


procedure TfmAgree2.dxBarButton102Click(Sender: TObject);
begin
  if not SP_Agree.Eof then begin
    if Fset_run_dll then
      fmAgreeAdd2 := TfmAgreeAdd2.CreateDLL(Application, Fusr_pwd)
    else
      fmAgreeAdd2 := TfmAgreeAdd2.Create(Application);

    fmAgreeAdd2._SetUpdate := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
    if fmAgreeAdd2.ShowModal=mrOk then
      RefreshProcedure(fmAgreeAdd2._GetBargainId,-9);
  end;
end;

procedure TfmAgree2.dxBarButton104Click(Sender: TObject);
  type
  TFunc = function(date: TDateTime; var ClientDS: TClientDataSet; set_show_message: boolean): variant;
var
  FFunc    : TFunc;
  handle   : THandle;
  v        : Variant;
  ClientDS : TClientDataSet;

  retActSettings      : Variant;
  exApp, exWkb, exWks : Variant;
  str_bargain_id      : string;
  str_expeditor       : array [1..2] of string;
  cod_shablon         : integer;
  recNo               : integer;
  num_document        : string;

  Q, Query_tmp : TADOQuery;
  Q2 : TADOQuery;
begin
  // 503
  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');
//
  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE or ACT_SET_DATEDELIVERY);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

    // Заполняем шапку и подписи
  exWks.Range['B2'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' + #10 +
                     'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['O4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';
  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ' - ' + str_expeditor[1];
  exWks.Range['B7'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString  + ' - ' + str_expeditor[2];
  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['K18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  exWks.Range['B14'].Value := 'Настоящий расчёт объёма оказанных услуг составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

    // Подписанты МЫ
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:H20'].ClearContents;
    // Подписанты  Клиент
  if retActSettings[13][8] = True then begin
    exWks.Range['L20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['N20'].Value := retActSettings[13][7];
  end else
    exWks.Range['L20:O20'].ClearContents;




  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  Q2 := TADOQuery.Create(nil);
  Q2.Connection := Fconnect;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT	fact_id,');
  Q.SQL.Add('num_vagon,');
  Q.SQL.Add('date_from_to, fact_weight,');
  Q.SQL.Add('node_begin_name, node_begin_cod,');
  Q.SQL.Add('node_end_name, node_end_cod,');
  Q.SQL.Add('isnull(num_document_pref,'''') + num_document as num_document,');
  Q.SQL.Add('kargoETSNG_cod,');
  Q.SQL.Add('kargoETSNG_name,');
  Q.SQL.Add('fact_weight,');
  Q.SQL.Add('(SELECT	top 1 sum_fact');
  Q.SQL.Add('FROM	fraht_fact left join shaping_rate on fraht_fact.client_agent_id = shaping_rate.shaping_rate_id');
  Q.SQL.Add('WHERE	service_type = 0 and fraht_fact.fact_id = view_bargain_fact.fact_id) sum_fact,');
  Q.SQL.Add('transport_pay');
  Q.SQL.Add('FROM	view_bargain_fact');
  Q.SQL.Add('WHERE	bargain_id in (' + str_bargain_id + ') and set_main = 1');
  Q.Open;

  ClientDS := TClientDataSet.Create(nil);
  ClientDS.FieldDefs.Add('fact_id'       , ftInteger);
  ClientDS.FieldDefs.Add('num_vagon'     , ftString, 20);
  ClientDS.FieldDefs.Add('vagon_count'   , ftInteger);
  ClientDS.FieldDefs.Add('rod_vagon_cod' , ftString, 20);
  ClientDS.FieldDefs.Add('node_begin_cod', ftString, 20);
  ClientDS.FieldDefs.Add('node_end_cod'  , ftString, 20);
  ClientDS.FieldDefs.Add('kargoETSNG_cod', ftString, 20);
  ClientDS.FieldDefs.Add('date_from_to'  , ftDate);
  ClientDS.FieldDefs.Add('fact_weight'   , ftFloat);
  ClientDS.FieldDefs.Add('transport_pay' , ftCurrency);
  ClientDS.FieldDefs.Add('rate_val'      , ftCurrency);
  ClientDS.FieldDefs.Add('set_route'     , ftBoolean);
  ClientDS.CreateDataSet;
  ClientDS.LogChanges := False;

  while not Q.Eof do begin
    ClientDS.Append;
    ClientDS.FieldByName('fact_id'        ).Value := Q.FieldByName('fact_id').Value;
    ClientDS.FieldByName('num_vagon'      ).Value := Q.FieldByName('num_vagon').Value;
    ClientDS.FieldByName('node_begin_cod' ).Value := Q.FieldByName('node_begin_cod').Value;
    ClientDS.FieldByName('node_end_cod'   ).Value := Q.FieldByName('node_end_cod').Value;
    ClientDS.FieldByName('kargoETSNG_cod' ).Value := Q.FieldByName('kargoETSNG_cod').Value;
    ClientDS.FieldByName('date_from_to'   ).Value := Q.FieldByName('date_from_to').Value;
    ClientDS.FieldByName('fact_weight'    ).Value := Q.FieldByName('fact_weight').Value;

    num_document := Q.FieldByName('num_document').AsString;
    Q2.SQL.Clear;
    Q2.SQL.Add('SELECT	count(distinct num_vagon) vagon_count, cast(max(case when isnull(inf_obj.inf_obj_cod,''0'') = ''5'' then 1 else 0 end) as bit) set_route');
    Q2.SQL.Add('FROM	fact inner join users on fact.users_id =  users.users_id');
    Q2.SQL.Add('left join inf_obj on fact.kateg_send = inf_obj.inf_obj_id');
    Q2.SQL.Add('WHERE	users_group_id = (SELECT users_group_id FROM users WHERE users_name = system_user)');
    Q2.SQL.Add('and (isnull(num_document_pref,'''') +num_document) = ''' + num_document + '''');
    Q2.Open;

    ClientDS.FieldByName('vagon_count'    ).Value := Q2.FieldByName('vagon_count').Value;
    ClientDS.FieldByName('set_route'      ).Value := Q2.FieldByName('set_route').AsBoolean;
    ClientDS.Post;

    Q.Next;

    ShowTextMessage('Подготовка вагонов. ' + IntToStr(Q.RecNo) + ' из ' + IntToStr(Q.RecordCount) + ' вагонов...', False);
  end;

  handle := LoadLibrary('ctm_tarif.dll');
  @FFunc := GetProcAddress(handle, 'GetCalcTariffCalculate2');
  v := FFunc(Date, ClientDS, True);
  FreeLibrary(handle);

  Q.First;
  recNo := 8;
  while not Q.Eof do begin
    exWks.Rows[IntToStr(3 + recNo)].Insert;
    exWks.Rows[IntToStr(2 + recNo)].Copy;
    exWks.Rows[IntToStr(3 + recNo)].PasteSpecial(1);

    exWks.Range['B' + IntToStr(2 + recNo)].Value := Q.FieldByName('node_begin_name').AsString;
    exWks.Range['C' + IntToStr(2 + recNo)].Value := Q.FieldByName('node_end_name').AsString;
    exWks.Range['D' + IntToStr(2 + recNo)].Value := Q.FieldByName('num_vagon').AsString;
    exWks.Range['E' + IntToStr(2 + recNo)].Value := Q.FieldByName('date_from_to').AsDateTime;
    exWks.Range['F' + IntToStr(2 + recNo)].Value := Q.FieldByName('num_document').AsString;
    exWks.Range['G' + IntToStr(2 + recNo)].Value := Q.FieldByName('kargoETSNG_cod').AsString;
    exWks.Range['H' + IntToStr(2 + recNo)].Value := Q.FieldByName('sum_fact').AsFloat;

    if ClientDS.Locate('fact_id', Q.FieldByName('fact_id').AsInteger, []) then
      exWks.Range['J' + IntToStr(2 + recNo)].Value := ClientDS.FieldByName('rate_val').AsFloat;

    exWks.Range['K' + IntToStr(2 + recNo)].Value := Q.FieldByName('transport_pay').AsFloat;
    exWks.Range['M' + IntToStr(2 + recNo)].Value := Q.FieldByName('kargoETSNG_name').AsString;
    exWks.Range['N' + IntToStr(2 + recNo)].Value := Q.FieldByName('fact_weight').AsFloat;


    if ClientDS.Locate('fact_id', Q.FieldByName('fact_id').AsInteger, []) then
      if ClientDS.FieldByName('vagon_count').AsInteger > 1 then
        exWks.Range['O' + IntToStr(2 + recNo)].Value := 'групповая'
      else
        exWks.Range['O' + IntToStr(2 + recNo)].Value := 'повагонная';

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(Q.RecordCount - Q.RecNo), False);
    Q.Next;
  end;

  exWks.Rows[IntToStr(2 + recNo)].Delete;
  exWks.Rows[IntToStr(2 + recNo)].Delete;
  exWks.Select;
  exWks.Range['A1'].Select;
  exWkb.WorkSheets[1].Select;

  Q.Free;
  Q2.Free;
  ClientDS.Free;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton106Click(Sender: TObject);
begin
  UsersSettingModify(TComponent(Sender).Tag, TForm(self).Name, TcxControl(cxGrid1DBBandedTableView1), fmMain.Lis);
end;

procedure TfmAgree2.dxBarButton14Click(Sender: TObject);
var  Fview : TcxGridDBBandedTableView;
begin
  if Sender is TdxBarButton then begin
    case TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag of
      0 : Fview := cxGrid3DBBandedTableView1;
      1 : Fview := cxGrid7DBBandedTableView1;
    end;
  end else begin
    Fview := TcxGridDBBandedTableView(TcxGridSite(Sender).GridView);
  end;

  if Fview.Controller.SelectedRecordCount = 0 then
    exit;

  fmAgreeAdd2 := TfmAgreeAdd2.Create(Application);
  fmAgreeAdd2._SetUpdateShapingRate := Fview.GetColumnByFieldName('shaping_rate_id').DataBinding.Field.AsInteger;
  if fmAgreeAdd2.ShowModal = mrOk then begin
    RefreshProcedure(fmAgreeAdd2._GetBargainId,-9);
  end;
end;

procedure TfmAgree2.dxBarButton108Click(Sender: TObject);
var list_bargain_id : array of string;
     str_bargain_id : string;
                  i : integer;
begin
  str_bargain_id := '';
  SetLength(list_bargain_id, cxGrid3DBBandedTableView1.Controller.SelectedRowCount);

  for i := 0 to cxGrid3DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
      list_bargain_id[i] := cxGrid3DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid3DBBandedTableView1bargain_id.Index];
      if i > 0 then str_bargain_id := str_bargain_id + ',';
      if cxGrid3DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid3DBBandedTableView1bargain_id.Index] = null then
        str_bargain_id := str_bargain_id + '<пусто>'
      else
        str_bargain_id := str_bargain_id + VarToStr(cxGrid3DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid3DBBandedTableView1bargain_id.Index]);
    end;

  cxPageControl1.ActivePageIndex := 0;
  cxGrid1DBBandedTableView1.DataController.Filter.Clear;
  cxGrid1DBBandedTableView1.DataController.Filter.Options := cxGrid1DBBandedTableView1.DataController.Filter.Options + [fcoCaseInsensitive];
  cxGrid1DBBandedTableView1.DataController.Filter.Root.BoolOperatorKind := fboAnd;
  cxGrid1DBBandedTableView1.DataController.Filter.Root.AddItem(cxGrid1DBBandedTableView1bargain_id, foInList, list_bargain_id, str_bargain_id);
  cxGrid1DBBandedTableView1.DataController.Filter.Active := True;
end;

procedure TfmAgree2.RUS2Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  //121 = 'Акт оказанных услуг (ТТК-Транс)'
  //204 = 'Акт оказанных услуг (ТНК-BP Холдинг)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, 0);
  if retActSettings[0] = -9 then
    exit;


  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['O3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['L18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:G20'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E22'].Value := retActSettings[13][4];
  end else
    exWks.Range['B22:G22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['L20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['O20'].Value := retActSettings[13][7];
  end else
    exWks.Range['L20:P20'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['L22'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['O22'].Value := retActSettings[13][10];
  end else
    exWks.Range['L22:P22'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['20:22'].Copy;
    exWks.Rows['24:26'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B24'].Value := 'Дата подписания';
    exWks.Range['B26'].Value := '"____" __________________ 201__';
    exWks.Range['L24'].Value := 'Дата подписания';
    exWks.Range['L26'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['K10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['M10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['N10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['O10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['P10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['H10'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin').Value     := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end').Value       := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon').Value   := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    if (SP_Balans_Detail.FieldByName('bargain_correct_type').AsInteger = 1) or (SP_Balans_Detail.FieldByName('summa').AsCurrency > 0) then begin
      exWks.Rows[IntToStr(11 + recNo)].Insert;
      exWks.Rows[IntToStr(10 + recNo)].Copy;
      exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

      if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
        exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
      else // Доп. сбор.
        exWks.Range['A' + IntToStr(10 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
      exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
      if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
      else
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['H' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['I' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['J' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['L' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;
//      if SP_Balans_Detail.FieldByName('bargain_nds_cod').IsNull then
//        exWks.Range['L' + IntToStr(10 + recNo)].Value := 'Без НДС'
//      else
//        exWks.Range['L' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['K' + IntToStr(10 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      exWks.Range['M' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;
      exWks.Range['P' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

      inc(recNo);
    end;

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;

  // Для ТТК_Транс формируем отчет
  if cod_shablon = 121 then begin
    exWkb.WorkSheets[2].Range['self_type'].Value := str_expeditor[1];
    exWkb.WorkSheets[2].Range['customer_type'].Value := str_expeditor[2];
    Report_TTKTrans(retActSettings, exWkb, str_bargain_id);
  end;
  // Для ТНК-BP Холдинг формируем отчет
  if cod_shablon = 204 then
    Report_VagonList(retActSettings, exWkb, str_bargain_id);

  exWks.Select;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['P' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.N62Click(Sender: TObject);
var  new_str : string;
           i : integer;
 SP_FactCopy : TADOStoredProc;
begin
  if InputQuery('Копировать факт', '№ записи перевозки:', new_str) then begin
    Screen.Cursor := crHourglass;

    SP_FactCopy := TADOStoredProc.Create(nil);
    SP_FactCopy.Connection := Fconnect;
    SP_FactCopy.ProcedureName := 'sp_fact_copy_bargain;1';
    SP_FactCopy.Parameters.Refresh;

    for i := 0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
      SP_FactCopy.Close;
      SP_FactCopy.Parameters.ParamByName('@fact_id').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      SP_FactCopy.Parameters.ParamByName('@bargain_id').Value := StrToInt(new_str);
      try
        SP_FactCopy.ExecProc;
      except
        SP_FactCopy.Free;
        ShowTextMessage;
      end;
      ShowTextMessage('Осталось ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i) + ' записей...',  False);
    end;
    SP_FactClient.Close;
    SP_FactClient.Open;
    SP_FactCopy.Free;
    ShowTextMessage;

    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.N63Click(Sender: TObject);
var      new_str : string;
              i  : integer;
    set_clear_fk : boolean;
     SP_FactMove : TADOStoredProc;
begin

  if not cxGrid1DBBandedTableView1bargain_sum_fact.DataBinding.Field.IsNull then begin
    set_clear_fk := False;
    for i := 0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do
      if cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1set_main.Index] = 1 then  set_clear_fk := True;

    if set_clear_fk then
      if Application.MessageBox('Фрахтовая карточка будет удалена, т.к. изменилось кол-во вагонов.'+#10+'Вы уверенны?','Внимание!',MB_OKCANCEL+MB_ICONWARNING) <> ID_OK then Exit;
  end;

  if InputQuery('Переместить факт', '№ записи перевозки:', new_str) then begin
    Screen.Cursor := crHourglass;

    SP_FactMove := TADOStoredProc.Create(nil);
    SP_FactMove.Connection := Fconnect;
    SP_FactMove.ProcedureName := 'sp_fact_move_bargain;1';
    SP_FactMove.Parameters.Refresh;

    for i := 0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
      SP_FactMove.Close;
      SP_FactMove.Parameters.Refresh;
      SP_FactMove.Parameters.ParamByName('@fact_id').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      SP_FactMove.Parameters.ParamByName('@bargain_id').Value := StrToInt(new_str);
      SP_FactMove.Parameters.ParamByName('@set_main').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1set_main.Index];
      try
        SP_FactMove.ExecProc;
      except
        SP_FactMove.Free;
        ShowTextMessage;
      end;
      ShowTextMessage('Осталось ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i) + ' записей...',  False);
    end;
    SP_FactClient.Close;
    SP_FactClient.Open;

    SP_FactMove.Free;
    ShowTextMessage;

    Screen.Cursor := crDefault;
    RefreshQueryGrid(cxGrid1DBBandedTableView1, 'bargain_id');
  end;
end;

procedure TfmAgree2.dxBarButton101Click(Sender: TObject);
begin
  fmAgreeAdd2 := TfmAgreeAdd2.Create(Application);
  fmAgreeAdd2._SetInsert := True;
  if fmAgreeAdd2.ShowModal=mrOk then
    RefreshProcedure(fmAgreeAdd2._GetBargainId,-9);
end;

procedure TfmAgree2.N70Click(Sender: TObject);
var SP_Fraht_Card_Delete : TADOStoredProc;
begin
  if Application.MessageBox('Вы уверены, что хотите удалить из баланса?', 'ВНИМАНИЕ',  MB_OKCANCEL) = IDOK then begin
    Screen.Cursor := crHourglass;

    SP_Fraht_Card_Delete := TADOStoredProc.Create(nil);
    SP_Fraht_Card_Delete.Connection := Fconnect;
    SP_Fraht_Card_Delete.ProcedureName := 'sp_FRAHT_CARD_delete;1';
    SP_Fraht_Card_Delete.Parameters.Refresh;

    SP_Fraht_Card_delete.Close;
    SP_Fraht_Card_delete.Parameters.ParamByName('@bargain_id').Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
    SP_Fraht_Card_delete.ExecProc;
    if SP_Fraht_Card_delete.Parameters.ParamByName('@bargain_id').Value <> 0 then
      Application.MessageBox(PChar('По неизвестным причинам, невозможно удалить из баланса!'), 'Ошибка', MB_OK)
    else RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);

    SP_Fraht_Card_Delete.Free;
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.N72Click(Sender: TObject);
begin
  cxGrid2DBBandedTableView1.OptionsView.GroupByBox := not cxGrid2DBBandedTableView1.OptionsView.GroupByBox;
end;

procedure TfmAgree2.N75Click(Sender: TObject);
var              i : integer;
  SP_Bargain_Block : TADOStoredProc;
begin
  if Application.MessageBox('Вы точно уверены?', 'Внимание', MB_OKCANCEL) = IDOK then begin
    Screen.Cursor := crHourglass;
    SP_Bargain_Block := TADOStoredProc.Create(Application);
    SP_Bargain_Block.Connection := Fconnect;
    SP_Bargain_Block.ProcedureName := 'sp_Bargain_Block;1';
    SP_Bargain_Block.Parameters.Refresh;
    for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRowCount-1 do begin
      try
        SP_Bargain_Block.Parameters.ParamByName('@bargain_id').Value := cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1.GetColumnByFieldName('bargain_id').Index];
        SP_Bargain_Block.Parameters.ParamByName('@set_bargain_block').Value := TControl(Sender).Tag;
        SP_Bargain_Block.ExecProc;
      except
      end;
    end;
    SP_Bargain_Block.Free;
    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
  end;
end;

procedure TfmAgree2.N15Click(Sender: TObject);
var str_bargain_id : string;
    i              : integer;
    Fview          : TcxGridDBBandedTableView;
begin
  case cxPageControl1.ActivePageIndex of
    0 : Fview := cxGrid1DBBandedTableView1;
    1 : Fview := cxGrid3DBBandedTableView1;
    2 : begin
          Application.MessageBox('Для формирования фрахт. карт. перейдите на вкладку "Перевозки" или "Услуги"', 'Внимание', MB_OK or MB_ICONERROR);
          exit;
        end;
  end;

  if Fview.Controller.SelectedRecordCount = 0 then
    exit;

  str_bargain_id := '';
  for i := 0 to Fview.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(Fview.Controller.SelectedRows[i].Values[Fview.GetColumnByFieldName('bargain_id').Index]);
  Delete(str_bargain_id, 1, 2);

  if str_bargain_id <> '' then begin
    PrintFrahtCardWeight_Multi2(Fconnect, str_bargain_id);
    RefreshProcedure(-9, cxPageControl1.ActivePageIndex);
  end;

end;

procedure TfmAgree2.N165Click(Sender: TObject);
var              list : TStrings;
           i, num_str : integer;
  str, str_bargain_id : string;
  exApp, exWkb, exWks : variant;
  tmp_bln : boolean;
  Q : TADOQuery;
begin
  if cxGrid1DBBandedTableView1.Controller.SelectedRowCount = 0 then begin
    Application.MessageBox('Нет выделенных перевозок','Внимание',MB_OK);
    Exit;
  end;
  Screen.Cursor := crHourglass;
  try
    list := TStringList.Create;

    str_bargain_id := GetStrId(cxGrid1DBBandedTableView1bargain_id, ',');
    Q := TADOQuery.Create(nil);
    Q.Connection := Fconnect;
    Q.SQL.Add('SELECT DISTINCT firm_agent_name, firm_agent FROM view_bargain_shaping_rate ');
    Q.SQL.Add('WHERE bargain_id IN (' + str_bargain_id + ')');
    Q.Open;

    for i := 1 to Q.RecordCount do begin
      list.AddObject(Q.FieldByName('firm_agent_name').AsString, Pointer(Q.FieldByName('firm_agent').AsInteger));
      Q.Next;
    end;

    if not InputComboBox(List, 'Субподрядчики', 'Выберите субподрядчика', str, False, '', tmp_bln, False, '', tmp_bln, False, '', tmp_bln) then begin
      list.Free;
      exit;
    end else begin
      str := IntToStr(integer(list.Objects[StrToInt(str)]));
      try
        exApp := CreateOleObject('Excel.Application');
        exWkb := exApp.Workbooks.Add;
        exWkb := exApp.ActiveWorkbook;
        exWks := exApp.ActiveWorkbook.WorkSheets[1];
        exApp.ActiveWindow.DisplayGridlines := False;
        exWks.Cells.Font.Size := 9;
        num_str := 2;
        exWks.Cells[num_str, 2].Value := 'СтОтпр';
        exWks.Cells[num_str, 3].Value := 'СтНазн';
        exWks.Cells[num_str, 4].Value := 'Груз';
        exWks.Cells[num_str, 5].Value := 'Вес';
        exWks.Cells[num_str, 6].Value := 'Ставка';
        exWks.Cells[num_str, 8].Value := 'Тип Ставки';
        num_str := num_str + 1;
        for i:=0 to cxGrid1DBBandedTableView1.DataController.GetSelectedCount -1 do begin
          ShowTextMessage('Обрабатывается перевозка : '+IntToStr(i+1)+' из '+IntToStr(cxGrid1DBBandedTableView1.DataController.GetSelectedCount)+#13+ 'Подождите пожалуйста...', False);
          Q.Close;
          Q.SQL.Clear;
          Q.SQL.Add('SELECT b.* , s.brief_name + ''/'' + s.ed_izm_name as ed_izm_name FROM view_bargain_list_rate b ');
          Q.SQL.Add('INNER JOIN view_bargain_shaping_rate s ON  s.shaping_rate_id = b.rate_id ');
          Q.SQL.Add('WHERE  type_rate = 2 AND s.firm_agent = ' + str + ' AND s.bargain_id =' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]));
          Q.Open;
          if Q.RecordCount > 0 then begin
            exWks.Cells[num_str, 2].Value := OleVariant(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1node_begin_name.Index]);
            exWks.Cells[num_str, 3].Value := OleVariant(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1node_end_name.Index]);
            exWks.Cells[num_str, 4].Value := OleVariant(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1kargoETSNG_name.Index]);
            while not Q.Eof do begin
              if Q.FieldByName('weight').AsFloat = -9 then exWks.Cells[num_str, 5].Value := 'любой вес'
              else exWks.Cells[num_str, 5].Value := Q.FieldByName('weight').AsFloat;
              exWks.Cells[num_str, 6].Value := Q.FieldByName('rate_val').AsFloat;
              exWks.Cells[num_str, 7].Value := Q.FieldByName('ed_izm_name').AsString;
              exWks.Cells[num_str, 8].Value := Q.FieldByName('type_tools_name').AsString;
              exWks.Cells[num_str, 9].Value := Q.FieldByName('attr_self_name').AsString;
              num_str := num_str + 1;
              Q.Next;
            end;
            exWks.Range[exWks.Cells[num_str,2],exWks.Cells[num_str, 9]].Borders[8].LineStyle := 1; // bottom
          end;
        end;
        num_str := num_str - 1;
      finally
        ShowTextMessage;
        exWks.PageSetup.Zoom := 90;
        exWks.PageSetup.FitToPagesWide := 1;
        exWks.PageSetup.FitToPagesTall := 200;
        exWks.PageSetup.PrintArea := exWks.Range[exWks.Cells[1,1], exWks.Cells[num_str, 9]].Address;

        exWks.Columns[1].ColumnWidth := 1.57;
        exWks.Columns[2].ColumnWidth := 12;
        exWks.Columns[3].ColumnWidth := 12;
        exWks.Columns[4].ColumnWidth := 12;
        exWks.Columns[5].ColumnWidth := 8.14;
        exWks.Columns[6].ColumnWidth := 9;
        exWks.Columns[7].ColumnWidth := 9;
        exWks.Columns[8].ColumnWidth := 9;
        exWks.Columns[9].ColumnWidth := 12;

        exWks.Range[exWks.Cells[2,2],exWks.Cells[2, 9]].Interior.ColorIndex := 35;
        exWks.Range[exWks.Cells[2,2],exWks.Cells[2, 9]].Borders[1].LineStyle := 1; // center
        exWks.Range[exWks.Cells[2,2],exWks.Cells[2, 9]].Borders[2].LineStyle := 1;
        exWks.Range[exWks.Cells[2,2],exWks.Cells[2, 9]].Borders[3].LineStyle := 1;
        exWks.Range[exWks.Cells[2,2],exWks.Cells[2, 9]].Borders[4].LineStyle := 1;

        exWks.Range[exWks.Cells[2,2],exWks.Cells[num_str, 9]].Borders[5].LineStyle := -4142; // center
        exWks.Range[exWks.Cells[2,2],exWks.Cells[num_str, 9]].Borders[6].LineStyle := -4142; // center
        exWks.Range[exWks.Cells[2,2],exWks.Cells[num_str, 9]].Borders[7].LineStyle := 1; // center
        exWks.Range[exWks.Cells[2,2],exWks.Cells[num_str, 9]].Borders[8].LineStyle := 1;
        exWks.Range[exWks.Cells[2,2],exWks.Cells[num_str, 9]].Borders[9].LineStyle := 1;
        exWks.Range[exWks.Cells[2,2],exWks.Cells[num_str, 9]].Borders[10].LineStyle := 1;
        exWks.Range[exWks.Cells[2,2],exWks.Cells[num_str, 9]].Borders[11].LineStyle := 1;

        exApp.Visible := True;
        exWks := Null;
        exWkb := Null;
        exApp := Null;
      end;
    end;
    list.Free;
    Q.Free;
  finally
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.N167Click(Sender: TObject);
type
  TFunc = function(AppHand: THandle; usr_pwd: PUser_pwd) : variant;
var
  FRepAnalysis : TFunc;
        handle : THandle;
begin
  handle := LoadLibrary('reports.dll');
  @FRepAnalysis := GetProcAddress(handle, 'CreateWndAnalysis');
  FRepAnalysis(Application.Handle, usr_pwd);
  FreeLibrary(handle);
end;

procedure TfmAgree2.N170Click(Sender: TObject);
begin
  if cxGrid1DBBandedTableView1.DataController.RecordCount = 0 then begin
    Application.MessageBox('Нет выделенных строк.', 'Внимание', MB_OK);
    exit;
  end;

  case TControl(Sender).Tag of
    // Акт сверки взаиморасчётов
    0 : PrintActVerify_Evrocement(cxGrid1DBBandedTableView1contract_id.DataBinding.Field.AsInteger, Fdate1, Fdate2, Fconnect);
  end;
end;

procedure TfmAgree2.Report_SFHPrivolzhsk(cod_shablon: integer; retActSettings: Variant; exWkb: Variant; str_bargain_id: string; set_recalc_distance: boolean);
var
  exWks_pril        : Variant;
  SP_Balans_Detail  : TADOStoredProc;
  recPril           : integer;
  nds_rate            : Currency;

  ClientDS_distance   : TClientDataSet;
begin
  // 206 = 'Акт Совфрахт-Приволжск - Отчет (лист2)'
  // 217 = 'Акт оказанных услуг + Вагон (Совфрахт-Приволжск) - Отчет (лист2)'
  // 307 = 'Акт оказанных услуг + Вагон (Совфрахт-Приволжск) - Отчет (лист2)'

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exWks_pril := exWkb.WorkSheets[2];

  if (retActSettings[7][0] <> 3) then begin
    if cod_shablon = 307 then
      exWks_pril.Range['P4'].Value := 'Ставка без НДС, ' + VarToStr(retActSettings[7][1])
    else
      exWks_pril.Range['P4'].Value := 'Ставка с НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_pril.Range['Q4'].Value := 'Стоимость услуг без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_pril.Range['R4'].Value := 'Сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_pril.Range['S4'].Value := 'Стоимость услуг с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := retActSettings[0];
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact').Value    := True;  // В данном отчете нас всегда интересует маршрут из факта
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact').Value    := True;  // В данном отчете нас всегда интересует груз из факта
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  // Заполняем
  recPril := 1;
  while not SP_Balans_Detail.Eof do begin
    // Строка в "Отчет к акту"
    exWks_pril.Rows[IntToStr(recPril + 5)].Insert;
    exWks_pril.Rows[IntToStr(recPril + 4)].Copy;
    exWks_pril.Rows[IntToStr(recPril + 5)].PasteSpecial(1);

    exWks_pril.Range['A' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks_pril.Range['B' + IntToStr(recPril + 4)].Value := recPril;

    // Расстояние
    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, set_recalc_distance, SP_Balans_Detail.FieldByName('date_from_to').Value);
      ClientDS_distance.Post;
    end;
    exWks_pril.Range['C' + IntToStr(recPril + 4)].Value := ClientDS_distance.FieldByName('distance').Value;

    exWks_pril.Range['D' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks_pril.Range['E' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks_pril.Range['F' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('datpr').Value;
    exWks_pril.Range['G' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
      exWks_pril.Range['H' + IntToStr(recPril + 4)].Value := null
    else
      exWks_pril.Range['H' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;
    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks_pril.Range['I' + IntToStr(recPril + 4)].Value := null
    else
      exWks_pril.Range['I' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;
    exWks_pril.Range['J' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks_pril.Range['K' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_road_begin_name').AsString;
    exWks_pril.Range['L' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks_pril.Range['M' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_road_end_name').AsString;
    exWks_pril.Range['N' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;

    //НДС
    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks_pril.Range['O' + IntToStr(recPril + 4)].Value := Query_NDS.FieldByName('nds_name').AsString;

    // выводим ставку без НДС (307) и ставку с НДС (206 и 217)
    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
    if cod_shablon = 307 then begin
      exWks_pril.Range['P' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('rate_without_nds').AsCurrency;
      exWks_pril.Range['Q' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('summa_without_nds').AsCurrency;
    end else begin
      exWks_pril.Range['P' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;
      exWks_pril.Range['S' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;
    end;

    inc(recPril);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // удаляем лишниие
  if recPril = 1 then begin
    exWks_pril.Rows['6:6'].Delete;
    exWks_pril.Rows['5:5'].ClearContents;
  end else begin
    exWks_pril.Rows[IntToStr(recPril + 4) + ':' + IntToStr(recPril + 5)].Delete;
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exWks_pril.Select;
  exWks_pril.Range['A1'].Select;
  exWkb.WorkSheets[1].Select;

  ShowTextMessage;
  Screen.Cursor := crDefault;

  VarClear(exWks_pril);
end;

procedure TfmAgree2.Report_VagonList(retActSettings: Variant; exWkb: Variant; str_bargain_id: string);
var
  exWks             : Variant;
  SP_ReportTEO      : TADOStoredProc;
  rows              : integer;
begin
  //204 = 'Акт оказанных услуг (ТНК-BP Холдинг)'

  // Формируем отчет
  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  // Формирование данных для отчета
  SP_ReportTEO := TADOStoredProc.Create(nil);
  SP_ReportTEO.Connection := Fconnect;
  SP_ReportTEO.ProcedureName := 'sp_act_report_Povagonka';
  SP_ReportTEO.Parameters.Refresh;
  SP_ReportTEO.Parameters.ParamByName('@contract_id').Value := retActSettings[8];
  SP_ReportTEO.Parameters.ParamByName('@acts_type_cod').Value := retActSettings[0];
  SP_ReportTEO.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_ReportTEO.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;

  try
    SP_ReportTEO.Open;
  except
  end;

  ShowTextMessage('Запуск Excel...', False);

  exWks := exWkb.WorkSheets[2];

  // Формируем отчет
  rows         := 1;
  while not SP_ReportTEO.Eof do begin
    ShowTextMessage('Вывод в Excel (осталось ' + IntToStr(SP_ReportTEO.RecordCount - SP_ReportTEO.RecNo + 1) + ' записей)', False);

    // Заполнение строки
    exWks.Rows[rows + 6].Insert;
    exWks.Rows[rows + 5].Copy;
    exWks.Rows[rows + 6].PasteSpecial(1);

    exWks.Range['B' + IntToStr(5 + rows)].Value := rows;
    exWks.Range['C' + IntToStr(5 + rows)].Value := SP_ReportTEO.FieldByName('num_vagon').AsInteger;
    exWks.Range['D' + IntToStr(5 + rows)].Value := SP_ReportTEO.FieldByName('date_from_to').AsDateTime;
    exWks.Range['E' + IntToStr(5 + rows)].Value := SP_ReportTEO.FieldByName('num_document').AsString;
    exWks.Range['F' + IntToStr(5 + rows)].Value := SP_ReportTEO.FieldByName('fact_weight').AsFloat;
    exWks.Range['G' + IntToStr(5 + rows)].Value := SP_ReportTEO.FieldByName('bargain_node_begin_name').AsString;
    exWks.Range['H' + IntToStr(5 + rows)].Value := SP_ReportTEO.FieldByName('bargain_node_end_name').AsString;
    exWks.Range['I' + IntToStr(5 + rows)].Value := SP_ReportTEO.FieldByName('bargain_kargoETSNG_name').AsString;

    Inc(rows);
    SP_ReportTEO.Next;
  end;

  // Завершение
  exWks.Rows[IntToStr(5 + rows) + ':' + IntToStr(6 + rows)].Delete;
  exWks.Select;
  exWks.Range['A1'].Select;
  exWkb.WorkSheets[1].Select;

  ShowTextMessage;
  Screen.Cursor := crDefault;

  SP_ReportTEO.Free;

  VarClear(exWks);
end;

procedure TfmAgree2.Report_TTKTrans(retActSettings: Variant; exWkb: Variant; str_bargain_id: string);
var
  exWks             : Variant;
  SP_ReportTEO      : TADOStoredProc;
  rows              : integer;
//  ReportSum         : Currency;
begin
  // 121 - 'Отчет Исполнителя (ТТК-Транс)'

  // Формируем отчет
  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  // Формирование данных для отчета
  SP_ReportTEO := TADOStoredProc.Create(nil);
  SP_ReportTEO.Connection := Fconnect;
  SP_ReportTEO.ProcedureName := 'sp_act_report_Povagonka';
  SP_ReportTEO.Parameters.Refresh;
  SP_ReportTEO.Parameters.ParamByName('@contract_id').Value := retActSettings[8];
  SP_ReportTEO.Parameters.ParamByName('@acts_type_cod').Value := retActSettings[0];
  SP_ReportTEO.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_ReportTEO.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;

  try
    SP_ReportTEO.Open;
  except
  end;

  ShowTextMessage('Запуск Excel...', False);

  exWks := exWkb.WorkSheets[2];

  // Начальный баланс и прочие переменнеые однозначные для всех листов
  exWks.Range['B3'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', StartOfTheMonth(retActSettings[3][1])) + ' г. по ' + FormatDateTime('dd.mm.yyyy', EndOfTheMonth(retActSettings[3][1])) + ' г.' + #10 +
                             'по агентскому договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  // Формируем отчет
  rows         := 0;
  while not SP_ReportTEO.Eof do begin
    ShowTextMessage('Вывод в Excel (осталось ' + IntToStr(SP_ReportTEO.RecordCount - SP_ReportTEO.RecNo + 1) + ' записей)', False);

    // Заполнение строки
    exWks.Rows[rows + 12].Insert;
    exWks.Rows[rows + 11].Copy;
    exWks.Rows[rows + 12].PasteSpecial(1);

    exWks.Range['B' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('date_period').AsString;
    exWks.Range['C' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('bargain_node_begin_name').AsString;
    exWks.Range['D' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('bargain_road_begin_name').AsString;
    exWks.Range['E' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('bargain_node_end_name').AsString;
    exWks.Range['F' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('bargain_road_end_name').AsString;
    exWks.Range['G' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('bargain_kargoETSNG_name').AsString;

    exWks.Range['H' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('date_from_to').AsDateTime;
    exWks.Range['I' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('num_document').AsString;
    exWks.Range['J' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('num_vagon').AsInteger;
    exWks.Range['K' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('calc_weight').AsFloat;

    if SP_ReportTEO.FieldByName('bargain_nds_cod').AsInteger = 18 then begin
      exWks.Range['L' + IntToStr(11 + rows)].Value := RoundCurr(SP_ReportTEO.FieldByName('rate').AsFloat / 1.18, -2);
    end else begin
      exWks.Range['L' + IntToStr(11 + rows)].Value := SP_ReportTEO.FieldByName('rate').AsFloat;
    end;


    Inc(rows);
    SP_ReportTEO.Next;
  end;

  // Завершение
  exWks.Rows[IntToStr(11 + rows) + ':' + IntToStr(12 + rows)].Delete;
  exWks.Select;
  exWks.Range['A1'].Select;
  exWkb.WorkSheets[1].Select;

  ShowTextMessage;
  Screen.Cursor := crDefault;

  SP_ReportTEO.Free;

  VarClear(exWks);
end;

procedure TfmAgree2.N178Click(Sender: TObject);
var Q, Q_update : TADOQuery;
    i : integer;
begin
  if Application.MessageBox('Будут обновлены только вагоны от "ФГП ВО ЖД РФ"', 'Внимание', MB_OKCANCEL) = IDCANCEL then exit;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q_update := TADOQuery.Create(nil);
  Q_update.Connection := Fconnect;

  Q.SQL.Add('SELECT TOP 1 date_delivery FROM view_fact_all ');
  Q.SQL.Add('WHERE (num_vagon = :num_vagon) ');
  Q.SQL.Add('AND (num_document = :num_document) ');
  Q.SQL.Add('AND (num_document_pref = :num_document_pref) ');
  Q.SQL.Add('AND YEAR(date_from_to) = YEAR(:date_from_to)');
  Q.SQL.Add('AND (firm_info_id = 121121)');   //---- поиск только в этрановских вагонах -------
  Q.SQL.Add('AND (users_group_id = ' + IntToStr(usr_pwd.user_group_id) + ')');

  Q_update.SQL.Add('UPDATE fact SET date_delivery=:date_delivery WHERE fact_id=:fact_id');

  for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount-1 do begin
    // ---- если не ВОХР, то пропускаем ------------
    if cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1firm_info_id.Index] <> 96699 then continue;

    Q.Close;
    Q.Parameters.ParamByName('num_vagon').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1num_vagon.Index];
    Q.Parameters.ParamByName('num_document').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1num_document.Index];
    Q.Parameters.ParamByName('num_document_pref').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1num_document_pref.Index];
    Q.Parameters.ParamByName('date_from_to').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1date_from_to.Index];
    Q.Open;

    if Q.RecordCount <> 0 then begin
      Q_update.Close;
      Q_update.Parameters.ParamByName('fact_id').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      Q_update.Parameters.ParamByName('date_delivery').Value := Q.FieldByName('date_delivery').Value;
      Q_update.ExecSQL;
    end;
    ShowTextMessage('Осталось '+ IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount-i) + ' записей...', False);
  end;

  ShowTextMessage;
  Q.Free;
  Q_update.Free;

  RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');
end;

procedure TfmAgree2.N193Click(Sender: TObject);
var  str_bargain_id : string;
                  i : integer;
begin
  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  PrintReportAgent_RMProcissing(str_bargain_id, Fdate1, Fdate2, TComponent(Sender).Tag, Fconnect, usr_pwd);
end;

procedure TfmAgree2.N197Click(Sender: TObject);
var
  retActSettings      : Variant;

  str_bargain_id      : string;
  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query               : TADOQuery;
  recNo_Score         : integer;
  recNo_Pays          : integer;
  recNo_SecondPart    : integer;
  recNo_FirstPart     : integer;

  set_balance_return  : Boolean;

  str_expeditor       : array [1..4] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  cod_shablon         : integer;

  str_customer        : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 65 = 'Акт сверки расчетов'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query.Open;

  str_expeditor[1] := Query.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query.FieldByName('type_firm_customer_name').AsString;
  Query.Free;
  str_expeditor[3] := 'задолженность ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е');
  str_expeditor[4] := 'задолженность ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е');

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := SP_Agree.FieldByName('bargain_id').AsString;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;
  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_new;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := SP_Agree.FieldByName('contract_id').Value;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];
  SP_Balance.ExecProc;

  if SP_Balance.Parameters.ParamByName('@contract_id').Value = -9 then begin
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Первичный платёж установлен позже указанного периода. Начальное сальдо не сформировано', 'Внимание', MB_OK);
    SP_Balance.Free;
    Exit;
  end;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon)); // 'Акт сверки расчетов.xls'
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B2'].Value := 'между ' + str_customer +
                             ' и ' + VarToStr(retActSettings[12][1]) + #10 +
                             'Договор № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' +
                             FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['K3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) +
                             ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + str_customer +
                             ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", ' +
                             'с другой стороны, составили настоящий Акт сверки расчетов ' +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';


  exWks.Range['B11'].Value := 'Оказаны услуги ' + VarToStr(retActSettings[12][1]);
  exWks.Range['G28'].Value := 'Платежи ' + VarToStr(retActSettings[12][1]);
  exWks.Range['B45'].Value := VarToStr(retActSettings[12][1]);
  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B28'].Value := 'Оказаны услуги ' + str_customer;
  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['G11'].Value := 'Платежи ' + str_customer;
  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['G45'].Value := str_customer;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B47'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E47'].Value := retActSettings[13][1];
  end else
    exWks.Range['B47:F47'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B49'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E49'].Value := retActSettings[13][4];
  end else
    exWks.Range['B49:F49'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['G47'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['J47'].Value := retActSettings[13][7];
  end else
    exWks.Range['G47:K47'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['G49'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['J49'].Value := retActSettings[13][10];
  end else
    exWks.Range['G49:K49'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['47:49'].Copy;
    exWks.Rows['51:53'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B51'].Value := 'Дата подписания';
    exWks.Range['B53'].Value := '"____" __________________ 201__';
    exWks.Range['H51'].Value := 'Дата подписания';
    exWks.Range['H53'].Value := '"____" __________________ 201__';

    // Спрячем лишние колонки и строки (НДС), для иностранцев они не отображаются
    exWks.Rows['16:20'].Hidden := True;
    exWks.Rows['33:37'].Hidden := True;
    // Сначала раздвинем оставшиеся колонки, а потом спрячем ненужные
    exWks.Columns['B:B'].ColumnWidth := exWks.Columns['B:B'].ColumnWidth + (exWks.Columns['E:E'].ColumnWidth / 4);
    exWks.Columns['C:C'].ColumnWidth := exWks.Columns['C:C'].ColumnWidth + (exWks.Columns['E:E'].ColumnWidth / 4);
    exWks.Columns['D:D'].ColumnWidth := exWks.Columns['D:D'].ColumnWidth + (exWks.Columns['E:E'].ColumnWidth / 4);
    exWks.Columns['F:F'].ColumnWidth := exWks.Columns['F:F'].ColumnWidth + (exWks.Columns['E:E'].ColumnWidth / 4);

    exWks.Columns['G:G'].ColumnWidth := exWks.Columns['G:G'].ColumnWidth + (exWks.Columns['J:J'].ColumnWidth / 4);
    exWks.Columns['H:H'].ColumnWidth := exWks.Columns['H:H'].ColumnWidth + (exWks.Columns['J:J'].ColumnWidth / 4);
    exWks.Columns['I:I'].ColumnWidth := exWks.Columns['I:I'].ColumnWidth + (exWks.Columns['J:J'].ColumnWidth / 4);
    exWks.Columns['K:K'].ColumnWidth := exWks.Columns['K:K'].ColumnWidth + (exWks.Columns['J:J'].ColumnWidth / 4);

    exWks.Columns['E:E'].Hidden := True;
    exWks.Columns['J:J'].Hidden := True;
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['G9'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G22'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G26'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G39'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G42'].Value := VarToStr(retActSettings[7][1]);

    exWks.Range['F12'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['K12'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['F29'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['K29'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  exWks.Range['L9'].Value := SP_Balance.Parameters.ParamByName('@out_balance_begin').Value + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000));
  set_balance_return := (SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value <> null);
  set_balance_return := set_balance_return and (SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value <> 0);
  if set_balance_return then
    exWks.Range['L26'].Value := -SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value
  else
    exWks.Range['L26'].Value := 0;
  SP_Balance.Free;

  // Данные отчета (заполнение происходит снизу-вверх)
  // С-ф (возврат) (нижняя-левая часть)
  ShowTextMessage('Формирование отчета: Шаг 1 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 1 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  recNo_Score := 1;
  while not Query.Eof do begin
    exWks.Rows[IntToStr(29 + recNo_Score)].ClearContents;
    exWks.Rows[IntToStr(30 + recNo_Score)].Insert;
    exWks.Rows[IntToStr(29 + recNo_Score)].Copy;
    exWks.Rows[IntToStr(30 + recNo_Score)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(29 + recNo_Score)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(29 + recNo_Score)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(29 + recNo_Score)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(29 + recNo_Score)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(29 + recNo_Score)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['F' + IntToStr(29 + recNo_Score)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_Score);
  end;
  Query.Free;

  // Платежи (возврат) (нижняя-правая часть)
  // Данный блок временно не используется, т.к. мы не знаем какие сюда вставлять платежи
  ShowTextMessage('Формирование отчета: Шаг 2 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(-pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (ISNULL(set_return, 0) = 1)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query.Open;

  recNo_Pays := 1;
  while not Query.Eof do begin
    if (recNo_Pays >= recNo_Score) then begin
      exWks.Rows[IntToStr(29 + recNo_Pays)].ClearContents;
      exWks.Rows[IntToStr(30 + recNo_Pays)].Insert;
      exWks.Rows[IntToStr(29 + recNo_Pays)].Copy;
      exWks.Rows[IntToStr(30 + recNo_Pays)].PasteSpecial(1);
    end;

    exWks.Range['G' + IntToStr(29 + recNo_Pays)].Value := 'платежное поручение';
    exWks.Range['H' + IntToStr(29 + recNo_Pays)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['I' + IntToStr(29 + recNo_Pays)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['J' + IntToStr(29 + recNo_Pays)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['K' + IntToStr(29 + recNo_Pays)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo_Pays);
  end;
  Query.Free;

  if (recNo_Pays > recNo_Score) then recNo_SecondPart := recNo_Pays else recNo_SecondPart := recNo_Score;
  if (recNo_SecondPart = 1) then begin
    // нет строк в нижнем блоке отчета
    if set_balance_return then begin
      // Есть баланс (возврат), блок оставляем и удаляем ОДНУ строку
      exWks.Rows[IntToStr(29 + recNo_SecondPart)].Delete;
      recNo_SecondPart := 2;
    end else begin
      // Нет баланса, пустой блок - удаляем
      exWks.Rows['23:42'].Delete;
    end;
  end else begin
    // есть строки в нижнем блоке отчета, удаляем ДВЕ строки
    exWks.Rows[IntToStr(29 + recNo_SecondPart)].Delete;
    exWks.Rows[IntToStr(29 + recNo_SecondPart)].Delete;
  end;

  // С-ф (обычные) (верхняя-левая часть)
  ShowTextMessage('Формирование отчета: Шаг 3 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 0 AND set_clearing = 0 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  recNo_Score := 1;
  while not Query.Eof do begin
    exWks.Rows[IntToStr(12 + recNo_Score)].ClearContents;
    exWks.Rows[IntToStr(13 + recNo_Score)].Insert;
    exWks.Rows[IntToStr(12 + recNo_Score)].Copy;
    exWks.Rows[IntToStr(13 + recNo_Score)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(12 + recNo_Score)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['F' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_Score);
  end;
  Query.Free;

  // Платежи (обычные) (верхняя-правая часть)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 4 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (ISNULL(set_return, 0) = 0)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query.Open;

  recNo_Pays := 1;
  while not Query.Eof do begin
    if (recNo_Pays >= recNo_Score) then begin
      exWks.Rows[IntToStr(12 + recNo_Pays)].ClearContents;
      exWks.Rows[IntToStr(13 + recNo_Pays)].Insert;
      exWks.Rows[IntToStr(12 + recNo_Pays)].Copy;
      exWks.Rows[IntToStr(13 + recNo_Pays)].PasteSpecial(1);
    end;

    if Query.FieldByName('pay_sum').AsCurrency >= 0  then
      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := 'платежное поручение'
    else
      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := 'платежное поручение на возврат денежных средств';
    exWks.Range['H' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['I' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['J' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['K' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo_Pays);
  end;
  Query.Free;

  // С-ф (взаимозачёт)  (верхняя-правая часть; вместе с обычными платежами)
  ShowTextMessage('Формирование отчета: Шаг 5 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_clearing = 1 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    if (recNo_Pays >= recNo_Score) then begin
      exWks.Rows[IntToStr(12 + recNo_Pays)].ClearContents;
      exWks.Rows[IntToStr(13 + recNo_Pays)].Insert;
      exWks.Rows[IntToStr(12 + recNo_Pays)].Copy;
      exWks.Rows[IntToStr(13 + recNo_Pays)].PasteSpecial(1);
    end;

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := 'счет-фактура (возмещение расходов)'
    else
      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['H' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['I' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['J' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['K' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_Pays);
  end;
  Query.Free;

  if (recNo_Pays > recNo_Score) then recNo_FirstPart := recNo_Pays else recNo_FirstPart := recNo_Score;

  if (recNo_Pays <> 1) or (recNo_Score <> 1) then exWks.Rows[IntToStr(12 + recNo_FirstPart)].Delete
  else recNo_FirstPart := recNo_FirstPart + 1;

  exWks.Rows[IntToStr(12 + recNo_FirstPart)].Delete;

  // Пункты акта
  str_customer := '';
  exWks.Range['B8'].Value := '1. По Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ' +
                             VarToStr(iif(exWks.Range['L9'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части оказанных услуг ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B8']);

  if recNo_FirstPart = 1 then exWks.Range['L' + IntToStr(19 + recNo_FirstPart)].Value := '=L9';
  exWks.Range['B' + IntToStr(18 + recNo_FirstPart)].Value :=
                             'По Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ' +
                             VarToStr(iif(exWks.Range['L' + IntToStr(19 + recNo_FirstPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части оказанных услуг ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['B' + IntToStr(18 + recNo_FirstPart)]);

  if (recNo_SecondPart > 1) then begin
    exWks.Range['B' + IntToStr(22 + recNo_FirstPart)].Value :=
                               '2. По Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
                               ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ' +
                               VarToStr(iif(exWks.Range['L' + IntToStr(23 + recNo_FirstPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части услуг, подлежащих возмещению ' +
                               str_customer +
                               'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:';
    AutoFitMergeCell(exWks.Range['B' + IntToStr(22 + recNo_FirstPart)]);

    exWks.Range['B' + IntToStr(32 + recNo_FirstPart + recNo_SecondPart)].Value :=
                               'По Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
                               ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ' +
                               VarToStr(iif(exWks.Range['L' + IntToStr(33 + recNo_FirstPart + recNo_SecondPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части услуг, подлежащих возмещению ' +
                               str_customer +
                               'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
    AutoFitMergeCell(exWks.Range['B' + IntToStr(32 + recNo_FirstPart + recNo_SecondPart)]);

    exWks.Range['B' + IntToStr(35 + recNo_FirstPart + recNo_SecondPart)].Value :=
                               '3. Итого по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
                               ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ' +
                               VarToStr(iif(exWks.Range['L' + IntToStr(36 + recNo_FirstPart + recNo_SecondPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
    AutoFitMergeCell(exWks.Range['B' + IntToStr(35 + recNo_FirstPart + recNo_SecondPart)]);
  end;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.N82Click(Sender: TObject);
begin
  SetRecordColor('bargain_id', cxGrid1DBBandedTableView1, 'BARGAIN', TComponent(Sender).Tag=1);
  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
end;

procedure TfmAgree2.cxGrid1DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;  AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
  if (AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1currency_id.Index] = 3) then ACanvas.Font.Color := clBlue
  else if (AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1currency_id.Index] <> 3) then ACanvas.Font.Color := clBlack;

  if (AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1global_copy.Index]<>NULL)
      AND (AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1global_copy.Index]<>0) then ACanvas.Font.Color := clRed;

  if (AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1global_color.Index]<>NULL) then ACanvas.Brush.Color := AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1global_color.Index];

  if (AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1date_period_finance.Index] <> NULL) then begin
    ACanvas.Font.Color := clPurple; //clMoneyGreen - $00AF0AAA;
    ACanvas.Font.Style := [fsBold];
  end;

  if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
    ACanvas.Brush.Color := clNavy;
    if (AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1global_copy.Index]<>NULL)
      AND (AViewInfo.GridRecord.Values[cxGrid1DBBandedTableView1global_copy.Index]<>0) then ACanvas.Font.Color := clRed
    else ACanvas.Font.Color := clWhite;
    if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
  end;

end;

procedure TfmAgree2.cxGrid1DBBandedTableView1CustomDrawColumnHeader(Sender: TcxGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridColumnHeaderViewInfo; var ADone: Boolean);
begin
  DrawcxGridColumnOnFocused(Sender, ACanvas, AViewInfo);
end;

procedure TfmAgree2.cxGrid1DBBandedTableView1DataControllerFilterChanged(Sender: TObject);
begin
  DrawcxGridColumnOnFiltered(Sender);
end;

procedure TfmAgree2.cxGrid2DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
  if (AViewInfo.GridRecord.Values[cxGrid2DBBandedTableView1global_color.Index]<>NULL) then ACanvas.Brush.Color := AViewInfo.GridRecord.Values[cxGrid2DBBandedTableView1global_color.Index];

  if (cxGrid2DBBandedTableView1etran_folder.Index = AViewInfo.Item.ID) then begin
    if AViewInfo.GridRecord.Values[cxGrid2DBBandedTableView1etran_folder.Index] <> 'Заготовка'       then ACanvas.Font.Style := [fsBold];
    if AViewInfo.GridRecord.Values[cxGrid2DBBandedTableView1etran_folder.Index] = 'Заготовка'        then ACanvas.Font.Color := clGray;
    if AViewInfo.GridRecord.Values[cxGrid2DBBandedTableView1etran_folder.Index] = 'Не действительны' then ACanvas.Font.Color := clRed;
  end;

  if (AViewInfo.GridRecord.Values[cxGrid2DBBandedTableView1set_main.Index] = 1) then ACanvas.Font.Style := [fsBold]
  else ACanvas.Font.Color := clGray;

  if (AViewInfo.GridRecord.Selected) or (AViewInfo.GridRecord.Focused) then begin
    ACanvas.Brush.Color := clNavy;
    ACanvas.Font.Color := clWhite;
  end;

end;

procedure TfmAgree2.cxGrid3DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
  if (AViewInfo.GridRecord.Values[cxGrid3DBBandedTableView1global_color1.Index]<>NULL) then
    ACanvas.Brush.Color := AViewInfo.GridRecord.Values[cxGrid3DBBandedTableView1global_color1.Index];

  if (AViewInfo.GridRecord.Values[cxGrid3DBBandedTableView1bargain_date_period_finance.Index] <> NULL) then begin
    ACanvas.Font.Color := clPurple;
    ACanvas.Font.Style := [fsBold];
  end;

  if (AViewInfo.GridRecord.Values[cxGrid3DBBandedTableView1service_type.Index] = 0) then begin
    if  (AViewInfo.Item.ID = cxGrid3DBBandedTableView1service_type_name.Index) OR
        (AViewInfo.Item.ID = cxGrid3DBBandedTableView1agent_sum_fact_real.Index) OR
        (AViewInfo.Item.ID = cxGrid3DBBandedTableView1agent_sum_fact.Index) OR
        (AViewInfo.Item.ID = cxGrid3DBBandedTableView1agent_sum_fact_RUB.Index) then begin
      ACanvas.Font.Color := clRed;
      ACanvas.Font.Style := [fsBold];
    end;
  end;

  if (AViewInfo.GridRecord.Values[cxGrid3DBBandedTableView1service_type.Index] = 1) then begin
    if  (AViewInfo.Item.ID = cxGrid3DBBandedTableView1service_type_name.Index) OR
        (AViewInfo.Item.ID = cxGrid3DBBandedTableView1agent_sum_fact_real.Index) OR
        (AViewInfo.Item.ID = cxGrid3DBBandedTableView1agent_sum_fact.Index) OR
        (AViewInfo.Item.ID = cxGrid3DBBandedTableView1agent_sum_fact_RUB.Index) then begin
      ACanvas.Font.Color := clGreen;
      ACanvas.Font.Style := [fsBold];
    end;
  end;

	if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
		ACanvas.Brush.Color := clNavy;
		ACanvas.Font.Color := clWhite;
		if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
	end;
end;

procedure TfmAgree2.cxGrid3DBBandedTableView1DblClick(Sender: TObject);
begin
  fmAgreeAdd2 := TfmAgreeAdd2.Create(Application);
  fmAgreeAdd2._SetUpdateShapingRate := cxGrid3DBBandedTableView1shaping_rate_id.DataBinding.Field.AsInteger;
  if fmAgreeAdd2.ShowModal = mrOk then begin
    RefreshProcedure(fmAgreeAdd2._GetBargainId,-9);
  end;
end;

procedure TfmAgree2.cxGrid3DBBandedTableView1SelectionChanged(Sender: TcxCustomGridTableView);
begin
  RefreshProcedureDetail();
end;

procedure TfmAgree2.cxGrid4DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
	if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
		ACanvas.Brush.Color := clNavy;
		ACanvas.Font.Color := clWhite;
		if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
	end;
end;

procedure TfmAgree2.Excel3Click(Sender: TObject);
begin
//  case TdxBarManager(TdxBarButton(Sender).GetParentComponent).Tag of
  case TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag of
    1 : PrintcxGrid(cxGrid1DBBandedTableView1);
    2 : PrintcxGrid(cxGrid2DBBandedTableView1);
    3 : PrintcxGrid(cxGrid3DBBandedTableView1);
    4 : PrintcxGrid(cxGrid4DBBandedTableView1);
    5 : PrintcxGrid(cxGrid5DBBandedTableView1);
	  6 : PrintcxGrid(cxGrid6DBBandedTableView1);
    7 :	PrintcxGrid(cxGrid7DBBandedTableView1);
    8 :	PrintcxGrid(cxGrid8DBBandedTableView1);
	  9 : PrintcxGrid(cxGrid9DBBandedTableView1);
   10 : PrintcxGrid(cxGridDBBandedTableView1);

  end;
end;

procedure TfmAgree2.N14Click(Sender: TObject);
begin
  case TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag of
    1 : SetdxDBGridColumns(cxGrid1DBBandedTableView1);
    2 : SetdxDBGridColumns(cxGrid2DBBandedTableView1);
    3 : SetdxDBGridColumns(cxGrid3DBBandedTableView1);
    4 : SetdxDBGridColumns(cxGrid4DBBandedTableView1);
    5 : SetdxDBGridColumns(cxGrid5DBBandedTableView1);
	  6 : SetdxDBGridColumns(cxGrid6DBBandedTableView1);
    7 :	SetdxDBGridColumns(cxGrid7DBBandedTableView1);
    8 :	SetdxDBGridColumns(cxGrid8DBBandedTableView1);
	  9 : SetdxDBGridColumns(cxGrid9DBBandedTableView1);
   10 : SetdxDBGridColumns(cxGridDBBandedTableView1);
  end;
end;

procedure TfmAgree2.N74Click(Sender: TObject);
begin
  case TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag of
    1 : cxGrid1DBBandedTableView1.OptionsView.GroupByBox := not cxGrid1DBBandedTableView1.OptionsView.GroupByBox;
    2 : cxGrid2DBBandedTableView1.OptionsView.GroupByBox := not cxGrid2DBBandedTableView1.OptionsView.GroupByBox;
    3 : cxGrid3DBBandedTableView1.OptionsView.GroupByBox := not cxGrid3DBBandedTableView1.OptionsView.GroupByBox;
    4 : cxGrid4DBBandedTableView1.OptionsView.GroupByBox := not cxGrid4DBBandedTableView1.OptionsView.GroupByBox;
    5 : cxGrid5DBBandedTableView1.OptionsView.GroupByBox := not cxGrid5DBBandedTableView1.OptionsView.GroupByBox;
    6 : cxGrid6DBBandedTableView1.OptionsView.GroupByBox := not cxGrid6DBBandedTableView1.OptionsView.GroupByBox;
    7 : cxGrid7DBBandedTableView1.OptionsView.GroupByBox := not cxGrid7DBBandedTableView1.OptionsView.GroupByBox;
    8 : cxGrid8DBBandedTableView1.OptionsView.GroupByBox := not cxGrid8DBBandedTableView1.OptionsView.GroupByBox;
    9 : cxGrid9DBBandedTableView1.OptionsView.GroupByBox := not cxGrid9DBBandedTableView1.OptionsView.GroupByBox;
   10 : cxGridDBBandedTableView1.OptionsView.GroupByBox := not cxGridDBBandedTableView1.OptionsView.GroupByBox;
  end;
end;


procedure TfmAgree2.N102Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  Query_tmp           : TADOQuery;

  Query_Delete        : TADOQuery;
  Query_Insert        : TADOQuery;
  Query_All           : TADOQuery;

  SP_Balans_Detail    : TADOStoredProc;
  recNo               : integer;
  str_bargain_id      : string;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  acts_sum            : Currency;
begin
  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;

  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, 66, 1, ACT_SET_ADDSIGN, -9, -9, True);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_correct_report';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@parent_acts_id').Value := retActSettings[1][1];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 150;
  try
    SP_Balans_Detail.Open;
  except
    SP_Balans_Detail.Free;
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    exit;
  end;

  // Формируем рекордсеты
  Query_Delete := TADOQuery.Create(nil);
  Query_Delete.Recordset := SP_Balans_Detail.Recordset;
  Query_Delete.Open;
  Query_Insert := TADOQuery.Create(nil);
  Query_Insert.Recordset := SP_Balans_Detail.NextRecordset(recNo);
  Query_Insert.Open;
  Query_All    := TADOQuery.Create(nil);
  Query_All.Recordset := SP_Balans_Detail.NextRecordset(recNo);
  Query_All.Open;

  if (Query_Delete.RecordCount = 0) and (Query_Insert.RecordCount = 0) then begin
    Query_Delete.Free;
    Query_Insert.Free;
    Query_All.Free;
    SP_Balans_Detail.Free;
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Акт не изменился, корректировочный акт сформирован не будет', 'Формирование акта', MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  ShowTextMessage('Формирование отчёта...', False);
  ShowTextMessage('Запуск Excel ...', False);

  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, 66)); // 'Корректировочный акт к акту выполненных работ.xls'
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT acts_id, inf_obj_name_full, acts_date, acts_cod');
  Query_tmp.SQL.Add('FROM view_acts');
  Query_tmp.SQL.Add('JOIN inf_obj ON acts_type_id = inf_obj_id');
  Query_tmp.SQL.Add('WHERE acts_id = ' + VarToStr(retActSettings[1][1]));
  Query_tmp.Open;
  exWks.Range['B1'].Value := 'Корректировочный акт к АКТУ № ' + Query_tmp.FieldByName('acts_cod').AsString + ' ' +
                              ReplaceStr(Query_tmp.FieldByName('inf_obj_name_full').AsString, 'АКТ ', '') +
                              ' от ' + FormatDateTime('dd.mm.yyyy', Query_tmp.FieldByName('acts_date').AsDateTime) + 'г.';
  Query_tmp.Free;
  exWks.Range['B2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['O3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';
  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';
  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' была произведена корректировка стоимости оказанных услуг, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['B32'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['B34'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['K34'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B36'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E36'].Value := retActSettings[13][1];
  end else
    exWks.Range['B36:G36'].ClearContents;

  if retActSettings[13][5] = True then begin
    exWks.Range['B38'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E38'].Value := retActSettings[13][4];
  end else
    exWks.Range['B38:G38'].ClearContents;

  if retActSettings[13][8] = True then begin
    exWks.Range['K36'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['N36'].Value := retActSettings[13][7];
  end else
    exWks.Range['K36:P36'].ClearContents;

  if retActSettings[13][11] = True then begin
    exWks.Range['K38'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['N38'].Value := retActSettings[13][10];
  end else
    exWks.Range['K38:P38'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['36:38'].Copy;
    exWks.Rows['40:42'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B40'].Value := 'Дата подписания';
    exWks.Range['B42'].Value := '"____" __________________ 201__';
    exWks.Range['K40'].Value := 'Дата подписания';
    exWks.Range['K42'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['K27'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['M27'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['N27'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['O27'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['P27'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['H27'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B32']);

  // формируем снизу вверх
  recNo := 1;
  while not Query_All.Eof do begin
    exWks.Rows[IntToStr(28 + recNo)].Insert;
    exWks.Rows[IntToStr(27 + recNo)].Copy;
    exWks.Rows[IntToStr(28 + recNo)].PasteSpecial(1);

    if Query_All.FieldByName('type_rec').AsInteger = 1 then
      exWks.Range['A' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('bargain_id').Value
    else // Доп. сбор.
      exWks.Range['A' + IntToStr(27 + recNo)].Value := -Query_All.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('date_period').AsDatetime;
    exWks.Range['C' + IntToStr(27 + recNo)].Value := recNo;
    exWks.Range['D' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('service_kind').AsString;
    exWks.Range['E' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('node_begin_name').AsString + ' - ' + Query_All.FieldByName('node_end_name').AsString;
    exWks.Range['F' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('agreement_describe').AsString;
    exWks.Range['G' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('kargoETSNG_name').AsString;
    exWks.Range['H' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('cnt').Value;

    if Query_All.FieldByName('fact_weight').IsNull then
      exWks.Range['I' + IntToStr(27 + recNo)].Value := null
    else
      exWks.Range['I' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('fact_weight').AsFloat;
    if Query_All.FieldByName('calc_weight').IsNull then
      exWks.Range['J' + IntToStr(27 + recNo)].Value := null
    else
      exWks.Range['J' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('calc_weight').AsFloat;

    Query_NDS.Locate('nds_id', Query_All.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['L' + IntToStr(27 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;
//    if Query_All.FieldByName('bargain_nds_cod').IsNull then
//      exWks.Range['L' + IntToStr(27 + recNo)].Value := 'Без НДС'
//    else
//      exWks.Range['L' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('bargain_nds_cod').AsString;

    exWks.Range['M' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('rate').AsCurrency;
    exWks.Range['P' + IntToStr(27 + recNo)].Value := Query_All.FieldByName('summa').AsCurrency;

    inc(recNo);
    ShowTextMessage('Шаг 1 из 3: Осталось ' + IntToStr(Query_All.RecordCount - Query_All.RecNo), False);
    Query_All.Next;
  end;
  exWks.Rows[IntToStr(27 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(27 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(27 + recNo)].ClearContents;
    recNo := 2;
  end;
  acts_sum := exWks.Range['P' + IntToStr(27 + recNo)].Value;

  // Удаленные и Добавленные записи пишем в один блок
  // Удаленные пишем с -
  // Удаляем лишний блок
  exWks.Rows['17:24'].Delete;
  // Удаленные записи
  recNo := 1;
  while not Query_Delete.Eof do begin
    exWks.Rows[IntToStr(12 + recNo)].Insert;
    exWks.Rows[IntToStr(11 + recNo)].Copy;
    exWks.Rows[IntToStr(12 + recNo)].PasteSpecial(1);

    if Query_Delete.FieldByName('type_rec').AsInteger = 1 then
      exWks.Range['A' + IntToStr(11 + recNo)].Value := Query_Delete.FieldByName('bargain_id').Value
    else // Доп. сбор.
      exWks.Range['A' + IntToStr(11 + recNo)].Value := -Query_Delete.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(11 + recNo)].Value := Query_Delete.FieldByName('date_period').AsDatetime;
    exWks.Range['C' + IntToStr(11 + recNo)].Value := recNo;
    exWks.Range['D' + IntToStr(11 + recNo)].Value := Query_Delete.FieldByName('service_kind').AsString;
    exWks.Range['E' + IntToStr(11 + recNo)].Value := Query_Delete.FieldByName('node_begin_name').AsString + ' - ' + Query_Delete.FieldByName('node_end_name').AsString;
    exWks.Range['F' + IntToStr(11 + recNo)].Value := Query_Delete.FieldByName('agreement_describe').AsString;
    exWks.Range['G' + IntToStr(11 + recNo)].Value := Query_Delete.FieldByName('kargoETSNG_name').AsString;
    if Query_Delete.FieldByName('cnt').IsNull then
      exWks.Range['H' + IntToStr(11 + recNo)].Value := null
    else
      exWks.Range['H' + IntToStr(11 + recNo)].Value := -Query_Delete.FieldByName('cnt').AsFloat;
    if Query_Delete.FieldByName('fact_weight').IsNull then
      exWks.Range['I' + IntToStr(11 + recNo)].Value := null
    else
      exWks.Range['I' + IntToStr(11 + recNo)].Value := -Query_Delete.FieldByName('fact_weight').AsFloat;
    if Query_Delete.FieldByName('calc_weight').IsNull then
      exWks.Range['J' + IntToStr(11 + recNo)].Value := null
    else
      exWks.Range['J' + IntToStr(11 + recNo)].Value := -Query_Delete.FieldByName('calc_weight').AsFloat;

    Query_NDS.Locate('nds_id', Query_Delete.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['L' + IntToStr(11 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;
    exWks.Range['M' + IntToStr(11 + recNo)].Value := -Query_Delete.FieldByName('rate').AsCurrency;
    exWks.Range['P' + IntToStr(11 + recNo)].Value := -Query_Delete.FieldByName('summa').AsCurrency;

    inc(recNo);
    ShowTextMessage('Шаг 2 из 3: Осталось ' + IntToStr(Query_Delete.RecordCount - Query_Delete.RecNo), False);
    Query_Delete.Next;
  end;
  // Добавленные записи
  while not Query_Insert.Eof do begin
    exWks.Rows[IntToStr(12 + recNo)].Insert;
    exWks.Rows[IntToStr(11 + recNo)].Copy;
    exWks.Rows[IntToStr(12 + recNo)].PasteSpecial(1);

    if Query_Insert.FieldByName('type_rec').AsInteger = 1 then
      exWks.Range['A' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('bargain_id').Value
    else // Доп. сбор.
      exWks.Range['A' + IntToStr(11 + recNo)].Value := -Query_Insert.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('date_period').AsDatetime;
    exWks.Range['C' + IntToStr(11 + recNo)].Value := recNo;
    exWks.Range['D' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('service_kind').AsString;
    exWks.Range['E' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('node_begin_name').AsString + ' - ' + Query_Insert.FieldByName('node_end_name').AsString;
    exWks.Range['F' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('agreement_describe').AsString;
    exWks.Range['G' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('kargoETSNG_name').AsString;
    exWks.Range['H' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('cnt').Value;
    if Query_Insert.FieldByName('fact_weight').IsNull then
      exWks.Range['I' + IntToStr(11 + recNo)].Value := null
    else
      exWks.Range['I' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('fact_weight').AsFloat;
    if Query_Insert.FieldByName('calc_weight').IsNull then
      exWks.Range['J' + IntToStr(11 + recNo)].Value := null
    else
      exWks.Range['J' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('calc_weight').AsFloat;

    Query_NDS.Locate('nds_id', Query_Insert.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['L' + IntToStr(11 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;
    exWks.Range['M' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('rate').AsCurrency;
    exWks.Range['P' + IntToStr(11 + recNo)].Value := Query_Insert.FieldByName('summa').AsCurrency;

    inc(recNo);
    ShowTextMessage('Шаг 3 из 3: Осталось ' + IntToStr(Query_Insert.RecordCount - Query_Insert.RecNo), False);
    Query_Insert.Next;
  end;
  exWks.Rows[IntToStr(11 + recNo)].Delete;
  exWks.Rows[IntToStr(11 + recNo)].Delete;

  Query_Delete.Free;
  Query_Insert.Free;
  Query_All.Free;
  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, acts_sum);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.N105Click(Sender: TObject);
var SP_Bargain_Block : TADOStoredProc;
                   i : integer;
 date_period_finance : TDateTime;
                   Q : TADOQuery;
        dt, dt2, dt3 : TDateTime;
begin
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT TOP 1 cast(cast(year(dateadd(mm,1,max(finance_date))) as varchar)+'+
                      'RIGHT(''0''+cast(month(dateadd(mm,1,max(finance_date))) as varchar),2)+''01'' as datetime) AS finance_date '+
                      'FROM view_finance_period ORDER BY finance_date DESC');
  Q.Open;

  dt := Q.FieldByName('finance_date').AsDateTime;
  StoreRegistryDate(rgLoad, '\Software\Lis1\DateTime\FinDate', dt2, dt3);
  if dt2 > dt then dt := dt2;

  fmPeriod := TfmPeriod.Create(Application, dt, dt, 3);
  if fmPeriod.ShowModal = mrOk then begin
    Screen.Cursor := crHourglass;
    date_period_finance := fmPeriod._GetMonth;

    if Q.FieldByName('finance_date').AsDateTime > date_period_finance then begin
      if Application.MessageBox(PChar('Финансовый месяц "'+ FormatDateTime('mmmm yyyy', date_period_finance) + '" закрыт.'+#13+'Вы уверены?'), 'Внимание', MB_OKCANCEL) = IDCANCEL then begin
        Screen.Cursor := crDefault;
        exit;
      end;
    end;

    SP_Bargain_Block := TADOStoredProc.Create(Application);
    SP_Bargain_Block.Connection := Fconnect;
    SP_Bargain_Block.ProcedureName := 'sp_Bargain_Block;1';
    SP_Bargain_Block.Parameters.Refresh;
    for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRowCount-1 do begin
      try
        SP_Bargain_Block.Parameters.ParamByName('@bargain_id').Value := cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1.GetColumnByFieldName('bargain_id').Index];
        SP_Bargain_Block.Parameters.ParamByName('@set_bargain_block').Value   := 1;
        SP_Bargain_Block.Parameters.ParamByName('@date_period_finance').Value := date_period_finance;
        SP_Bargain_Block.ExecProc;
      except
      end;
    end;
    SP_Bargain_Block.Free;

    StoreRegistryDate(rgSave, '\Software\Lis1\DateTime\FinDate', date_period_finance, date_period_finance);
    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
    Screen.Cursor := crDefault;
  end;

  Q.Free;
end;

procedure TfmAgree2.N108Click(Sender: TObject);
var              i : integer;
  SP_Bargain_Block : TADOStoredProc;
begin
  if Application.MessageBox('Вы точно уверены?', 'Внимание', MB_OKCANCEL) = ID_OK then begin;
    Screen.Cursor := crHourglass;

    SP_Bargain_Block := TADOStoredProc.Create(Application);
    SP_Bargain_Block.Connection := Fconnect;
    SP_Bargain_Block.ProcedureName := 'sp_Bargain_Block;1';
    SP_Bargain_Block.Parameters.Refresh;
    for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRowCount-1 do begin
      try
        SP_Bargain_Block.Parameters.ParamByName('@bargain_id').Value := cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1.GetColumnByFieldName('bargain_id').Index];
        SP_Bargain_Block.Parameters.ParamByName('@set_bargain_block').Value   := 0;
        SP_Bargain_Block.Parameters.ParamByName('@date_period_finance').Value := null;
        SP_Bargain_Block.ExecProc;
      except
      end;
    end;
    SP_Bargain_Block.Free;
    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
  end;
end;

procedure TfmAgree2.N106Click(Sender: TObject);
var SP_BargainCorrect : TADOStoredProc;
          date_period : TDateTime;
           bargain_id : integer;
                    Q : TADOQuery;
begin
  date_period := cxGrid1DBBandedTableView1date_period.DataBinding.Field.AsDateTime;
  bargain_id  := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;

  fmPeriod := TfmPeriod.Create(Application, date_period, date_period, 3);
  if fmPeriod.ShowModal=mrOK then begin
    date_period := fmPeriod._GetMonth + 14;

    Q := TADOQuery.Create(nil);
    Q.Connection := Fconnect;
    Q.SQL.Add('SELECT TOP 1 cast(cast(year(dateadd(mm,1,max(finance_date))) as varchar)+'+
                        'RIGHT(''0''+cast(month(dateadd(mm,1,max(finance_date))) as varchar),2)+''01'' as datetime) AS finance_date '+
                        'FROM view_finance_period ORDER BY finance_date DESC');
    Q.Open;


    if Application.MessageBox(PChar('При корректировки фрахтовых карточек будет создано дополнительно:'+#13+
                              ' - 1-я перевозка с противоположным значение фрахтовой карточкой, для удаления старой'+#13+
                              ' - 2-я перевозка, точная копия корректируемого, для внесения изменений'+#13+
                              ' - финансовый месяц 1-ой перевозки ' +  FormatDateTime('mmmm yyyy',Q.FieldByName('finance_date').AsDateTime)+#13+
                              ' - месяц перевозки 1-ой и 2-ой перевозки ' + FormatDateTime('mmmm yyyy',date_period)+#13+
                              'Вы уверены?')  , 'Внимание', MB_OKCANCEL) = ID_OK then begin

      Screen.Cursor := crHourglass;
      SP_BargainCorrect := TADOStoredProc.Create(Application);
      SP_BargainCorrect.Connection := Fconnect;
      SP_BargainCorrect.CommandTimeout := 120;
      SP_BargainCorrect.ProcedureName := 'sp_Bargain_Correct;1';
      SP_BargainCorrect.Parameters.Refresh;
      SP_BargainCorrect.Parameters.ParamByName('@old_bargain_id').Value := bargain_id;
      SP_BargainCorrect.Parameters.ParamByName('@date_period'   ).Value := date_period;
      try
        SP_BargainCorrect.ExecProc;
      except
      end;
      RefreshProcedure(bargain_id,-9);
      SP_BargainCorrect.Free;
    end;

    Q.Free;
  end;
end;

procedure TfmAgree2.N113Click(Sender: TObject);
var
  exApp, exWks, exWkb : Variant;
                Query : TADOQuery;
             line_cnt : integer;
 date_begin, date_end : TDateTime;
begin

  fmPeriod := TfmPeriod.Create(Application, Fdate1, Fdate2, 2);
  if fmPeriod.ShowModal=mrOK then begin
    date_begin := fmPeriod._GetMonthBegin;
    date_end   := fmPeriod._GetMonthEnd;
  end else exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Запуск сервера автоматизации...', False);



  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, 36));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
//  exApp.Visible := True;

  exWks.Range['B3'].Value := 'c 1 ' + array_month_balance[StrToInt(FormatDateTime('m', date_begin))]+' '+FormatDateTime('yyyy', date_begin)+ 'г. по ' + FormatDateTime('dd', date_end) + ' ' +  array_month_balance[StrToInt(FormatDateTime('m', date_end))]+ FormatDateTime(' yyyy г.', date_end);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT DISTINCT contract_cod, firm_customer_name, firm_self_name');
  Query.SQL.Add('FROM   view_bargain_rights');
  Query.SQL.Add('WHERE  date_period between ' + DateToSQL(date_begin) + ' and ' + DateToSQL(date_end));
  Query.SQL.Add('ORDER BY firm_customer_name');
  Query.Open;

  line_cnt := 7;
  while not Query.EOF do begin
    ShowTextMessage('Осталось '+IntToStr(Query.RecordCount - Query.RecNo), False);
    exWks.Range['B' + IntToStr(line_cnt+1) + ':D' + IntToStr(line_cnt+1)].Select;
    exWks.Range['B' + IntToStr(line_cnt+1) + ':D' + IntToStr(line_cnt+1)].Insert(-4121);

    exWks.Range['B'+IntToStr(line_cnt)].Value := Query.FieldByName('firm_customer_name').AsString;
    exWks.Range['C'+IntToStr(line_cnt)].Value := Query.FieldByName('contract_cod').AsString;
    exWks.Range['D'+IntToStr(line_cnt)].Value := Query.FieldByName('firm_self_name').AsString;
    line_cnt := line_cnt + 1;
  	Query.Next;
  end;
  exWks.Range['B' + IntToStr(line_cnt) + ':D' + IntToStr(line_cnt)].Delete(-4162);
  exWks.Range['B' + IntToStr(line_cnt) + ':D' + IntToStr(line_cnt)].Delete(-4162);
  exWks.Range['C'+IntToStr(line_cnt)].Value := Query.RecordCount;


  Query.Close;
  Query.SQL.Clear;
  Query.SQL.Add('SELECT DISTINCT contract_agent_cod, firm_agent_name, firm_self_agent_name');
  Query.SQL.Add('FROM	  view_shaping_rate inner join view_bargain_rights on view_shaping_rate.bargain_id = view_bargain_rights.bargain_id');
  Query.SQL.Add('WHERE  bargain_date_period between ' + DateToSQL(date_begin) + ' and ' + DateToSQL(date_end));
  Query.SQL.Add('ORDER BY firm_agent_name');
  Query.Open;

  line_cnt := 7;
  while not Query.EOF do begin
    ShowTextMessage('Осталось '+IntToStr(Query.RecordCount - Query.RecNo), False);
    exWks.Range['F' + IntToStr(line_cnt+1) + ':H' + IntToStr(line_cnt+1)].Select;
    exWks.Range['F' + IntToStr(line_cnt+1) + ':H' + IntToStr(line_cnt+1)].Insert(-4121);

    exWks.Range['F'+IntToStr(line_cnt)].Value := Query.FieldByName('firm_agent_name').AsString;
    exWks.Range['G'+IntToStr(line_cnt)].Value := Query.FieldByName('contract_agent_cod').AsString;
    exWks.Range['H'+IntToStr(line_cnt)].Value := Query.FieldByName('firm_self_agent_name').AsString;
    line_cnt := line_cnt + 1;
  	Query.Next;
  end;
  exWks.Range['F' + IntToStr(line_cnt) + ':H' + IntToStr(line_cnt)].Delete(-4162);
  exWks.Range['F' + IntToStr(line_cnt) + ':H' + IntToStr(line_cnt)].Delete(-4162);
  exWks.Range['G'+IntToStr(line_cnt)].Value := Query.RecordCount;


  Query.Free;
  exWks.Range['A1'].Select;
  exApp.Visible := True;
  exWks := Null; exWkb := Null; exApp := Null;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);

  ShowTextMessage();
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.N116Click(Sender: TObject);
begin
  fmFactCard := TfmFactCard.Create(Application, Fconnect);
  fmFactCard._UpdateFactGroup(cxGrid2DBBandedTableView1);
  if fmFactCard.ShowModal = mrOk then RefreshQueryGrid(cxGrid2DBBandedTableView1,'fact_id');
end;

procedure TfmAgree2.N119Click(Sender: TObject);
var OpenDialog1 : TOpenDialog;
begin
  OpenDialog1 := TOpenDialog.Create(nil);
  OpenDialog1.Filter := 'Excel файлы|*.xls';
  OpenDialog1.DefaultExt := 'xls';
  if OpenDialog1.Execute then begin
    ExportGridToExcel(OpenDialog1.FileName, cxGrid2, False, False);
    ShellExecute(Application.Handle, 'open', PChar(OpenDialog1.FileName), nil, nil, SW_SHOWNORMAL);
  end;
  OpenDialog1.Free;
end;

procedure TfmAgree2.N128Click(Sender: TObject);
var       i : integer;
str_fact_id : string;
begin
  Screen.Cursor := crHourglass;
  for i := 0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do str_fact_id := str_fact_id + ',' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index]);
  Delete(str_fact_id, 1, 1);
  fmFact := TfmFact.Create(self, True);
  fmFact.FactFind(TControl(Sender).Tag, str_fact_id);
  fmFact.Show;
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.N12Click(Sender: TObject);
var i : integer;
    str_vag : string;
    error_nvag : boolean;
begin
  Screen.Cursor := crHourglass;

  error_nvag := False;
  cxGrid2DBBandedTableView1.DataController.GotoFirst;
  for i := 1 to cxGrid2DBBandedTableView1.DataController.RecordCount do begin
    str_vag := cxGrid2DBBandedTableView1num_vagon.DataBinding.Field.AsString;
    if not CheckNumVagon(str_vag) then begin
      Screen.Cursor := crDefault;
      Application.MessageBox(PChar('Ошибка в номере вагона '+str_vag), 'Внимание', MB_OK);
      error_nvag := True;
      break;
    end;
    cxGrid2DBBandedTableView1.DataController.GotoNext;
  end;
  Screen.Cursor := crDefault;

  if not error_nvag then
    Application.MessageBox('Все номера вагонов верны', 'Внимание', MB_OK);
end;

procedure TfmAgree2.N137Click(Sender: TObject);
begin
  FindInEtranInvoice(Fconnect, usr_pwd, cxGrid2DBBandedTableView1xml_reply_id.DataBinding.Field.AsInteger, cxGrid2DBBandedTableView1num_vagon.DataBinding.Field.AsInteger, cxGrid2DBBandedTableView1fact_id.DataBinding.Field.AsInteger);
end;

procedure TfmAgree2.cxGrid5DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
  if (AViewInfo.GridRecord.Values[cxGrid5DBBandedTableView1global_color.Index]<>NULL) then ACanvas.Brush.Color := AViewInfo.GridRecord.Values[cxGrid5DBBandedTableView1global_color.Index]
  else ACanvas.Font.Style := [];

  if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
    ACanvas.Brush.Color := clNavy;
    ACanvas.Font.Color := clWhite;
    if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
  end;
end;

procedure TfmAgree2.cxGrid6DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
	if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
		ACanvas.Brush.Color := clNavy;
		ACanvas.Font.Color := clWhite;
		if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
	end;
end;

procedure TfmAgree2.cxGrid7DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
  if (AViewInfo.GridRecord.Values[cxGrid7DBBandedTableView1global_color1.Index]<>NULL) then
    ACanvas.Brush.Color := AViewInfo.GridRecord.Values[cxGrid7DBBandedTableView1global_color1.Index];

  if  (AViewInfo.GridRecord.Values[cxGrid7DBBandedTableView1date_period_finance.Index] <> NULL) or
      (AViewInfo.GridRecord.Values[cxGrid7DBBandedTableView1bargain_date_period_finance.Index] <> NULL) then begin
    ACanvas.Font.Color := clPurple;
    ACanvas.Font.Style := [fsBold];
  end;

  if (AViewInfo.GridRecord.Values[cxGrid7DBBandedTableView1service_type.Index] = 0) then begin
    if  (AViewInfo.Item.ID = cxGrid7DBBandedTableView1service_type_name.Index) OR
        (AViewInfo.Item.ID = cxGrid7DBBandedTableView1agent_sum_fact_real.Index) OR
        (AViewInfo.Item.ID = cxGrid7DBBandedTableView1agent_sum_fact.Index) OR
        (AViewInfo.Item.ID = cxGrid7DBBandedTableView1agent_sum_fact_RUB.Index) then begin
      ACanvas.Font.Color := clRed;
      ACanvas.Font.Style := [fsBold];
    end;
  end;

  if (AViewInfo.GridRecord.Values[cxGrid7DBBandedTableView1service_type.Index] = 1) then begin
    if  (AViewInfo.Item.ID = cxGrid7DBBandedTableView1service_type_name.Index) OR
        (AViewInfo.Item.ID = cxGrid7DBBandedTableView1agent_sum_fact_real.Index) OR
        (AViewInfo.Item.ID = cxGrid7DBBandedTableView1agent_sum_fact.Index) OR
        (AViewInfo.Item.ID = cxGrid7DBBandedTableView1agent_sum_fact_RUB.Index) then begin
      ACanvas.Font.Color := clGreen;
      ACanvas.Font.Style := [fsBold];
    end;
  end;

	if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
		ACanvas.Brush.Color := clNavy;
		ACanvas.Font.Color := clWhite;
		if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
	end;
end;

procedure TfmAgree2.cxGrid8DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
	if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
		ACanvas.Brush.Color := clNavy;
		ACanvas.Font.Color := clWhite;
		if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
	end;
end;

procedure TfmAgree2.cxGrid9DBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
	if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
		ACanvas.Brush.Color := clNavy;
		ACanvas.Font.Color := clWhite;
		if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
	end;
end;

procedure TfmAgree2.cxGridDBBandedTableView1CustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
begin
  if (AViewInfo.GridRecord.Values[cxGridDBBandedTableView1DBBandedbargain_date_period_finance.Index] <> NULL) then begin
    ACanvas.Font.Color := clPurple; //clMoneyGreen - $00AF0AAA;
    ACanvas.Font.Style := [fsBold];
  end;

	if AViewInfo.GridRecord.Selected or AViewInfo.GridRecord.Focused then begin
		ACanvas.Brush.Color := clNavy;
		ACanvas.Font.Color := clWhite;
		if AViewInfo.Focused then ACanvas.Brush.Color := clBlue;
	end;
end;

procedure TfmAgree2.cxPageControl1PageChanging(Sender: TObject; NewPage: TcxTabSheet; var AllowChange: Boolean);
begin
  if NewPage.PageIndex = 2 then begin
    DS_shaping_rate_pivot.DataSet := SP_shaping_rate_get_list;
  end else
    DS_shaping_rate_pivot.DataSet := nil;

  if (cxPageControl1.ActivePageIndex = 0) and (NewPage.PageIndex = 1) then RefreshProcedure(-9, NewPage.PageIndex);
  if (cxPageControl1.ActivePageIndex = 0) and (NewPage.PageIndex = 2) then RefreshProcedure(-9, NewPage.PageIndex);
  if (cxPageControl1.ActivePageIndex = 1) and (NewPage.PageIndex = 0) then RefreshProcedure(-9, NewPage.PageIndex);
  if (cxPageControl1.ActivePageIndex = 1) and (NewPage.PageIndex = 2) then ;
  if (cxPageControl1.ActivePageIndex = 2) and (NewPage.PageIndex = 0) then RefreshProcedure(-9, NewPage.PageIndex);
  if (cxPageControl1.ActivePageIndex = 2) and (NewPage.PageIndex = 1) then ;

  MonitorEventFormOpen('OPEN_TABSHEET', self.Name + '\' + cxPageControl1.ActivePage.Caption, Fconnect, -9);
end;

procedure TfmAgree2.cxPageControl2Change(Sender: TObject);
begin
  RefreshProcedureDetail;
end;

procedure TfmAgree2.dxBarButton10Click(Sender: TObject);
begin
  Screen.Cursor := crHourglass;
  set_main := TControl(Sender).Tag;
  SP_FactClient.Close;
  SP_FactClient.Parameters.ParamByName('@set_main').Value := set_main;
  SP_FactClient.Parameters.ParamByName('@type_fact_sum').Value := set_FactSum;
  SP_FactClient.Open;
  case set_main of
    0 : begin
          cxLabel4.Caption := 'Установлен фильтр "Основной факт"';
          Panel1.Visible := True;
        end;
    1 : begin
          cxLabel4.Caption := 'Установлен фильтр "Неосновной факт"';
          Panel1.Visible := True;
        end;
    2 : begin
          cxLabel4.Caption := '';
          if (dxBarButton12.Down and dxBarButton_AllFactSum.Down ) then
            Panel1.Visible := False;
        end;
  end;
  Screen.Cursor := crDefault;
end;


procedure TfmAgree2.dxBarButton110Click(Sender: TObject);
var                i : integer;
 str_shaping_rate_id : string;
          str_error  : string;
           set_block : boolean;
               Query : TADOQuery;
                  SP : TADOStoredProc;
   set_service_kind_modify : boolean;
               Fview : TcxGridDBBandedTableView;
                   Q : TADOQuery;
begin
  case TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag of
    0 : Fview := cxGrid3DBBandedTableView1;
    1 : Fview := cxGrid7DBBandedTableView1;
  end;

  if Fview.Controller.SelectedRecordCount = 0 then
    exit;

  set_service_kind_modify := usr_pwd.user_func.Locate('func_name', 'set_service_kind_modify', [loCaseInsensitive]);

  str_error := '';
  str_shaping_rate_id := '';
  set_block := False;

  for i := 0 to Fview.Controller.SelectedRecordCount - 1 do begin
    str_shaping_rate_id := str_shaping_rate_id + ',' + VarToStr(Fview.Controller.SelectedRecords[i].Values[Fview.GetColumnByFieldName('shaping_rate_id').Index]);
    Q := TADOQuery.Create(nil);
    Q.Connection := Fconnect;
    Q.SQL.Add('SELECT cast(dbo.func_CheckCloseContract('+IntToStr(Fview.Controller.SelectedRecords[i].Values[Fview.GetColumnByFieldName('contract_agent_id').Index]) + ', ' + DateToSQL(Fview.Controller.SelectedRecords[i].Values[Fview.GetColumnByFieldName('bargain_date_period').Index]) + ') as integer) as set_contract_close');
    Q.Open;
    if Q.FieldByName('set_contract_close').AsInteger = 1 then begin
      str_error := str_error + #10 + VarToStr(Fview.Controller.SelectedRecords[i].Values[Fview.GetColumnByFieldName('firm_customer_agent_name').Index]);
    end;

    set_block := set_block or boolean(Fview.Controller.SelectedRecords[i].Values[Fview.GetColumnByFieldName('set_bargain_block').Index]);
    Q.Free;
  end;
  Delete(str_error, 1, 1);
  Delete(str_shaping_rate_id, 1, 1);


  if not set_service_kind_modify then begin
  // Если нет функции разрешающей менять услуги в акт/отчет всегда -- тогда проверяем доступность карточки
    if str_error <> '' then begin
      Application.MessageBox(PChar('Клиенты:' + #10#10 + str_error + #10#10 + 'закрыты в перевозочном месяце.'), 'Внимание', MB_OK or MB_ICONERROR);
      exit;
    end;

    if set_block then begin
      Application.MessageBox('Среди выбранных перевозок есть заблокированные' + #10 + 'Продолжение операции невозможно', 'Внимание', MB_OK or MB_ICONERROR);
      exit;
    end;
  end;


  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT inf_obj_id, inf_obj_name, inf_obj_name_full');
  Query.SQL.Add('FROM inf_obj WHERE type_inf_id = 128 and (dbo.GetInfObjVisible(str_group_visible) = 1)');
  Query.SQL.Add('ORDER BY inf_obj_name');
  Query.Open;

  fmFilter := TfmFilter.Create(0, Query, 'inf_obj_id', 'inf_obj_name_full', 'inf_obj_name');
  fmFilter._SetServiceKind := True;
  if fmFilter.ShowModal = mrOk then begin
    Screen.Cursor := crHourglass;

    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_bargain_change_service_kind';
    SP.Parameters.Refresh;
    SP.Parameters.ParamByName('@str_shaping_rate_id').Value := str_shaping_rate_id;
    SP.Parameters.ParamByName('@service_kind_id'    ).Value := fmFilter.GetId;
    SP.Parameters.ParamByName('@type_service_kind'  ).Value := TComponent(Sender).Tag;
    SP.ExecProc;
    SP.Free;

    RefreshQueryGrid(Fview, 'shaping_rate_id');

    Screen.Cursor := crDefault;
  end;

  Query.Free;
end;

procedure TfmAgree2.dxBarButton114Click(Sender: TObject);
var     i : integer;
  str_new : string;
       SP : TADOStoredProc;
begin
  if cxGrid3DBBandedTableView1.Controller.SelectedRecordCount = 0 then
    exit;

  if InputQuery('Введите примечание для выделенной(-ых) записей', 'Введите примечание', str_new) then begin
    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_shaping_rate_modify';
    SP.Parameters.Refresh;

    for i := 0 to cxGrid3DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
      ShowTextMessage('Осталось ' + IntToStr(cxGrid3DBBandedTableView1.Controller.SelectedRecordCount - i), False);

      SP.Close;
      SP.Parameters.ParamByName('@shaping_rate_id'  ).Value := cxGrid3DBBandedTableView1.Controller.SelectedRecords[i].Values[cxGrid3DBBandedTableView1shaping_rate_id.Index];
      SP.Parameters.ParamByName('@type_action'      ).Value := 4;
      SP.Parameters.ParamByName('@shaping_rate_note').Value := iif(str_new='', null, str_new);
      SP.ExecProc;
    end;
    SP.Free;

    RefreshQueryGrid(cxGrid3DBBandedTableView1, 'shaping_rate_id');
    ShowTextMessage();
    Screen.Cursor := crDefault;
  end;

end;

procedure TfmAgree2.dxBarButton115Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  Q_OKEI              : TADOQuery;
  row, page, i        : integer;
  str_bargain_id      : string;
  str_tmp             : string;

  nds_rate            : Currency;
  str_expeditor       : array [1..2] of string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 427 = 'Торг-12 (услуги)'

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT firm_property_cod,');
  Query_tmp.SQL.Add('type_firm_self_name, type_firm_customer_name, ');
  Query_tmp.SQL.Add('type_firm_self_name_translit, type_firm_customer_name_translit ');
  Query_tmp.SQL.Add('FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;

//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;

  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  row := 0; str_bargain_id := '';
  for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
    if str_bargain_id <> '' then str_bargain_id := str_bargain_id + ',';
    str_bargain_id := str_bargain_id + VarToStr(cxGrid1DBBandedTableView1.Controller.SelectedRecords[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);

    if cxGrid1DBBandedTableView1.Controller.SelectedRecords[i].Values[cxGrid1DBBandedTableView1bargain_sum_fact.Index] <> null then
      Inc(row);
  end;
  if row <> cxGrid1DBBandedTableView1.Controller.SelectedRecordCount then begin
    Application.MessageBox('По части выбранных перевозок отсутсвует Фрахт. карточка'#10'Формирование отчета невозможно', 'Ошибка', MB_OK or MB_ICONERROR);
    exit;
  end;


  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_CHOOSE_BANK_ACCOUNT or ACT_SET_KARGOFROMFACT);
  if retActSettings[0] = -9 then
    exit;

  // Валюта всегда рубли
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  exWks.DisplayPageBreaks := True;

  // Заполняем шапку и подписи
  exWks.Range['acts_date'       ].Value := retActSettings[3][0];
  exWks.Range['G54'].Value := FormatDateTime('dd', retActSettings[3][0]) + ' ' +  array_month_balance[StrToInt(FormatDateTime('m', retActSettings[3][0]))]+ FormatDateTime(' yyyy года', retActSettings[3][0]);

  // Стороны - Наименование+ИНН+КПП+Адрес
  // Банковские реквизиты - реквизиты выбираются при заполнении настроек акта(отчета)

  // 0 - Запрос с реквизитами компании
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('select firm_id, firm_name_short, inn, kpp, cod_okpo,');
  Query_tmp.SQL.Add('bank_name = (select top 1 firm_contact_name = REPLACE(REPLACE(firm_contact_name, CHAR(13), ''''), CHAR(10) , '' '') from view_firm_contact');
  Query_tmp.SQL.Add('  where firm_id = firm.firm_id and type_contact_cod = ''01''');
  Query_tmp.SQL.Add('  and ' + DateToSQL(retActSettings[3][0]) + ' between date_begin and isnull(date_end, ' + DateToSQL(retActSettings[3][0]) + ')');
  Query_tmp.SQL.Add('), ');
  Query_tmp.SQL.Add('address = (select top 1 firm_contact_name from view_firm_contact');
  Query_tmp.SQL.Add('  where firm_id = firm.firm_id and type_contact_cod = ''11''');
  Query_tmp.SQL.Add('  and ' + DateToSQL(retActSettings[3][0]) + ' between date_begin and isnull(date_end, ' + DateToSQL(retActSettings[3][0]) + ')');
  Query_tmp.SQL.Add('), ');
  Query_tmp.SQL.Add('telefon = (select top 1 firm_contact_telefon from view_firm_contact');
  Query_tmp.SQL.Add('  where firm_id = firm.firm_id and type_contact_cod = ''15''');
  Query_tmp.SQL.Add('  and ' + DateToSQL(retActSettings[3][0]) + ' between date_begin and isnull(date_end, ' + DateToSQL(retActSettings[3][0]) + ')');
  Query_tmp.SQL.Add(')');
  Query_tmp.SQL.Add('from firm');
  Query_tmp.SQL.Add('where firm_id = :firm_id');

  // 1 - Поставщик (Собственная)
  Query_tmp.Parameters.ParamByName('firm_id').Value := retActSettings[12][0];
  Query_tmp.Open;

  exWks.Range['D10'].Value :=
    Query_tmp.FieldByName('firm_name_short').AsString + ', ' +
    'ИНН ' + Query_tmp.FieldByName('inn').AsString + ', ' +
    Query_tmp.FieldByName('address').AsString +
    VarToStr(iif(Query_tmp.FieldByName('telefon').IsNull, '', ', тел.: ' + Query_tmp.FieldByName('telefon').AsString)) +
    VarToStr(iif(VarToStr(retActSettings[4][6]) = '', '', ', ' + VarToStr(retActSettings[4][6])));
  exWks.Range['AL9'].Value := Query_tmp.FieldByName('cod_okpo').AsString;
  Query_tmp.Close;

  // 2 - Грузоотправитель
  if SP_Agree.FieldByName('sender_id').IsNull then begin
    // Если не задан в перевозке, то равен Продавцу
    exWks.Range['B3'].Value := exWks.Range['D10'].Value;
    exWks.Range['AL4'].Value := exWks.Range['AL9'].Value;
  end else begin
    Query_tmp.Parameters.ParamByName('firm_id').Value := SP_Agree.FieldByName('sender_id').Value;
    Query_tmp.Open;
    exWks.Range['B3'].Value :=
      Query_tmp.FieldByName('firm_name_short').AsString + ', ' +
      'ИНН ' + Query_tmp.FieldByName('inn').AsString + ', ' +
      Query_tmp.FieldByName('address').AsString +
      VarToStr(iif(Query_tmp.FieldByName('telefon').IsNull, '', ', тел.: ' + Query_tmp.FieldByName('telefon').AsString)) +
      VarToStr(iif(Query_tmp.FieldByName('bank_name').IsNull, '', ', ' + Query_tmp.FieldByName('bank_name').AsString));
    exWks.Range['AL4'].Value := Query_tmp.FieldByName('cod_okpo').AsString;
    Query_tmp.Close;
  end;

  // 3 - Плательщик (Покупатель)
  Query_tmp.Parameters.ParamByName('firm_id').Value := SP_Agree.FieldByName('firm_customer').Value;
  Query_tmp.Open;
  exWks.Range['D12'].Value :=
    Query_tmp.FieldByName('firm_name_short').AsString + ', ' +
    'ИНН ' + Query_tmp.FieldByName('inn').AsString + ', ' +
    Query_tmp.FieldByName('address').AsString +
    VarToStr(iif(Query_tmp.FieldByName('telefon').IsNull, '', ', тел.: ' + Query_tmp.FieldByName('telefon').AsString)) +
    VarToStr(iif(VarToStr(retActSettings[5][6]) = '', '', ', ' + VarToStr(retActSettings[5][6])));
  exWks.Range['AL11'].Value := Query_tmp.FieldByName('cod_okpo').AsString;
  Query_tmp.Close;

  // 4 - Грузоополучатель
  if SP_Agree.FieldByName('sender_id').IsNull then begin
    // Если не задан в перевозке, то равен Покупателю
    exWks.Range['D8'].Value := exWks.Range['D12'].Value;
    exWks.Range['AL8'].Value := exWks.Range['AL11'].Value;
  end else begin
    Query_tmp.Parameters.ParamByName('firm_id').Value := SP_Agree.FieldByName('receiver_id').Value;
    Query_tmp.Open;
    exWks.Range['D8'].Value :=
      Query_tmp.FieldByName('firm_name_short').AsString + ', ' +
      'ИНН ' + Query_tmp.FieldByName('inn').AsString + ', ' +
      Query_tmp.FieldByName('address').AsString +
      VarToStr(iif(Query_tmp.FieldByName('telefon').IsNull, '', ', тел.: ' + Query_tmp.FieldByName('telefon').AsString)) +
      VarToStr(iif(Query_tmp.FieldByName('bank_name').IsNull, '', ', ' + Query_tmp.FieldByName('bank_name').AsString));
    exWks.Range['AL8'].Value := Query_tmp.FieldByName('cod_okpo').AsString;
    Query_tmp.Close;
  end;

  Query_tmp.Free;

  // str_agreement
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT DISTINCT isnull(agreement_note, agreement_describe) as agreement_describe');
  Query_tmp.SQL.Add('FROM view_shaping_rate');
  Query_tmp.SQL.Add('WHERE bargain_id IN (' + str_bargain_id + ')');
  Query_tmp.SQL.Add('AND service_type = 0');
  Query_tmp.SQL.Add('AND coalesce(agreement_note, agreement_describe, '''') NOT IN ('''', ''Договор'')');
  Query_tmp.SQL.Add('ORDER BY 1');
  Query_tmp.Open;
  str_tmp := '';
  while not Query_tmp.Eof do begin
    if str_tmp <> '' then str_tmp := str_tmp + ', ';
    str_tmp := str_tmp + Query_tmp.FieldByName('agreement_describe').AsString;
    Query_tmp.Next;
  end;

  if str_tmp <> '' then
    exWks.Range['D14'].Value := 'Договор (' + str_tmp + ')'
  else
    exWks.Range['D14'].Value := 'Договор';
  Query_tmp.Free;

  exWks.Range['AL13'].Value := SP_Agree.FieldByName('contract_cod').AsString;
  exWks.Range['AL15'].Value := SP_Agree.FieldByName('contract_date_begin').Value;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['E47'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['J47'].Value := VarToStr(retActSettings[13][1]);
  end else begin
    exWks.Range['E47'].Value := null;
    exWks.Range['J47'].Value := null;
  end;
  if retActSettings[13][5] = True then begin
    exWks.Range['J49'].Value := VarToStr(retActSettings[13][4]);
  end else begin
    exWks.Range['J49'].Value := null;
  end;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value      := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value    := retActSettings[0];
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value      := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value   := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_add_absvalue').Value := True;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  Q_OKEI := TADOQuery.Create(nil);
  Q_OKEI.Connection := Fconnect;
  Q_OKEI.SQL.Add('SELECT * FROM inf_obj WHERE type_inf_id = 7');
  Q_OKEI.Open;

  row := 23; page := 1;
  while not SP_Balans_Detail.Eof do begin

    // Разбиение по страницам
    // Передернем документ дабы пересчитались разделители страниц
//    exWks.UsedRange.End[-4162]; // позиция на первую строку
//    exWks.UsedRange.End[-4121]; // позиция на последней строку
    if (exWks.HPageBreaks.Count > 0)                                          // несколько страниц
    and (row < exWks.HPageBreaks[exWks.HPageBreaks.Count].Location.Row)       // и разрыв ниже рабочей строки
    and (exWks.HPageBreaks[exWks.HPageBreaks.Count].Location.Row <= (row + 2))// и места осталось только для итоговой строки
    then begin
      exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 1)].Delete;
      inc(row);

      exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 6)].Insert;
      exWks.Rows[IntToStr(row + 7) + ':' + IntToStr(row +13)].Copy;
      exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 6)].PasteSpecial(1);

      exWks.HPageBreaks.Add(exWks.Cells[row, 1]);

      inc(page);
      exWks.Range['AL' + IntToStr(row)].Value := 'Страница ' + inttostr(page);
      inc(row, 4);
    end else if (SP_Balans_Detail.RecordCount = SP_Balans_Detail.RecNo) then begin
      // Спрячем строки, чтобы получить реальную картину разбиения по страницам
      exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 8)].Hidden := True;

      // Передернем документ дабы пересчитались разделители страниц
//      exWks.UsedRange.End[-4162]; // позиция на первую строку
//      exWks.UsedRange.End[-4121]; // позиция на последней строку

      if (exWks.HPageBreaks.Count > 0)                                          // несколько страниц
      and (row < exWks.HPageBreaks[exWks.HPageBreaks.Count].Location.Row)       // и разрыв ниже рабочей строки
      then begin

        exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 8)].Hidden := False;

        exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 1)].Delete;
        inc(row);

        exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 6)].Insert;
        exWks.Rows[IntToStr(row + 7) + ':' + IntToStr(row +13)].Copy;
        exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 6)].PasteSpecial(1);

        exWks.HPageBreaks.Add(exWks.Cells[row, 1]);

        inc(page);
        exWks.Range['AL' + IntToStr(row)].Value := 'Страница ' + inttostr(page);
        inc(row, 4);
      end else begin
        exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 8)].Hidden := False;
      end;

    end;

    exWks.Rows[IntToStr(1 + row)].Insert;
    exWks.Rows[IntToStr(0 + row)].Copy;
    exWks.Rows[IntToStr(1 + row)].PasteSpecial(1);

//    exWks.Range['A' + IntToStr(22 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(row)].Value := SP_Balans_Detail.RecNo;
    exWks.Range['C' + IntToStr(row)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
    exWks.Range['G' + IntToStr(row)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_cod').AsString;
    exWks.Range['V' + IntToStr(row)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    str_tmp := SP_Balans_Detail.FieldByName('bargain_ed_izm_cod').AsString;
    case IndexText(str_tmp, ['000', '001', '002', '003', '004', '006']) of
      0:    str_tmp := '168'; // тонна
      1..3: str_tmp := '796'; // штука
      4:    str_tmp := '954'; // вагоно-сутки
      5:    str_tmp := '113'; // м.куб
    end;
    if Q_OKEI.Locate('inf_obj_cod', str_tmp, []) then begin
      exWks.Range['H' + IntToStr(row)].Value := Q_OKEI.FieldByName('inf_obj_name').AsString;
      exWks.Range['L' + IntToStr(row)].Value := Q_OKEI.FieldByName('inf_obj_cod').AsString;
    end else begin
      exWks.Range['H' + IntToStr(row)].Value := SP_Balans_Detail.FieldByName('bargain_ed_izm_name').AsString;
      exWks.Range['L' + IntToStr(row)].Value := '---';
    end;

    //НДС
    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);

    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;

    exWks.Range['X' + IntToStr(row)].Value := SP_Balans_Detail.FieldByName('rate_without_nds').Value;
    exWks.Range['AE'+ IntToStr(row)].Value := Query_NDS.FieldByName('nds_name').AsString;

    if SP_Balans_Detail.FieldByName('set_include_nds').Value then begin
     exWks.Range['Z' + IntToStr(row)].Value := RoundCurr((SP_Balans_Detail.FieldByName('summa').AsCurrency * 100 / (100 + nds_rate)), -2);
     exWks.Range['AH'+ IntToStr(row)].Value := RoundCurr((SP_Balans_Detail.FieldByName('summa').AsCurrency * nds_rate / (100 + nds_rate)), -2);
     exWks.Range['AK'+ IntToStr(row)].Value := SP_Balans_Detail.FieldByName('summa').Value
    end else begin
     exWks.Range['Z' + IntToStr(row)].Value := RoundCurr(SP_Balans_Detail.FieldByName('rate_without_nds').AsCurrency * SP_Balans_Detail.FieldByName('calc_weight').AsCurrency, -2);
     exWks.Range['AH'+ IntToStr(row)].Value := RoundCurr(SP_Balans_Detail.FieldByName('rate_without_nds').AsCurrency * SP_Balans_Detail.FieldByName('calc_weight').AsCurrency, -2)*RoundCurr(nds_rate/100, -2);
     exWks.Range['AK'+ IntToStr(row)].Value := exWks.Range['Z' + IntToStr(row)].Value + exWks.Range['AH'+ IntToStr(row)].Value;
    end;

    inc(row);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  // удаление лишних строк
  if row = 23 then begin
    // ничего не напечатано - удаляем одну строку и одну просто чисти
    exWks.Rows[IntToStr(row + 0)].ClearContents;
    exWks.Rows[IntToStr(row + 1)].Delete;
    Inc(row, 2);
  end else begin
    exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 1)].Delete;
    Inc(row);
  end;
  exWks.Rows[IntToStr(row + 0) + ':' + IntToStr(row + 6)].Delete;

  // сумма прописью
  exWks.Range['str_sum'].Value := GetSumScript_RUS(exWks.Range['acts_sum '].Value, retActSettings[7][0]);
  exWks.Range['str_count'].Value := GetSumScript_RUS( IntToStr(SP_Balans_Detail.RecordCount), -9);

  Q_OKEI.Free;
  SP_Balans_Detail.Free;

  //Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['D8']);
  AutoFitMergeCell(exWks.Range['D12']);

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);
//  exApp.Visible := True;

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton51Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  recXls              : integer;
  str_bargain_id      : string;

  ClientDS_distance   : TClientDataSet;
  str_expeditor       : array [1..2] of string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 224 = 'Расчет объема оказанных услуг (общий)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['B2'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' + #10 +
                             'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['P4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B20'].Value := 'Настоящий расчёт объёма оказанных услуг составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ' - ' + str_expeditor[1];
  exWks.Range['B7'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString + ' - ' + str_expeditor[2];
  exWks.Range['B24'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['K24'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // валюта
  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['Q9'].Value := VarToStr(retActSettings[7][1]);
  end;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B26'].Value := retActSettings[14][1];
    exWks.Range['F26'].Value := retActSettings[13][1];
  end else
    exWks.Range['B26:H26'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B28'].Value := retActSettings[14][4];
    exWks.Range['F28'].Value := retActSettings[13][4];
  end else
    exWks.Range['B28:H28'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['K26'].Value := retActSettings[14][7];
    exWks.Range['N26'].Value := retActSettings[13][7];
  end else
    exWks.Range['K26:O26'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['K28'].Value := retActSettings[14][10];
    exWks.Range['N28'].Value := retActSettings[13][10];
  end else
    exWks.Range['K28:O28'].ClearContents;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B20']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka_UralLogistic;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 1;
  recXls := 12;
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_period').Value;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    if retActSettings[6][4] = True then begin
      // set_routefromfact = True
      exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_node_begin_name').AsString;
      exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_road_begin_name').AsString;
      exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_node_end_name').AsString;
      exWks.Range['G' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_road_end_name').AsString;
    end else begin
      // set_routefromfact = False
      exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString;
      exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('road_begin_name').AsString;
      exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['G' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('road_end_name').AsString;
    end;
    if retActSettings[6][5] = True then begin
      // set_kargofromfact = True
      exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_kargoETSNG_name').AsString;
    end else begin
      // set_kargofromfact = False
      exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
    end;

    exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['K' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks.Range['L' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').AsString;

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['M' + IntToStr(recXls)].Value := Query_NDS.FieldByName('nds_name').AsString;

    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks.Range['N' + IntToStr(recXls)].Value := null
    else
      exWks.Range['N' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    exWks.Range['Q' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa').Value;
    exWks.Range['R' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa_add').Value;

    exWks.Range['I' + IntToStr(recXls)].Value := null;
    if exWks.Range['I:I'].EntireColumn.Hidden = False then begin
      // Заполняем, если колонка не спрятана
      // Расстояние
      if retActSettings[6][4] = True then begin
        // set_routefromfact = True
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('fact_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('fact_node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('fact_node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('fact_node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
          ClientDS_distance.Post;
        end;
      end else begin
        // set_routefromfact = False
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('node_begin_cod').AsString, SP_Balans_Detail.FieldByName('node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
          ClientDS_distance.Post;
        end;
      end;
      exWks.Range['I' + IntToStr(recXls)].Value := ClientDS_distance.FieldByName('distance').Value;
    end;

    inc(recNo);
    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(recXls)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(recXls)].Delete
  else begin
    exWks.Rows[IntToStr(recXls)].ClearContents;
    inc(recXls);
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['P' + IntToStr(recXls + 4)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton116Click(Sender: TObject);
var list_bargain_id : array of string;
     str_bargain_id : string;
                  i : integer;
begin
  str_bargain_id := '';
  SetLength(list_bargain_id, cxGrid1DBBandedTableView1.Controller.SelectedRowCount);

  for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
      list_bargain_id[i] := cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index];
      if i > 0 then str_bargain_id := str_bargain_id + ',';
      if cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index] = null then
        str_bargain_id := str_bargain_id + '<пусто>'
      else
        str_bargain_id := str_bargain_id + VarToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
    end;

  cxPageControl1.ActivePageIndex := 1;
  cxGrid3DBBandedTableView1.DataController.Filter.Clear;
  cxGrid3DBBandedTableView1.DataController.Filter.Options := cxGrid3DBBandedTableView1.DataController.Filter.Options + [fcoCaseInsensitive];
  cxGrid3DBBandedTableView1.DataController.Filter.Root.BoolOperatorKind := fboAnd;

  cxGrid3DBBandedTableView1.DataController.Filter.Root.AddItem(cxGrid3DBBandedTableView1bargain_id, foInList, list_bargain_id, str_bargain_id);
  cxGrid3DBBandedTableView1.DataController.Filter.Active := True;
end;

procedure TfmAgree2.dxBarButton119Click(Sender: TObject);
var
  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  recNo               : integer;
  recXls              : integer;
  str_bargain_id      : string;

  Query               : TADOQuery;
  contract_id         : integer;
  contract_cod        : string;
  date_end            : TDate;
begin
  // 176 = 'Акт по RS'

  if SP_Agree.Eof then exit;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  // Проверяем, один ли контракт
  // а так же формируем начальную и конечную даты
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT min(contract_id) as min_contract_id, max(contract_id) as max_contract_id, ');
  Query.SQL.Add('min(date_period) as min_date_period, max(date_period) as max_date_period, ');
  Query.SQL.Add('min(contract_cod) as min_contract_cod');
  Query.SQL.Add('FROM view_bargain');
  Query.SQL.Add('JOIN dbo.StrToTbl(''' + str_bargain_id + ''', default) as StrToTbl');
  Query.SQL.Add('ON view_bargain.bargain_id = StrToTbl.cod');
  Query.Open;

  if Query.Eof then begin
    Application.MessageBox('Не выбраны перевозки - акт сформирован не будет', 'Внимание', MB_OK or MB_ICONEXCLAMATION);
    Query.Free;
    exit;
  end;
  if Query.FieldByName('min_contract_id').AsInteger <> Query.FieldByName('max_contract_id').AsInteger then begin
    Application.MessageBox('Выбраны перевозки по нескольким договорам - акт сформирован не будет', 'Внимание', MB_OK or MB_ICONEXCLAMATION);
    Query.Free;
    exit;
  end;

  contract_id := Query.FieldByName('min_contract_id').AsInteger;
  contract_cod := Query.FieldByName('min_contract_cod').AsString;
  //date_begin  := StartOfTheMonth(iif(Query.FieldByName('min_date_period').AsDateTime = 0, Date, Query.FieldByName('min_date_period').AsDateTime));
  date_end    := EndOfTheMonth(iif(Query.FieldByName('max_date_period').AsDateTime = 0, Date, Query.FieldByName('max_date_period').AsDateTime)) - 1;
  Query.Free;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, 176));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['contract_cod'].Value := contract_cod;
  exWks.Range['acts_date'].Value := date_end;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := contract_id;
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := 176;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := 3; // RUB
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recNo := 1;
  recXls := 23;
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := recNo;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_eng').AsString;
    exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
    exWks.Range['G' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_eng').AsString;
    exWks.Range['I' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks.Range['N' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
    exWks.Range['O' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_eng').AsString;

    exWks.Range['R' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa').AsFloat; // + SP_Balans_Detail.FieldByName('add').AsFloat;

    inc(recNo);
    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // при необходимости удаляем лишнии записи
  if recNo <> 1 then begin
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].Delete;
  end else begin
    // удаляем одну запись
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 0)].Delete;
    inc(recXls);
  end;

  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton120Click(Sender: TObject);
begin
  UsersSettingModify(TComponent(Sender).Tag, TForm(self).Name, TcxControl(cxGrid3DBBandedTableView1), fmMain.Lis);
end;

procedure TfmAgree2.dxBarButton121Click(Sender: TObject);
var    new_str : string;
             i : integer;
str_bargain_id : string;
   SP_FactCopy : TADOStoredProc;
             Q : TADOQuery;
begin
 if InputQuery('Копировать факт', '№ записи перевозки', new_str) then begin
    Screen.Cursor := crHourglass;

    str_bargain_id := '';
    for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
      str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
    Delete(str_bargain_id, 1, 2);

    Q := TADOQuery.Create(nil);
    Q.Connection := Fconnect;
    Q.SQL.Add('SELECT fact_id, bargain_id FROM fact WHERE bargain_id in (' + str_bargain_id + ')');
    Q.Open;

    SP_FactCopy := TADOStoredProc.Create(nil);
    SP_FactCopy.Connection := Fconnect;
    SP_FactCopy.ProcedureName := 'sp_fact_copy_bargain;1';
    SP_FactCopy.Parameters.Refresh;

    while not Q.Eof do begin
      SP_FactCopy.Close;
      SP_FactCopy.Parameters.ParamByName('@fact_id'   ).Value := Q.FieldByName('fact_id').AsInteger;
      SP_FactCopy.Parameters.ParamByName('@bargain_id').Value := StrToInt(new_str);
      try
        SP_FactCopy.ExecProc;
      except
        SP_FactCopy.Free;
        ShowTextMessage;
      end;
      ShowTextMessage('Осталось ' + IntToStr(Q.RecordCount - Q.RecNo) + ' записей...',  False);
      Q.Next;
    end;
//    SP_FactClient.Close;
//    SP_FactClient.Open;
    Q.Free;
    SP_FactCopy.Free;
    ShowTextMessage;

    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.dxBarButton123Click(Sender: TObject);
begin
  Screen.Cursor := crHourglass;

  case TControl(Sender).Tag of
    1 : Fdate1 := IncMonth(Fdate1, 1);
    2 : Fdate1 := IncMonth(Fdate1, -1);
  end;

  Fdate2 := IncMonth(Fdate1, 1) - 1;
  dxBarSubItem3.Caption := FormatDateTime('mmmm yyyy', Fdate1);
  dxBarManager1Bar1.Reset;

  dxBarButton123.Caption := FormatDateTime('mmmm yyyy', IncMonth(Fdate1,-1));
  dxBarButton117.Caption := FormatDateTime('mmmm yyyy', IncMonth(Fdate1,1));

  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton124Click(Sender: TObject);
type
  TFunc = function(AppHand:THandle) : Variant;
var str_bargain_id : string;
                 Q : TADOQuery;
              FDic : TFunc;
            handle : THandle;
                 v : Variant;
              List : TStringList;
                 i : integer;
begin

  handle := LoadLibrary('dictionary.dll');
  @FDic := GetProcAddress(handle, 'CreateWndChoose');
  v := FDic(Application.Handle);
  FreeLibrary(handle);

  str_bargain_id := v[0];
  // нажата кнока Cancel
  if str_bargain_id = '' then
    Exit;

  // нажата ОК, но не указаны номера
  if ReplaceStr(ReplaceStr(str_bargain_id, #13#10, ','), ' ', '') = '' then begin
    Application.MessageBox('Не указаны номера записей перевозок!', 'ВНИМАНИЕ!', MB_OK + MB_ICONERROR );
    Exit;
  end;


  Screen.Cursor := crHourglass;

  List := TStringList.Create;
  List.Text := str_bargain_id;
  str_bargain_id := ReplaceStr(str_bargain_id, #13#10, ',');

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT max(date_period) as max_date, min(date_period) as min_date FROM view_bargain_rights WHERE bargain_id IN (SELECT cod FROM dbo.StrToTbl(''' + str_bargain_id + ''', '',''))' );
  Q.Open;

  if Q.RecordCount > 0 then begin
    Factive_users_id := -9;
    SP_Agree.Close;
    SP_Agree.Parameters.Refresh;
    SP_Agree.Parameters.ParamByName('@date_begin'        ).Value := Q.FieldByName('min_date').AsDatetime;
    SP_Agree.Parameters.ParamByName('@date_end'          ).Value := Q.FieldByName('min_date').AsDatetime;
    SP_Agree.Parameters.ParamByName('@users_owner_id'    ).Value := Factive_users_id;
    SP_Agree.Parameters.ParamByName('@set_period_finance').Value := False;
    SP_Agree.Open;

    cxGrid1DBBandedTableView1.DataController.DataSet.DisableControls;
    with cxGrid1DBBandedTableView1.DataController.Filter do begin
      Clear;
      Options := Options + [fcoCaseInsensitive];
      Root.BoolOperatorKind := fboOr;
      BeginUpdate;
      for i := 0 to List.Count - 1 do begin
        if (Trim(List.Strings[i])<>'') then
          Root.AddItem(cxGrid1DBBandedTableView1.GetColumnByFieldName('bargain_id'), foEqual, Trim(List.Strings[i]),Trim(List.Strings[i]) );
      end;
      EndUpdate;
      Active := True;
    end;
    cxGrid1DBBandedTableView1.DataController.DataSet.EnableControls;
  end;

  Q.Free;
  List.Free;
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton125Click(Sender: TObject);
var           i : integer;
    str_fact_id : string;
begin
  str_fact_id := GetStrId(cxGrid2DBBandedTableView1fact_id, ',');
  if str_fact_id = '' then begin
    Application.MessageBox('Выберите вагоны!', 'Внимание', MB_ICONWARNING or MB_OK);
    exit;
  end;

  for i:=0 to MDIChildCount-1 Do
    if (MDIChildren[i].ClassName = 'TfmFactSum') then begin
      MDIChildren[i].Free;
      Break;
    end;

  fmFactSum := TfmFactSum.Create(Application, True);
  fmFactSum._SetBargainId := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
  fmFactSum._SetFactID    := str_fact_id;
  fmFactSum.ShowModal;

  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
end;

procedure TfmAgree2.dxBarButton126Click(Sender: TObject);
var
  retActSettings      : Variant;

  str_bargain_id      : string;
  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query, Query_tmp    : TADOQuery;
  recNo_Score         : integer;
  recNo_Pays          : integer;
  recNo_FirstPart     : integer;

  str_expeditor       : array [1..4] of string;
  str_expeditor_eng   : array [1..4] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  firm_self_name_eng     : string;
  firm_customer_name_eng : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 232 = 'Акт сверки расчетов (RUS + ENG)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT firm_property_cod,');
  Query.SQL.Add('type_firm_self_name, type_firm_customer_name, ');
  Query.SQL.Add('type_firm_self_name_translit, type_firm_customer_name_translit ');
  Query.SQL.Add('FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query.Open;

//  firm_property_cod:= Query.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query.FieldByName('type_firm_customer_name').AsString;
  str_expeditor[3] := 'задолженность ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е');
  str_expeditor[4] := 'задолженность ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е');

  str_expeditor_eng[1] := Query.FieldByName('type_firm_self_name_translit').AsString;
  str_expeditor_eng[2] := Query.FieldByName('type_firm_customer_name_translit').AsString;
  str_expeditor_eng[3] := str_expeditor_eng[2] + '''s debt';
  str_expeditor_eng[4] := str_expeditor_eng[1] + '''s debt';;

  Query.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := SP_Agree.FieldByName('bargain_id').AsString;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 3, ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT ISNULL(NULLIF(firm_name_eng, ''''), firm_name_short) as firm_name_eng FROM firm WHERE firm_id = :firm_id');
  Query_tmp.Close;
  Query_tmp.Parameters.ParamByName('firm_id').Value := retActSettings[12][0];
  Query_tmp.Open;
  firm_self_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
  Query_tmp.Close;
  Query_tmp.Parameters.ParamByName('firm_id').Value := SP_Agree.FieldByName('firm_customer').AsInteger;
  Query_tmp.Open;
  firm_customer_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
  Query_tmp.Free;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;
  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_new;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := SP_Agree.FieldByName('contract_id').Value;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];
  SP_Balance.ExecProc;

  if SP_Balance.Parameters.ParamByName('@contract_id').Value = -9 then begin
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Первичный платёж установлен позже указанного периода. Начальное сальдо не сформировано', 'Внимание', MB_OK);
    SP_Balance.Free;
    Exit;
  end;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon)); // 'Акт сверки расчетов.xls'
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['B2'].Value := 'между ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ' и ' + VarToStr(retActSettings[12][1]) + #10 +
                             'Договор № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'between ' + firm_customer_name_eng + ' and ' + firm_self_name_eng + #10 +
                             'under the Agreement ' + SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime);

  exWks.Range['K3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]);

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) +
                             ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString +
                             ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", ' +
                             'с другой стороны, составили настоящий Акт сверки расчетов ' +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' + #10#10 +

                             firm_self_name_eng + ', on the one part, hereinafter refferd to as the "' + str_expeditor_eng[1] + '", through its ' + VarToStr(retActSettings[4][5]) +
                             ', and ' + firm_customer_name_eng + ', on the other part, hereinafter refferd to as the "' + str_expeditor_eng[2] + '", represented by ' + VarToStr(retActSettings[5][5]) +
                             ', have drawn up the present Accounts reconciliation statement ' +
                             'under the period from ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' to ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + ' as follows:';

  AutoFitMergeCell(exWks.Range['B5']);

  exWks.Range['B11'].Value := 'Оказаны услуги ' + VarToStr(retActSettings[12][1]) + #10 +
                              'Services rendered by ' + firm_self_name_eng;
  exWks.Range['B21'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['B22'].Value := firm_self_name_eng;

  exWks.Range['G11'].Value := 'Платежи ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                              'Payments of ' + firm_customer_name_eng;
  exWks.Range['G21'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['G22'].Value := firm_customer_name_eng;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B24'].Value := retActSettings[14][1];
    exWks.Range['B25'].Value := retActSettings[14][2];
    exWks.Range['D24'].Value := retActSettings[13][1];
  end else
    exWks.Range['B24:F25'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B27'].Value := retActSettings[14][4];
    exWks.Range['B28'].Value := retActSettings[14][5];
    exWks.Range['D27'].Value := retActSettings[13][4];
  end else
    exWks.Range['B27:F28'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['G24'].Value := retActSettings[14][7];
    exWks.Range['G25'].Value := retActSettings[14][8];
    exWks.Range['I24'].Value := retActSettings[13][7];
  end else
    exWks.Range['G24:K25'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['G27'].Value := retActSettings[14][10];
    exWks.Range['G28'].Value := retActSettings[14][11];
    exWks.Range['I27'].Value := retActSettings[13][10];
  end else
    exWks.Range['G27:K28'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 6 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['21:21'].Copy;
    exWks.Rows['29:33'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B30'].Value := 'Дата подписания';
    exWks.Range['B31'].Value := 'Date of signing';
    exWks.Range['B33'].Value := '"____" __________________ 201__';
    exWks.Range['G30'].Value := 'Дата подписания';
    exWks.Range['G31'].Value := 'Date of signing';
    exWks.Range['G33'].Value := '"____" __________________ 201__';
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['G9'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G18'].Value := VarToStr(retActSettings[7][1]);

    exWks.Range['F12'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]) + #10 + 'Amount with VAT, '  + VarToStr(retActSettings[7][1]);
    exWks.Range['K12'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]) + #10 + 'Amount with VAT, '  + VarToStr(retActSettings[7][1]);
  end;

  exWks.Range['L9'].Value := SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000));
  SP_Balance.Free;

  // Данные отчета (заполнение происходит снизу-вверх)
  // С-ф (обычные) (верхняя-левая часть)
  ShowTextMessage('Формирование отчета: Шаг 1 из 2', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 0 AND set_clearing = 0 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  recNo_Score := 1;
  while not Query.Eof do begin
    exWks.Rows[IntToStr(12 + recNo_Score)].ClearContents;
    exWks.Rows[IntToStr(13 + recNo_Score)].Insert;
    exWks.Rows[IntToStr(12 + recNo_Score)].Copy;
    exWks.Rows[IntToStr(13 + recNo_Score)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(12 + recNo_Score)].Value := 'счет-фактура'#10'invoice'
    else
      exWks.Range['B' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['F' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_Score);
  end;
  Query.Free;

  // Платежи (обычные) (верхняя-правая часть)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 2 из 2', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (set_return = 0)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query.Open;

  recNo_Pays := 1;
  while not Query.Eof do begin
    if (recNo_Pays >= recNo_Score) then begin
      exWks.Rows[IntToStr(12 + recNo_Pays)].ClearContents;
      exWks.Rows[IntToStr(13 + recNo_Pays)].Insert;
      exWks.Rows[IntToStr(12 + recNo_Pays)].Copy;
      exWks.Rows[IntToStr(13 + recNo_Pays)].PasteSpecial(1);
    end;

//    if Query.FieldByName('pay_sum').AsCurrency >= 0  then
    exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := 'платежное поручение'#10'bank transer order';
//    else
//      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := 'платежное поручение на возврат денежных средств';
    exWks.Range['H' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['I' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['J' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['K' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo_Pays);
  end;
  Query.Free;

//  // С-ф (взаимозачёт)  (верхняя-правая часть; вместе с обычными платежами)
//  ShowTextMessage('Формирование отчета: Шаг 5 из 5', False);
//
//  Query := TADOQuery.Create(nil);
//  Query.Connection := Fconnect;
//  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
//  Query.SQL.Add(', invoice_score.score_doc_type_name');
//  Query.SQL.Add('FROM invoice_score');
//  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
//  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
//  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_clearing = 1 AND set_avance = 0');
//  Query.SQL.Add('AND contract_id = :contract_id');
//  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
//  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
//  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
//  Query.Parameters.ParamByName('contract_id').Value := Query_Agree.FieldByName('contract_id').AsInteger;
//  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
//  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
//  Query.Open;
//
//  while not Query.Eof do begin
//    if (recNo_Pays >= recNo_Score) then begin
//      exWks.Rows[IntToStr(12 + recNo_Pays)].ClearContents;
//      exWks.Rows[IntToStr(13 + recNo_Pays)].Insert;
//      exWks.Rows[IntToStr(12 + recNo_Pays)].Copy;
//      exWks.Rows[IntToStr(13 + recNo_Pays)].PasteSpecial(1);
//    end;
//
//    if Query.FieldByName('score_doc_type_name').IsNull then
//      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := 'счет-фактура (возмещение расходов)'
//    else
//      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('score_doc_type_name').AsString;
//    exWks.Range['H' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('score_cod').AsString;
//    exWks.Range['I' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('score_date').Value;
//    exWks.Range['J' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('inf_obj_name').AsString;
//    exWks.Range['K' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('summa').Value;
//
//    Query.Next;
//    inc(recNo_Pays);
//  end;
//  Query.Free;

  if (recNo_Pays > recNo_Score) then recNo_FirstPart := recNo_Pays else recNo_FirstPart := recNo_Score;

  if (recNo_Pays <> 1) or (recNo_Score <> 1) then exWks.Rows[IntToStr(12 + recNo_FirstPart)].Delete
  else recNo_FirstPart := recNo_FirstPart + 1;

  exWks.Rows[IntToStr(12 + recNo_FirstPart)].Delete;

  // Пункты акта
  exWks.Range['B8'].Value := '1. По Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ' +
                             VarToStr(iif(exWks.Range['L9'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части оказанных услуг ' +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:' + #10 +
                             '1. According to the Agreement ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + ', ' +
                             VarToStr(iif(exWks.Range['L9'].Value < 0,  str_expeditor_eng[3], str_expeditor_eng[4])) + ' in terms of services rendered ' +
                             'at ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' totals to:';

  AutoFitMergeCell(exWks.Range['B8']);

  exWks.Range['B' + IntToStr(14 + recNo_FirstPart)].Value :=
                             'По Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ' +
                             VarToStr(iif(exWks.Range['L' + IntToStr(15 + recNo_FirstPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части оказанных услуг ' +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:' + #10 +
                             'According to the Agreement ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + ', ' +
                             VarToStr(iif(exWks.Range['L' + IntToStr(15 + recNo_FirstPart)].Value < 0,  str_expeditor_eng[3], str_expeditor_eng[4])) + ' in terms of services rendered ' +
                             'at ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + ' totals to:';
  AutoFitMergeCell(exWks.Range['B' + IntToStr(14 + recNo_FirstPart)]);

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton167Click(Sender: TObject);
var
  retActSettings           : Variant;
  exApp, exWkb, exWks      : Variant;
  Query_tmp                : TADOQuery;
  SP_Balans_Detail         : TADOStoredProc;
  recNo                    : integer;
  str_expeditor            : array [1..2] of string;
  cod_shablon              : integer;
  str_bargain_id           : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 314 = 'Акт оказанных услуг (вознаграждение, %)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTE_n_KARGOFROMFACT);
  if retActSettings[0] = -9 then
    exit;

  // Валюта всегда рубли
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['B2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['O3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B8'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['K18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['F20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:H20'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['F22'].Value := retActSettings[13][4];
  end else
    exWks.Range['B22:H22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['K20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['O20'].Value := retActSettings[13][7];
  end else
    exWks.Range['K20:P20'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['K22'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['O22'].Value := retActSettings[13][10];
  end else
    exWks.Range['K22:P22'].ClearContents;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B6']);
  AutoFitMergeCell(exWks.Range['B8']);
  AutoFitMergeCell(exWks.Range['B15']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_comiss_SFH;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(11 + recNo)].Insert;
    exWks.Rows[IntToStr(10 + recNo)].Copy;
    exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period_service').AsDatetime;
    exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
    exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
    if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
      exWks.Range['H' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
    else
      exWks.Range['H' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
    exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;

    exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;

    exWks.Range['L' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('percent_commis').Value;

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['M' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

    exWks.Range['N' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('comiss_sum_not_nds_RUB').Value;
    exWks.Range['O' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('comiss_sum_nds_RUB').Value;
    exWks.Range['P' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('comiss_sum_RUB').Value;

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;

  exWks.Select;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['P' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton168Click(Sender: TObject);
var
  retActSettings      : Variant;

  str_bargain_id      : string;
  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query               : TADOQuery;
  recNo_SecondPart    : integer;
  recNo_FirstPart     : integer;

  set_balance_return  : Boolean;

  str_expeditor       : array [1..4] of string;
//  firm_property_cod   : string;
  PrintArea           : string;
  cod_shablon         : integer;

  str_customer        : string;
  str_contract        : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 319 = 'Акт сверки расчетов (2-х сторонний)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query.Open;
//  firm_property_cod:= Query.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query.FieldByName('type_firm_customer_name').AsString;
  Query.Free;
  str_expeditor[3] := 'задолженность ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е');
  str_expeditor[4] := 'задолженность ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е');

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := SP_Agree.FieldByName('bargain_id').AsString;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;
  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_new;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := SP_Agree.FieldByName('contract_id').Value;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];
  SP_Balance.ExecProc;

  if SP_Balance.Parameters.ParamByName('@contract_id').Value = -9 then begin
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Первичный платёж установлен позже указанного периода. Начальное сальдо не сформировано', 'Внимание', MB_OK);
    SP_Balance.Free;
    Exit;
  end;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B2'].Value := 'между ' + str_customer +
                             ' и ' + VarToStr(retActSettings[12][1]) + #10 +
                             'Договор № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' +
                             FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['M3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) +
                             ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + str_customer +
                             ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", ' +
                             'с другой стороны, составили настоящий Акт сверки расчетов ' +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  AutoFitMergeCell(exWks.Range['B5']);


  exWks.Range['B8'].Value := 'По данным ' + VarToStr(retActSettings[12][1]);
  exWks.Range['B60'].Value := VarToStr(retActSettings[12][1]);
  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['H8'].Value := 'По данным ' + str_customer;
  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['H60'].Value := str_customer;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks.Range['B62'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks.Range['B62'].Value := Null;
  if retActSettings[13][5] = True then
    exWks.Range['B64'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks.Range['B64'].Value := Null;
  if retActSettings[13][8] = True then
    exWks.Range['H62'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks.Range['H62'].Value := Null;
  if retActSettings[13][11] = True then
    exWks.Range['H64'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
  else
    exWks.Range['H64'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['62:64'].Copy;
    exWks.Rows['66:68'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B66'].Value := 'Дата подписания';
    exWks.Range['B68'].Value := '"____" __________________ 201__';
    exWks.Range['H66'].Value := 'Дата подписания';
    exWks.Range['H68'].Value := '"____" __________________ 201__';

    // Спрячем лишние колонки и строки (НДС), для иностранцев они не отображаются
    exWks.Rows['19:23'].Hidden := True;
    exWks.Rows['42:46'].Hidden := True;

    exWks.Columns['E:E'].Hidden := True;
    exWks.Columns['K:K'].Hidden := True;
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['G8'].Value := VarToStr(retActSettings[7][1]);
  end;

  exWks.Range['N8'].Value := SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000));
  set_balance_return := (SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value <> null);
  set_balance_return := set_balance_return and (SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value <> 0);
  if set_balance_return then
    exWks.Range['N31'].Value := -SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value
  else
    exWks.Range['N31'].Value := 0;
  SP_Balance.Free;

  // Данные отчета (заполнение происходит снизу-вверх)
  // Нижняя часть = возврат
  recNo_SecondPart := 1;
  // С-ф (возврат)
  ShowTextMessage('Формирование отчета: Шаг 1 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 1 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(38 + recNo_SecondPart)].ClearContents;
    exWks.Rows[IntToStr(39 + recNo_SecondPart)].Insert;
    exWks.Rows[IntToStr(38 + recNo_SecondPart)].Copy;
    exWks.Rows[IntToStr(39 + recNo_SecondPart)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(38 + recNo_SecondPart)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['G' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_SecondPart);
  end;
  Query.Free;

  // Платежи (возврат)
  ShowTextMessage('Формирование отчета: Шаг 2 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(-pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (set_return = 1)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(38 + recNo_SecondPart)].ClearContents;
    exWks.Rows[IntToStr(39 + recNo_SecondPart)].Insert;
    exWks.Rows[IntToStr(38 + recNo_SecondPart)].Copy;
    exWks.Rows[IntToStr(39 + recNo_SecondPart)].PasteSpecial(1);

    exWks.Range['B' + IntToStr(38 + recNo_SecondPart)].Value := 'платежное поручение';
    exWks.Range['C' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['D' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['E' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['F' + IntToStr(38 + recNo_SecondPart)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo_SecondPart);
  end;
  Query.Free;

  if (recNo_SecondPart = 1) then begin
    // нет строк в нижнем блоке отчета
    if set_balance_return then begin
      // Есть баланс (возврат), блок оставляем и удаляем ОДНУ строку
      exWks.Rows[IntToStr(38 + recNo_SecondPart)].Delete;
      recNo_SecondPart := 2;
    end else begin
      // Нет баланса, пустой блок - удаляем
      exWks.Rows['30:58'].Delete;
    end;
  end else begin
    // есть строки в нижнем блоке отчета, удаляем ДВЕ строки
    exWks.Rows[IntToStr(38 + recNo_SecondPart)].Delete;
    exWks.Rows[IntToStr(38 + recNo_SecondPart)].Delete;
  end;

  // Верхняя часть = услуги и платежи
  recNo_FirstPart := 1;
  // С-ф (обычные)
  ShowTextMessage('Формирование отчета: Шаг 3 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 0 AND set_clearing = 0 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].ClearContents;
    exWks.Rows[IntToStr(16 + recNo_FirstPart)].Insert;
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].Copy;
    exWks.Rows[IntToStr(16 + recNo_FirstPart)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(15 + recNo_FirstPart)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['F' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_FirstPart);
  end;
  Query.Free;

  // Платежи (обычные)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 4 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (set_return = 0)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].ClearContents;
    exWks.Rows[IntToStr(16 + recNo_FirstPart)].Insert;
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].Copy;
    exWks.Rows[IntToStr(16 + recNo_FirstPart)].PasteSpecial(1);

    if Query.FieldByName('pay_sum').AsCurrency >= 0  then
      exWks.Range['B' + IntToStr(15 + recNo_FirstPart)].Value := 'платежное поручение'
    else
      exWks.Range['B' + IntToStr(15 + recNo_FirstPart)].Value := 'платежное поручение на возврат денежных средств';
    exWks.Range['C' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['D' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['E' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['G' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo_FirstPart);
  end;
  Query.Free;

  // С-ф (взаимозачёт)  (верхняя-правая часть; вместе с обычными платежами)
  ShowTextMessage('Формирование отчета: Шаг 5 из 5', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_clearing = 1 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].ClearContents;
    exWks.Rows[IntToStr(16 + recNo_FirstPart)].Insert;
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].Copy;
    exWks.Rows[IntToStr(16 + recNo_FirstPart)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(15 + recNo_FirstPart)].Value := 'счет-фактура (возмещение расходов)'
    else
      exWks.Range['B' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['G' + IntToStr(15 + recNo_FirstPart)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_FirstPart);
  end;
  Query.Free;

  if recNo_FirstPart = 1 then begin
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].Delete;
    recNo_FirstPart := 2;
  end else begin
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].Delete;
    exWks.Rows[IntToStr(15 + recNo_FirstPart)].Delete;
  end;

  // Пункты акта
  str_customer := 'в адрес ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ' ';
  str_contract :=
   ' По Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
   ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ';

  // 1. Задолженность (основная) на начало периода
  exWks.Range['B7'].Value :=
                             '1.' + str_contract +
                             VarToStr(iif(exWks.Range['N8'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части оказанных услуг ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['B7']);

  // 2. Оказаны услуги
  exWks.Range['B13'].Value :=
                             '2.' + str_contract +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' оказаны услуги, а ' +
                             ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е') + ' произведены оплаты в следующем размере:';
  AutoFitMergeCell(exWks.Range['B13']);

  // 3. Задолженность (основная) на конец периода
  exWks.Range['B' + IntToStr(21 + recNo_FirstPart)].Value :=
                             '3.' + str_contract +
                             VarToStr(iif(exWks.Range['N' + IntToStr(22 + recNo_FirstPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части оказанных услуг ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['B' + IntToStr(21 + recNo_FirstPart)]);

  // пункты с 4 по 7 заполняем только при наличии второго блока
  if (recNo_SecondPart > 1) then begin
    // 4. Задолженность (возврат) на начало периода
    exWks.Range['B' + IntToStr(27 + recNo_FirstPart)].Value :=
                             '4.' + str_contract +
                             VarToStr(iif(exWks.Range['N' + IntToStr(28 + recNo_FirstPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части расходов, подлежащих возмещению ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:';
    AutoFitMergeCell(exWks.Range['B' + IntToStr(27 + recNo_FirstPart)]);

    // 5. Возмещаемые услуги
    exWks.Range['B' + IntToStr(33 + recNo_FirstPart)].Value :=
                             '5.' + str_contract +
                             ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е') + ' предъявлены расходы, подлежащие возмещению, а ' +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' оплачено:';
    AutoFitMergeCell(exWks.Range['B' + IntToStr(33 + recNo_FirstPart)]);

    // 6. Задолженность (возврат) на конец периода
    exWks.Range['B' + IntToStr(41 + recNo_FirstPart + recNo_SecondPart)].Value :=
                             '6.' + str_contract +
                             VarToStr(iif(exWks.Range['N' + IntToStr(42 + recNo_FirstPart + recNo_SecondPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части расходов, подлежащих возмещению ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
    AutoFitMergeCell(exWks.Range['B' + IntToStr(41 + recNo_FirstPart + recNo_SecondPart)]);

    // 7. ИТОГО на конец периода
    exWks.Range['B' + IntToStr(47 + recNo_FirstPart + recNo_SecondPart)].Value :=
                             '7.' + str_contract +
                             VarToStr(iif(exWks.Range['N' + IntToStr(48 + recNo_FirstPart + recNo_SecondPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) +
                             ' по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
    AutoFitMergeCell(exWks.Range['B' + IntToStr(47 + recNo_FirstPart + recNo_SecondPart)]);
  end;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;


procedure TfmAgree2.dxBarButton169Click(Sender: TObject);
var SP : TADOStoredProc;
begin
  if DeleteFrahtCard(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger, Fconnect) = False then Exit;

  Screen.Cursor := crHourglass;

  try
    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_fact_etran_change';
    SP.Parameters.ParamByName('@bargain_id').Value := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
    SP.ExecProc;
  except
  end;

  ShowTextMessage('Обновление данных...', False);
  RefreshQueryGrid(cxGrid1DBBandedTableView1, 'bargain_id');
  RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');
  ShowTextMessage;

  Screen.Cursor := crDefault;

end;

procedure TfmAgree2.dxBarButton127Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp, Q        : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  i                   : integer;
  contract_agent_id   : integer;

  cod_shablon         : integer;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  sp_name   : string;
  type_result : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  //192 = 'Акт оказанных услуг (тариф вознагр)'
  //214 = 'Акт оказанных услуг (тариф вознагр) - без разбиения по ставкам'
  //216 = 'Акт оказанных услуг (тариф вознагр) - транзит'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Подрядчик, чьи расходы перевыставляем';
  if fmFilter.ShowModal = mrOk then begin

    contract_agent_id := fmFilter.GetId;

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN or ACT_SET_ALLPARAMFROMFACT, -9, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];

    // Перед заполнением спрячем не нужные колонки - если это необходимо
    if VarToStr(retActSettings[10]) <> '' then
      exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

    // Заполняем шапку и подписи
    exWks.Range['C3'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                               'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                               'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
    exWks.Range['O4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

    exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                               ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                               ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

    exWks.Range['B8'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                               'указанные ниже, ' +
                               'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

    exWks.Range['B16'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
    exWks.Range['B17'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                                'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

    exWks.Range['B19'].Value := VarToStr(retActSettings[12][1]);
    exWks.Range['J19'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B21'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E21'].Value := retActSettings[13][1];
  end else
    exWks.Range['B21:G21'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B23'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E23'].Value := retActSettings[13][4];
  end else
    exWks.Range['B23:G23'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['J21'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['N21'].Value := retActSettings[13][7];
  end else
    exWks.Range['J21:P21'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['J23'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['N23'].Value := retActSettings[13][10];
  end else
    exWks.Range['J23:P23'].ClearContents;

    if retActSettings[6][2] = True then begin
      // 1. Раздвинем область печати на 4 строки вниз
      PrintArea := exWks.PageSetup.PrintArea;
      if PrintArea <> '' then begin
        PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
        exWks.PageSetup.PrintArea := WideString(PrintArea);
      end;
      // 2. Копируем формат
      exWks.Rows['21:23'].Copy;
      exWks.Rows['25:27'].PasteSpecial(Paste:=-4122);
      // 3. Добавим нужные нам строки
      exWks.Range['B25'].Value := 'Дата подписания';
      exWks.Range['B27'].Value := '"____" __________________ 201__';
      exWks.Range['J25'].Value := 'Дата подписания';
      exWks.Range['J27'].Value := '"____" __________________ 201__';
    end;

    exWks.Range['K11'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
    exWks.Range['M11'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

    if (retActSettings[7][0] <> 3) then begin
      exWks.Range['N11'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
      exWks.Range['O11'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
      exWks.Range['P11'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
    end;

    // ed_izm_cod = '001' // контейнер
    if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
      exWks.Range['H11'].Value := 'кол-во контейнеров';

    // Автоподбор по высоте
    AutoFitMergeCell(exWks.Range['B6']);
    AutoFitMergeCell(exWks.Range['B8']);
    AutoFitMergeCell(exWks.Range['B17']);

    // Данные отчета - перевозки
    ShowTextMessage('Подготовка данных ...', False);

    case cod_shablon of
      192 : begin
              sp_name := 'sp_Report_return_tarif_2';
              type_result := 3;
            end;
      214 : begin
              sp_name := 'sp_Report_return_tarif_2';
              type_result := 103;
            end;
      216 : begin
              sp_name := 'sp_Report_return_tarif_tranzit';
              type_result := 3;
            end;
      else  begin
              sp_name := 'sp_Report_return_tarif_2';
              type_result := 3;
            end;
    end;

    SP_Balans_Detail := TADOStoredProc.Create(nil);
    SP_Balans_Detail.Connection := Fconnect;
    SP_Balans_Detail.ProcedureName := sp_name;
    SP_Balans_Detail.Parameters.Refresh;
    SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
    SP_Balans_Detail.Parameters.ParamByName('@contract_agent_id' ).Value := contract_agent_id;
    SP_Balans_Detail.Parameters.ParamByName('@type_result'       ).Value := type_result;
    SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
    SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
    SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact').Value := retActSettings[6][6];
    SP_Balans_Detail.CommandTimeout := 100;
    SP_Balans_Detail.Open;

    recNo := 1;
    while not SP_Balans_Detail.Eof do begin
      exWks.Rows[IntToStr(12 + recNo)].Insert;
      exWks.Rows[IntToStr(11 + recNo)].Copy;
      exWks.Rows[IntToStr(12 + recNo)].PasteSpecial(1);

      exWks.Range['B' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period_service').AsDatetime;
      exWks.Range['C' + IntToStr(11 + recNo)].Value := recNo;
      exWks.Range['D' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
      exWks.Range['E' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('route_name').AsString;
      exWks.Range['F' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['G' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['H' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['I' + IntToStr(11 + recNo)].Value := null
      else
        exWks.Range['I' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if cod_shablon = 192 then begin
        if SP_Balans_Detail.FieldByName('ed_izm_cod').AsString = '000' then
          exWks.Range['M' + IntToStr(11 + recNo)].Value := '=RC[3]/RC[-4]'
        else
          exWks.Range['M' + IntToStr(11 + recNo)].Value := '=RC[3]/RC[-5]';
      end;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['J' + IntToStr(11 + recNo)].Value := null
      else
        exWks.Range['J' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('shaping_rate_nds_id').Value, []);
      exWks.Range['L' + IntToStr(11 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;
      exWks.Range['P' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('client_sum').AsCurrency - SP_Balans_Detail.FieldByName('agent_sum').AsCurrency;

      inc(recNo);

      ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
      SP_Balans_Detail.Next;
    end;

    exWks.Rows[IntToStr(11 + recNo)].Delete;
    if recNo > 1 then
      exWks.Rows[IntToStr(11 + recNo)].Delete
    else begin
      exWks.Rows[IntToStr(11 + recNo)].ClearContents;
      recNo := 2;
    end;

    SP_Balans_Detail.Free;

    exWks.Range['A1'].Select;

    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['P' + IntToStr(11 + recNo)].Value);

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
//    exApp.Visible := True;
    VarClear(exWks); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
end;

procedure TfmAgree2.dxBarButton128Click(Sender: TObject);
var                    i : integer;
                       Q : TADOQuery;
      SP_fact_sum_modify : TADOStoredProc;
         shaping_rate_id : integer;
begin
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT shaping_rate_id, contract_agent_cod as contract_cod, firm_agent_name as firm_customer_name');
  Q.SQL.Add('FROM view_shaping_rate WHERE bargain_id = ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1bargain_id.Index]));
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'shaping_rate_id', 'contract_cod', 'firm_customer_name');
  fmFilter._SetContract4FactIncChoose := True;
  if fmFilter.ShowModal = mrOk then begin
    shaping_rate_id := fmFilter.GetId;

    Screen.Cursor := crHourglass;
    SP_fact_sum_modify := TADOStoredProc.Create(nil);
    SP_fact_sum_modify.Connection := Fconnect;
    SP_fact_sum_modify.ProcedureName := 'sp_fact_sum_modify';

    for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount -1 do begin
      if cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1xml_reply_id.Index] = null then begin

        SP_fact_sum_modify.Parameters.Refresh;
        SP_fact_sum_modify.Parameters.ParamByName('@type_action'         ).Value := 3;
        SP_fact_sum_modify.Parameters.ParamByName('@fact_id'             ).Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
        try
          SP_fact_sum_modify.ExecProc;
        except
        end;

        SP_fact_sum_modify.Parameters.Refresh;
        SP_fact_sum_modify.Parameters.ParamByName('@type_action'         ).Value := 5;
        SP_fact_sum_modify.Parameters.ParamByName('@sum_type_name'       ).Value := '(Создано из факта)';
        SP_fact_sum_modify.Parameters.ParamByName('@fact_id'             ).Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
        SP_fact_sum_modify.Parameters.ParamByName('@shaping_rate_id'     ).Value := shaping_rate_id;

        try
          SP_fact_sum_modify.ExecProc;
        except
        end;

      end;
      ShowTextMessage('Осталось '+IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i)+' строк...', False);
    end;

    ShowTextMessage('Обновление данных...', False);
    RefreshQueryGrid(cxGrid1DBBandedTableView1, 'bargain_id');
    RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');

    SP_fact_sum_modify.Free;
    ShowTextMessage;
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.dxBarButton130Click(Sender: TObject);
var      Q, Q2, Q3 : TADOQuery;
    str_bargain_id : string;
                 i : integer;
       contract_id : integer;
SP_fact_sum_modify : TADOStoredProc;
begin
  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);


  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  if fmFilter.ShowModal = mrOk then begin
    Screen.Cursor := crHourGlass;
    contract_id := fmFilter.GetId;
    Q.SQL.Clear;
    Q.SQL.Add('SELECT * FROM bargain WHERE bargain_id in (' + str_bargain_id + ')');
    Q.Open;

    SP_fact_sum_modify := TADOStoredProc.Create(nil);
    SP_fact_sum_modify.Connection := Fconnect;
    SP_fact_sum_modify.ProcedureName := 'sp_fact_sum_modify';

    Q2 := TADOQuery.Create(nil);
    Q2.Connection := Fconnect;
    Q3 := TADOQuery.Create(nil);
    Q3.Connection := Fconnect;
    while not Q.Eof do begin

      Q2.SQL.Clear;
      Q2.SQL.Add('SELECT TOP 1 shaping_rate_id FROM shaping_rate WHERE contract_agent_id = ' + IntToStr(contract_id) + ' AND bargain_id = ' + IntToStr(Q.FieldByName('bargain_id').AsInteger));
      Q2.Open;

      Q3.SQL.Clear;
      Q3.SQL.Add('SELECT fact_id FROM view_bargain_fact WHERE bargain_id = ' + IntToStr(Q.FieldByName('bargain_id').AsInteger) + ' and set_main = 1 and xml_reply_id is null');
      Q3.Open;

      while not Q3.Eof do begin
        SP_fact_sum_modify.Parameters.Refresh;
        SP_fact_sum_modify.Parameters.ParamByName('@type_action'         ).Value := 3;
        SP_fact_sum_modify.Parameters.ParamByName('@fact_id'             ).Value := Q3.FieldByName('fact_id').Value;
        try
          SP_fact_sum_modify.ExecProc;
        except
        end;

        SP_fact_sum_modify.Parameters.Refresh;
        SP_fact_sum_modify.Parameters.ParamByName('@type_action'         ).Value := 5;
        SP_fact_sum_modify.Parameters.ParamByName('@sum_type_name'       ).Value := '(Создано из факта)';
        SP_fact_sum_modify.Parameters.ParamByName('@fact_id'             ).Value := Q3.FieldByName('fact_id').Value;
        SP_fact_sum_modify.Parameters.ParamByName('@shaping_rate_id'     ).Value := Q2.FieldByName('shaping_rate_id').Value;

        try
          SP_fact_sum_modify.ExecProc;
        except
        end;

        ShowTextMessage('Осталось '+IntToStr(Q.RecordCount - Q.RecNo)+' перевозок...' + #10 + 'Осталось '+IntToStr(Q3.RecordCount - Q3.RecNo)+' вагонов...', False);
        Q3.Next;
      end;
      Q.Next;
      ShowTextMessage('Осталось '+IntToStr(Q.RecordCount - Q.RecNo)+' перевозок...', False);
    end;
    Q2.Free;
    Q3.Free;
    SP_fact_sum_modify.Free;
    ShowTextMessage;
    Screen.Cursor := crDefault;
  end;
  Q.Free;
end;

procedure TfmAgree2.dxBarButton131Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks, exWks2    : Variant;
  sp_Report_return_tarif : TADOStoredProc;
  sp_Report_return_rate  : TADOStoredProc;
  sp_Report_return_zfto  : TADOStoredProc;
  Query_tmp, Q           : TADOQuery;
  recNo, recNo2, i       : integer;
  contract_agent_id      : integer;
  fact_id, fact_no       : integer;
  shaping_rate_id        : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..2] of string;
  str_expeditor_eng      : array [1..2] of string;
//  firm_property_cod      : string;
  PrintArea              : string;
  zfto_score_id          : integer;
  rec_begin              : integer;
  sum_str, nds_str       : string;
  str_zfto_score_id      : string;

  sum_rep                : Variant;
  currency_id            : integer; // Валюта отчета (Валюта подрядчика)
  brief_name             : string;
  client_currency_id     : integer; // Валюта эквивалента (Валюта договора клиента)
  client_brief_name      : string;

  firm_self_name_eng     : string;
  firm_customer_name_eng : string;

  cod_shablon            : integer;
  sp_name                : string;
begin
  // 229 - Отчет по возмещению тарифа (RUS+ENG)
  // 239 - Отчет по возмещению тарифа (RUS+ENG) (Вознаграждение)

  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT firm_property_cod,');
  Q.SQL.Add('type_firm_self_name, type_firm_customer_name, ');
  Q.SQL.Add('type_firm_self_name_translit, type_firm_customer_name_translit ');
  Q.SQL.Add('FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Q.Open;

//  firm_property_cod:= Q.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Q.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Q.FieldByName('type_firm_customer_name').AsString;

  str_expeditor_eng[1] := Q.FieldByName('type_firm_self_name_translit').AsString;
  str_expeditor_eng[2] := Q.FieldByName('type_firm_customer_name_translit').AsString;

  Q.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Подрядчик, чьи расходы перевыставляем';
  if fmFilter.ShowModal = mrOk then begin

    contract_agent_id := fmFilter.GetId;

    // Проверка на одну валюту для всех выбранных подрядчиков
    // Без проверки (сами виноваты, если получится бред)
    // Берем первую попавшеюся валюту в качестве наименования колонок
    Query_tmp := TADOQuery.Create(nil);
    Query_tmp.Connection := Fconnect;
    Query_tmp.SQL.Add('SELECT DISTINCT currency_id, brief_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ') AND contract_agent_id = ' + IntToStr(contract_agent_id));
    Query_tmp.Open;
    currency_id := Query_tmp.FieldByName('currency_id').AsInteger;
    brief_name  := Query_tmp.FieldByName('brief_name').AsString;
    Query_tmp.Free;

    // Имя ХП
    case cod_shablon of
      229, 239: sp_name := 'sp_Report_return_tarif_KHT_GCIE';
      else sp_name := 'sp_Report_return_tarif_2';
    end;

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 3 {RUS+ENG}, ACT_SET_EXCHANGE or ACT_SET_ADDSIGN or ACT_SET_SCOREZFTOFROMFACTINC or ACT_SET_ALLPARAMFROMFACT, -9, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    Query_tmp := TADOQuery.Create(nil);
    Query_tmp.Connection := Fconnect;
    Query_tmp.SQL.Add('SELECT ISNULL(NULLIF(firm_name_eng, ''''), firm_name_short) as firm_name_eng FROM firm WHERE firm_id = :firm_id');
    Query_tmp.Close;
    Query_tmp.Parameters.ParamByName('firm_id').Value := retActSettings[12][0];
    Query_tmp.Open;
    firm_self_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
    Query_tmp.Close;
    Query_tmp.Parameters.ParamByName('firm_id').Value := SP_Agree.FieldByName('firm_customer').AsInteger;
    Query_tmp.Open;
    firm_customer_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
    Query_tmp.Free;

    // Запомним валюту договора клиента (она возвращается из процедуры SaveActsBegin)
    client_currency_id := retActSettings[7][0];
    client_brief_name  := retActSettings[7][1];
    // В качестве валюты отчета запишем валюту подрядчика (ибо отчет формируется по этой валюте)
    retActSettings[7]  := VarArrayOf([currency_id, brief_name]);

    // Составим список перечней и если их болше 1, то предложим выбор
    ShowTextMessage('Получение списка перечней...', False);
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := sp_name;
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := null;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 7;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_ppfromfact'           ).Value := retActSettings[6][10];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;
    ShowTextMessage;

    if sp_Report_return_zfto.RecordCount = 0 then str_zfto_score_id := '';
    if sp_Report_return_zfto.RecordCount = 1 then str_zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').AsString;
    if sp_Report_return_zfto.RecordCount > 1 then begin
      fmFilter := TfmFilter.Create(0, sp_Report_return_zfto, 'zfto_score_id', 'ktgrm_cod', 'ktgrm_text');
      fmFilter._SetChooseZFTO4Report := True;
      if fmFilter.ShowModal = mrOk then
        str_zfto_score_id := fmFilter._GetStrId
      else
        str_zfto_score_id := '';
    end;
    sp_Report_return_zfto.Free;

    // Запомним выбор для формирования с\ф
    retActSettings[15] := str_zfto_score_id;
    ShowTextMessage;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];
    exWks2 := exWkb.WorkSheets[2];
    //exApp.Visible := True;
    // для ускорения - отключимся от принтера
    try
      exWks2.Select;
      exApp.ActiveWindow.View := 1;
      exWks.Select;
      exApp.PrintCommunication := False;
    except
    end;

    // Заполняем шапку и подписи

    exWks.Range['B2'].Value := 'о произведенных расходах, подлежащих возмещению, по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                               'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                               'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' + #10#10 +
                               'of executed expenses to be refuned under Agreement № ' + SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + '' + #10 +
                               'between ' + firm_self_name_eng + ' and ' + firm_customer_name_eng + '' + #10 +
                               'over the period from ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' till ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + '';
    exWks.Range['S3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

    exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                               ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                               ', с другой стороны, составили настоящий Отчет о нижеследующем :' + #10 +
                               firm_self_name_eng + ', on the one part, hereinafter refferd to as the "' + str_expeditor_eng[1] + '", through its ' + VarToStr(retActSettings[4][5]) +
                               ', and ' + firm_customer_name_eng + ', on the other part, hereinafter refferd to as the "' + str_expeditor_eng[2] + '", represented by ' + VarToStr(retActSettings[5][5]) +
                               ', have concluded the present Expence report of providing services as follows:' + #10;

    exWks.Range['B6'].Value := '1. ' + str_expeditor[1] + ' во исполнение обязательств по договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г. понес следующие расходы, подлежащие возмещению:' + #10 +
                               '1. ' + str_expeditor_eng[1] + ' while executing his obligations under the Agreement № ' + SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + ' have had the following expenses to be refunded:';

    exWks.Range['B31'].Value := 'Настоящий Отчет составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                                SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                                'This Expens report is made in two originals (each original for each of the Parties), and to be an integral part the Contract № '+
                                SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + '';

    exWks.Range['B12'].Value := 'ВСЕГО подлежит возмещению в адрес ' + VarToStr(retActSettings[12][1]) + ' / In total to be refunded to ' + firm_self_name_eng + '';

    exWks.Range['B34'].Value := VarToStr(retActSettings[12][1]);
    exWks.Range['N34'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

    // Подписанты
    if retActSettings[13][2] = True then begin
      exWks.Range['B36'].Value := retActSettings[14][1];
      exWks.Range['B37'].Value := retActSettings[14][2];
      exWks.Range['E36'].Value := retActSettings[13][1];
    end else
      exWks.Range['B36:I37'].ClearContents;
    if retActSettings[13][5] = True then begin
      exWks.Range['B39'].Value := retActSettings[14][4];
      exWks.Range['B40'].Value := retActSettings[14][5];
      exWks.Range['E39'].Value := retActSettings[13][4];
    end else
      exWks.Range['B39:I40'].ClearContents;
    if retActSettings[13][8] = True then begin
      exWks.Range['N36'].Value := retActSettings[14][7];
      exWks.Range['N37'].Value := retActSettings[14][8];
      exWks.Range['Q36'].Value := retActSettings[13][7];
    end else
      exWks.Range['N36:R37'].ClearContents;
    if retActSettings[13][11] = True then begin
      exWks.Range['N39'].Value := retActSettings[14][10];
      exWks.Range['N40'].Value := retActSettings[14][11];
      exWks.Range['Q39'].Value := retActSettings[13][10];
    end else
      exWks.Range['N39:R40'].ClearContents;

    if retActSettings[6][2] = True then begin
      // 1. Раздвинем область печати на 4 строки вниз
      PrintArea := exWks.PageSetup.PrintArea;
      if PrintArea <> '' then begin
        PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
        exWks.PageSetup.PrintArea := WideString(PrintArea);
      end;
      // 2. Копируем формат
      exWks.Rows['36:39'].Copy;
      exWks.Rows['43:46'].PasteSpecial(Paste:=-4122);
      // 3. Добавим нужные нам строки
      exWks.Range['B43'].Value := 'Дата подписания';
      exWks.Range['B44'].Value := 'Date of signing';
      exWks.Range['B46'].Value := '"____" __________________ 201__';
      exWks.Range['N43'].Value := 'Дата подписания';
      exWks.Range['N44'].Value := 'Date of signing';
      exWks.Range['N46'].Value := '"____" __________________ 201__';
    end;
    // Наименование валюты
    if (currency_id <> 3) then begin
      exWks.Range['M9'].Value := 'Сумма без НДС, ' + brief_name + #10'Total amount without Russian VAT, ' + brief_name;
      exWks.Range['N9'].Value := 'Сумма НДС, ' + brief_name + #10'Russian VAT, ' + brief_name;
      exWks.Range['O9'].Value := 'Сумма с НДС, ' + brief_name + #10'Samount with Russian VAT, ' + brief_name;
    end;
    // Валюта эквивалента
    if (cod_shablon = 229) or (cod_shablon = 239) then begin
      // Валюта подрядчика
      exWks.Range['T8'].Value := 'Курс ' + brief_name + #10'Rate ' + brief_name;
      if currency_id = 3 then exWks.Columns['T:T'].Hidden := True; // Если рубли, то скрываем столбец
      // Валюта клиента
      exWks.Range['U8'].Value := 'Курс ' + client_brief_name + #10'Rate ' + client_brief_name;
      if client_currency_id = 3 then exWks.Columns['U:U'].Hidden := True; // Если рубли, то скрываем столбец
      if client_currency_id <> 3 then exWks.Range['V8'].Value := 'Итого подлежит возмещению в ' + client_brief_name + #10'Total amount to refund';
    end;

    ShowTextMessage('Подготовка данных ...', False);

    // Нижня таблица - присутсвует только для Отчете № 239
    if (cod_shablon = 239)then begin
      exWks.Range['B17'].Value := '2. Расчет стоимости  Платежно-финансовых услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ''#10'2. The payment and financial services for the transportation of the goods under customs control';
      if (client_currency_id <> 3) then begin
        exWks.Range['G26'].Value := client_brief_name;
      end;
      exWks.Range['D18'].Value := 'Стоимость услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', согласованая в Приложении'#10'The cost of services of the Freight ' + str_expeditor_eng[1] + ' agreed by the Addendum';
      exWks.Range['E18'].Value := 'Общая стоимость услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', ' + VarToStr(iif(client_currency_id <> 3, client_brief_name, 'росс. рубль')) + ''#10'Total cost of services of the Freight ' + str_expeditor_eng[1] + ', ' + VarToStr(iif(client_currency_id <> 3, client_brief_name, 'RUR')) + '';
      exWks.Range['F18'].Value := 'Фактически понесенные ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьом', 'ем') + ' расходы, ' + VarToStr(iif(client_currency_id <> 3, client_brief_name, 'росс. рубль')) + ''#10'The actual ' + str_expeditor_eng[1] + '’s costs, ' + VarToStr(iif(client_currency_id <> 3, client_brief_name, 'RUR')) + '';
      exWks.Range['G18'].Value := 'Платежно-финансовые услуги, как разница гр.3 и гр.4, ' + VarToStr(iif(client_currency_id <> 3, client_brief_name, 'росс. рубль')) + ''#10'The payment and financial services, as the difference between column 3 and column 4, ' + VarToStr(iif(client_currency_id <> 3, client_brief_name, 'RUR')) + '';
      exWks.Range['B26'].Value := 'Итого подлежит оплате в адрес ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ':'#10'Total payable to the freight ' + str_expeditor_eng[1] + ':';

      sp_Report_return_rate := TADOStoredProc.Create(nil);
      sp_Report_return_rate.Connection := Fconnect;
      sp_Report_return_rate.ProcedureName := sp_name;
      sp_Report_return_rate.Parameters.Refresh;
      sp_Report_return_rate.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
      sp_Report_return_rate.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
      sp_Report_return_rate.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
      sp_Report_return_rate.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
      sp_Report_return_rate.Parameters.ParamByName('@type_result'              ).Value := 1;
      sp_Report_return_rate.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
      sp_Report_return_rate.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
      sp_Report_return_rate.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
      sp_Report_return_rate.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
      sp_Report_return_rate.CommandTimeout := 100;
      sp_Report_return_rate.Open;

      recNo := 1;
      while not sp_Report_return_rate.Eof do begin
        exWks.Rows[IntToStr(22 + recNo)].Insert;
        exWks.Rows[IntToStr(21 + recNo)].Copy;
        exWks.Rows[IntToStr(22 + recNo)].PasteSpecial(1);

        exWks.Range['C' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('route_name').AsString+ #10 + sp_Report_return_rate.FieldByName('route_name_ENG').AsString;
        exWks.Range['D' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('precalc_rate').Value;
        exWks.Range['E' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('client_sum').Value;
        exWks.Range['F' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('agent_sum').Value;
        exWks.Range['H' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('client_calc_weight').AsFloat;

        recNo := recNo + 1;
        ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_rate.RecordCount - sp_Report_return_rate.RecNo), False);
        sp_Report_return_rate.Next;
      end;

      exWks.Rows[IntToStr(21 + recNo)].Delete;
      exWks.Rows[IntToStr(21 + recNo)].Delete;

      exWks.Range[IntToStr(21 + 1) + ':' + IntToStr(21 + recNo)].EntireRow.AutoFit;
      recNo2 := 10 + recNo; // Это количество строк которые надо бобавить при автовыравнивании (для выравнивания и второй таблицы тоже)

      sp_Report_return_rate.Free;
    end else begin
      exWks.Rows['15:29'].Delete;
      recNo2 := 0;
    end;

    // Верхня таблица - повагонка
    sp_Report_return_tarif := TADOStoredProc.Create(nil);
    sp_Report_return_tarif.Connection := Fconnect;
    sp_Report_return_tarif.ProcedureName := sp_name;
    sp_Report_return_tarif.Parameters.Refresh;
    sp_Report_return_tarif.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_tarif.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_tarif.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_tarif.Parameters.ParamByName('@type_result'              ).Value := 0;
    sp_Report_return_tarif.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_tarif.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_tarif.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_tarif.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_tarif.CommandTimeout := 100;
    sp_Report_return_tarif.Open;

    recNo       := 1;
    fact_no     := 1;

    fact_id := -9; shaping_rate_id := -9;
    while not sp_Report_return_tarif.Eof do begin

      if (fact_id <> sp_Report_return_tarif.FieldByName('fact_id').Value) or (shaping_rate_id <> sp_Report_return_tarif.FieldByName('shaping_rate_id').Value) then begin
        fact_id := sp_Report_return_tarif.FieldByName('fact_id').Value;
        shaping_rate_id := sp_Report_return_tarif.FieldByName('shaping_rate_id').Value;
        exWks.Rows[IntToStr(10 + recNo)].Insert;
        exWks.Rows[IntToStr( 9 + recNo)].Copy;
        exWks.Rows[IntToStr(10 + recNo)].PasteSpecial(1);

        // Формулы
        exWks.Range['N' + IntToStr(9 + recNo)].Value := '=RC[1]*SUM(RC[-2])/(SUM(RC[-2])+100)';
        exWks.Range['M' + IntToStr(9 + recNo)].Value := '=RC[2]-RC[1]';

        exWks.Range['A' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('bargain_id').Value;
        exWks.Range['B' + IntToStr(9 + recNo)].Value := fact_no;
        exWks.Range['C' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('agreement_describe').AsString;
        exWks.Range['D' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('route_name').AsString + #10 + sp_Report_return_tarif.FieldByName('route_name_ENG').AsString;
        exWks.Range['E' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoETSNG_name').AsString + #10 + sp_Report_return_tarif.FieldByName('kargoETSNG_name_ENG').AsString;
        exWks.Range['F' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_document').AsString;
        exWks.Range['G' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_vagon').Value;
        exWks.Range['H' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_weight').AsFloat;
        exWks.Range['I' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('calc_weight').AsFloat;
        exWks.Range['J' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_from_to').Value;
        exWks.Range['K' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_delivery').Value;
        if sp_Report_return_tarif.FieldByName('date_delivery').IsNull then exWks.Range['K' + IntToStr(9 + recNo)].Value := '---';

        Query_NDS.Locate('nds_id', sp_Report_return_tarif.FieldByName('shaping_rate_nds_id').Value, []);
        exWks.Range['L' + IntToStr(9 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

        exWks.Range['O' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('precalc_sum').Value;
        exWks.Range['P' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_agent_name_full').AsString + #10 + sp_Report_return_tarif.FieldByName('firm_agent_name_ENG').AsString; //'ЦФТО ОАО "РЖД"';
        exWks.Range['Q' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_num').AsString;
        exWks.Range['R' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('ktgrm_text').AsString;
        if sp_Report_return_tarif.FieldByName('fact_date').IsNull = False then
          exWks.Range['S' + IntToStr(9 + recNo)].Value := FormatDateTime('dd.mm.yyyy',sp_Report_return_tarif.FieldByName('fact_date').Value)
        else
          exWks.Range['S' + IntToStr(9 + recNo)].Value := '';

        // Рублевый эквивалент
        if retActSettings[6][1] = True then begin
          exWks.Range['T' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('exchange_RUB_agent').Value;
          exWks.Range['U' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('exchange_RUB_client').Value;
        end;

        exWks.Range['W' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_customer_name').AsString;
        exWks.Range['W' + IntToStr(9 + recNo)].Font.ColorIndex := 2;

        recNo := recNo + 1;
        fact_no := fact_no + 1;
      end else begin
        exWks.Range['Q' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['Q' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('fact_num').AsString;
        exWks.Range['R' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['R' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('ktgrm_text').AsString;
        if sp_Report_return_tarif.FieldByName('fact_date').IsNull = False then
          exWks.Range['S' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['S' + IntToStr(9 + recNo - 1)].Value) + #10 + FormatDateTime('dd.mm.yyyy',sp_Report_return_tarif.FieldByName('fact_date').Value);
        exWks.Range['W' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['W' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('firm_customer_name').AsString;
      end;

      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_tarif.RecordCount - sp_Report_return_tarif.RecNo), False);
      sp_Report_return_tarif.Next;
    end;

    exWks.Range[IntToStr(9 + 1) + ':' + IntToStr(9 + recNo)].EntireRow.AutoFit;
    exWks.Columns['C:C'].EntireColumn.AutoFit;

    exWks.Rows[IntToStr(9 + recNo)].Delete;
    exWks.Rows[IntToStr(9 + recNo)].Delete;

    // Рублевый эквивалент
    if retActSettings[6][1] = False then
      exWks.Columns['T:V'].Delete;

    sum_rep := 0;
    try
      sum_rep := exWks.Range['O' + IntToStr(9 + recNo)].Value;
      if TVarData(sum_rep).VType = varError then
        sum_rep := 0;
    except
    end;

    // Второй лист - копия первого
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    exWks2.Rows['4:7'].Copy;
    exWks2.Rows['11:14'].PasteSpecial(1);

    exWks2.Range['F14'].Value := fact_no - 1;
    exWks2.Range['G14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    exWks2.Range['H14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    // Добавим нужное кол-во строк
    fact_no := fact_no - 1;
    if fact_no > 0 then
      exWks2.Rows['13:' + IntToStr(12 + fact_no)].Insert;
    exWks2.Rows['12'].Delete;
    exWks2.Rows['12'].Delete;
    // копируем колонки
    if fact_no > 0 then begin
      exWks.Range['Q10:Q' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['B12:B' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['S10:S' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['C12:C' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['R10:R' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['D12:D' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['F10:F' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['E12:E' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['G10:G' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['F12:F' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['N10:N' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['G12:G' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['O10:O' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['H12:H' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    end;
    exWks2.Columns['B:D'].WrapText := True;
    exWks2.Rows['11:' + IntToStr(11 + fact_no)].EntireRow.AutoFit;
    // сортировка
    exWks2.Range['B11:H' + IntToStr(11 + fact_no)].Sort(Key1 := exWks2.Range['B12'], Key2 := exWks2.Range['F12'], Header := 1);
    // разделяем на группы
    recNo := 1; rec_begin := 1;
    while recNo <= fact_no + 1 do begin
      if (exWks2.Range['B' + IntToStr(11 + recNo)].Value <> exWks2.Range['B' + IntToStr(11 + rec_begin)].Value)
      or (recNo = (fact_no + 1)) then begin
        exWks2.Rows[IntToStr(11 + rec_begin)].Insert;
        exWks2.Rows[IntToStr(12 + rec_begin)].Copy;
        exWks2.Rows[IntToStr(11 + rec_begin)].PasteSpecial(1);

        exWks2.Rows[IntToStr(12 + rec_begin) + ':' + IntToStr(11 + recNo)].Group;
        exWks2.Range['B' + IntToStr(11 + rec_begin)].Value := exWks2.Range['B' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['C' + IntToStr(11 + rec_begin)].Value := exWks2.Range['C' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['D' + IntToStr(11 + rec_begin)].Value := exWks2.Range['D' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['E' + IntToStr(11 + rec_begin)].Value := null;
        exWks2.Range['F' + IntToStr(11 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['G' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['H' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';

        inc(recNo);
        inc(fact_no);
        rec_begin := recNo;
      end;
      inc(recNo);
    end;

    // Второй лист - с-ф ЦФТО
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := sp_name;
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 4;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;

    recNo := 1;

    zfto_score_id := -9;
    rec_begin     := 0;
    sum_str := '';
    nds_str := '';
    while not sp_Report_return_zfto.Eof do begin
      exWks2.Rows[IntToStr(5 + recNo)].Insert;
      exWks2.Rows[IntToStr(4 + recNo)].Copy;
      exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);

      if zfto_score_id <> sp_Report_return_zfto.FieldByName('zfto_score_id').Value then begin

        if rec_begin <> 0 then begin
          exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
          exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          if sum_str = '' then
            sum_str := '=G' + IntToStr(4 + rec_begin)
          else
            sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
        end;

        rec_begin := recNo;
        zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
        exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
        exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
        recNo := recNo + 1;

        exWks2.Rows[IntToStr(5 + recNo)].Insert;
        exWks2.Rows[IntToStr(4 + recNo)].Copy;
        exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);
      end;

      exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
      exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
      exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
      exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
      exWks2.Range['E' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('number_doc').AsString;
      exWks2.Range['F' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('vagon_num').AsString;
      exWks2.Range['G' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('nds_rub').Value;
      exWks2.Range['H' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('sum_rub').Value;

      recNo := recNo + 1;
      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_zfto.RecordCount - sp_Report_return_zfto.RecNo), False);
      sp_Report_return_zfto.Next;
    end;

    if rec_begin <> 0 then begin
      exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
      exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      if sum_str = '' then
        sum_str := '=G' + IntToStr(4 + rec_begin)
      else
        sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
    end;

    exWks2.Outline.ShowLevels(1);
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Range['G' + IntToStr(4 + recNo)].Value := sum_str;
    exWks2.Range['H' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'H');
    exWks2.Range['F' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'F');

    exWks := exWkb.WorkSheets[1];
    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_rep);

    sp_Report_return_tarif.Free;
    sp_Report_return_zfto.Free;

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    VarClear(exWks); VarClear(exWks2); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
end;

procedure TfmAgree2.dxBarButton132Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks, exWks2    : Variant;
  sp_Report_return_tarif : TADOStoredProc;
  sp_Report_return_rate  : TADOStoredProc;
  sp_Report_return_zfto  : TADOStoredProc;
  Query_tmp, Q           : TADOQuery;
  recNo, i, recNo2       : integer;
  contract_agent_id      : integer;
  contract_agent_invoice_id : integer; // договор по которому берём сч-ф подрядчика
  fact_id, fact_no       : integer;
  shaping_rate_id        : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..2] of string;
  zfto_score_id          : integer;
  rec_begin              : integer;
  sum_str, nds_str       : string;
  str_zfto_score_id      : string;

  sum_rep                : Variant;
  currency_id            : integer; // Валюта отчета (Валюта подрядчика)
  brief_name             : string;
  client_currency_id     : integer; // Валюта эквивалента (Валюта договора клиента)
  client_brief_name      : string;
  ClientDS_distance   : TClientDataSet;

  _fmFilter              : TfmFilter;

  cod_shablon            : integer;
  sp_name                : string;
  PrintArea              : string;
begin
  // 190 - Отчет по возмещению тарифа (Вознаграждение)
  // 189 - Отчет по возмещению тарифа (Клиент)
  // 191 - Отчет по возмещению тарифа
  // 198 - Отчет по возмещению тарифа (для иностранного подрядчика/клиента)
  // 210 - Отчет по возмещению тарифа (для иностранного подрядчика/клиента, RUB)
  // 215 - Отчет по возмещению тарифа (Транзит)
  // 274 - Отчет по возмещению тарифа (Транзит, предоставление ПС)
  // 439 - Отчет по возмещению тарифа (НЗНП)
  // 440 - Отчет по возмещению тарифа (для иностранного подрядчика/клиента, НЗНП)

  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Close;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  _fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  _fmFilter._SetCaption := 'Контрагент, чьи расходы перевыставляем';
  if _fmFilter.ShowModal = mrOk then begin

    contract_agent_id := _fmFilter.GetId;
    if (cod_shablon = 189) then begin
      contract_agent_invoice_id := contract_agent_id; // Определяем договор подрядчика у которого есть сч-ф
      contract_agent_id := cxGrid1DBBandedTableView1contract_id.DataBinding.Field.AsInteger; // договор клиента, т.к. суммы в отчёте Клиента (без проверки, что могут быть разные Клиенты выделенных перевозок)
    end;
    // Проверка на одну валюту для всех выбранных подрядчиков
    // Без проверки (сами виноваты, если получится бред)
    // Берем первую попавшеюся валюту в качестве наименования колонок
    Query_tmp.SQL.Clear;
    Query_tmp.SQL.Add('SELECT DISTINCT currency_id, brief_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ') AND contract_agent_id = ' + IntToStr(contract_agent_id));
    Query_tmp.Open;
    currency_id := Query_tmp.FieldByName('currency_id').AsInteger;
    brief_name  := Query_tmp.FieldByName('brief_name').AsString;
    if currency_id = 3 then brief_name := 'росс. рубль';

    Query_tmp.Free;

    if (cod_shablon = 210) or (cod_shablon = 215) or (cod_shablon = 274) then begin
      // Отчет строится исключительно в рублях
      currency_id := 3;
      brief_name  := 'росс. рубль';
    end;

    // Имя ХП
    case cod_shablon of
      190, 191, 439, 189: sp_name := 'sp_Report_return_tarif_2';
      198, 440: sp_name := 'sp_Report_return_tarif_alien';
      210: sp_name := 'sp_Report_return_tarif_alien_rub';
      215, 274: sp_name := 'sp_Report_return_tarif_tranzit';
      else sp_name := 'sp_Report_return_tarif_2';
    end;

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1,
                        iif((cod_shablon = 198) or (cod_shablon = 210) or (cod_shablon = 215) or (cod_shablon = 274) or (cod_shablon = 440), ACT_SET_EXCHANGE, 0)
                        or ACT_SET_ADDSIGN
                        or ACT_SET_COPYREPORT
                        or iif((cod_shablon = 190) or (cod_shablon = 191) or (cod_shablon = 189) or (cod_shablon = 198) or (cod_shablon = 210) or (cod_shablon = 439) or (cod_shablon = 440), ACT_SET_ALLPARAMFROMFACT, 0)
                        or iif((cod_shablon = 190) or (cod_shablon = 191) or (cod_shablon = 89) or (cod_shablon = 439), ACT_SET_PP_FROMFACT, 0)  // ПП из ФАКТА
                        or ACT_SET_SCOREZFTOFROMFACTINC or ACT_SET_PRINTCOMMENT or ACT_SET_RECALC_DISTANCE
                        or iif((cod_shablon = 440), ACT_SET_COUNTRY_NAME, 0),
                        -9, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    // Запомним валюту договора клиента (она возвращается из процедуры SaveActsBegin)
    client_currency_id := retActSettings[7][0];
    client_brief_name  := retActSettings[7][1];
    // В качестве валюты отчета запишем валюту подрядчика (ибо отчет формируется по этой валюте)
    retActSettings[7]  := VarArrayOf([currency_id, brief_name]);

    // Составим список перечней и если их болше 1, то предложим выбор
    ShowTextMessage('Получение списка перечней...', False);
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := sp_name;
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_invoice_id').Value := iif(contract_agent_invoice_id=0, null, contract_agent_invoice_id);
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := null;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 7;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_ppfromfact'           ).Value := retActSettings[6][10];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;
    ShowTextMessage;

    if sp_Report_return_zfto.RecordCount = 0 then str_zfto_score_id := '';
    if sp_Report_return_zfto.RecordCount = 1 then str_zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').AsString;
    if sp_Report_return_zfto.RecordCount > 1 then begin
      _fmFilter := nil;
      _fmFilter := TfmFilter.Create(0, sp_Report_return_zfto, 'zfto_score_id', 'ktgrm_cod', 'ktgrm_text');
      _fmFilter._SetChooseZFTO4Report := True;
      if _fmFilter.ShowModal = mrOk then
        str_zfto_score_id := _fmFilter._GetStrId
      else
        str_zfto_score_id := '';
    end;
    sp_Report_return_zfto.Free;

    // Запомним выбор для формирования с\ф
    retActSettings[15] := str_zfto_score_id;
    ShowTextMessage;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];
    exWks2 := exWkb.WorkSheets[2];
    //exApp.Visible := True;
    // для ускорения - отключимся от принтера
    try
      exWks2.Select;
      exApp.ActiveWindow.View := 1;
      exWks.Select;
      exApp.PrintCommunication := False;
    except
    end;

    // Для всех отчетов делаем видимыми, а затем закрываем по данным с формы настройки
    // В шаблоне колонки спрятаны (так было раньше)
    exWks.Columns['F:G'].Hidden := False;
    // Перед заполнением спрячем не нужные колонки - если это необходимо
    if VarToStr(retActSettings[10]) <> '' then
      exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

    // Заполняем шапку и подписи

    exWks.Range['B2'].Value := 'о произведенных расходах, подлежащих возмещению, по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                               'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                               'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
    exWks.Range['V3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

    exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                               ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                               ', с другой стороны, составили настоящий Отчет о нижеследующем :';

    exWks.Range['B6'].Value := '1. ' + str_expeditor[1] + ' во исполнение обязательств по договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г. понес следующие расходы, подлежащие возмещению:';
    if (cod_shablon = 439) then
      exWks.Range['B6'].Value := '1. ' + str_expeditor[1] + ' во исполнение обязательств по договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г. понес следующие расходы по оплате провозных платежей по перевозке грузов по территории РФ:';
    if (cod_shablon = 440) then
      exWks.Range['B6'].Value := '1. ' + str_expeditor[1] + ' во исполнение обязательств по договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г. понес следующие расходы по оплате провозных платежей по перевозке грузов по территории ' + VarToStr(retActSettings[16]) + ':';

    exWks.Range['B31'].Value := 'Настоящий Отчет составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                                SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';


    exWks.Range['B12'].Value := 'ВСЕГО подлежит возмещению в адрес ' + VarToStr(retActSettings[12][1]);
    exWks.Range['B34'].Value := VarToStr(retActSettings[12][1]);
    exWks.Range['Q34'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

    // Подписанты
    if retActSettings[13][2] = True then begin
      exWks.Range['B36'].Value := VarToStr(retActSettings[14][1]);
      exWks.Range['E36'].Value := retActSettings[13][1];
    end else
      exWks.Range['B36:I36'].ClearContents;
    if retActSettings[13][5] = True then begin
      exWks.Range['B38'].Value := VarToStr(retActSettings[14][4]);
      exWks.Range['E38'].Value := retActSettings[13][4];
    end else
      exWks.Range['B38:I38'].ClearContents;
    if retActSettings[13][8] = True then begin
      exWks.Range['Q36'].Value := VarToStr(retActSettings[14][7]);
      exWks.Range['T36'].Value := retActSettings[13][7];
    end else
      exWks.Range['Q36:U36'].ClearContents;
    if retActSettings[13][11] = True then begin
      exWks.Range['Q38'].Value := VarToStr(retActSettings[14][10]);
      exWks.Range['T38'].Value := retActSettings[13][10];
    end else
      exWks.Range['Q38:U38'].ClearContents;
    // Если спрятаны колонки F:J (все три сразу), то расширим поле для подписанта
    if exWks.Columns['F:H'].Hidden = True then begin
      exWks.Range['E36:J36'].Merge;
      exWks.Range['E38:J38'].Merge;
    end;


    if retActSettings[6][2] = True then begin
      // 1. Раздвинем область печати на 4 строки вниз
      PrintArea := exWks.PageSetup.PrintArea;
      if PrintArea <> '' then begin
        PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
        exWks.PageSetup.PrintArea := WideString(PrintArea);
      end;
      // 2. Копируем формат
      exWks.Rows['36:38'].Copy;
      exWks.Rows['40:42'].PasteSpecial(Paste:=-4122);
      // 3. Добавим нужные нам строки
      exWks.Range['B40'].Value := 'Дата подписания';
      exWks.Range['B42'].Value := '"____" __________________ 201__';
      exWks.Range['Q40'].Value := 'Дата подписания';
      exWks.Range['Q42'].Value := '"____" __________________ 201__';
    end;

    // Наименование валюты
    if (currency_id <> 3) then begin
      exWks.Range['P9'].Value := 'Сумма без НДС, ' + brief_name;
      exWks.Range['Q9'].Value := 'Сумма НДС, ' + brief_name;
      exWks.Range['R9'].Value := 'Сумма с НДС, ' + brief_name;
      if (cod_shablon = 439) or (cod_shablon = 440) then
        exWks.Range['R9'].Value := 'Сумма в т.ч. НДС, ' + brief_name;
    end;
    // Валюта эквивалента
    if (cod_shablon = 198) or (cod_shablon = 210) or (cod_shablon = 215) or (cod_shablon = 274) or (cod_shablon = 440) then begin
      // Валюта подрядчика
      exWks.Range['W8'].Value := 'Курс ' + brief_name;
      if (cod_shablon = 440) then
        exWks.Range['W8'].Value := 'Курс ' + brief_name + #10'на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
      if currency_id = 3 then exWks.Columns['W:W'].Hidden := True; // Если рубли, то скрываем столбец
      // Валюта клиента
      exWks.Range['X8'].Value := 'Курс ' + client_brief_name;
      if (cod_shablon = 440) then
        exWks.Range['X8'].Value := 'Курс ' + client_brief_name + #10'на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
      if client_currency_id = 3 then exWks.Columns['X:X'].Hidden := True; // Если рубли, то скрываем столбец
      if client_currency_id <> 3 then exWks.Range['Y8'].Value := 'Итого подлежит возмещению в ' + client_brief_name;
    end;

    // Особые условия
    if (retActSettings[6][9] = True) then begin
      exWks.Rows['30'].Insert;
      exWks.Rows['31'].Copy;
      exWks.Rows['30'].PasteSpecial(1);

      exWks.Range['B30'].Value := ReplaceStr(VarToStr(retActSettings[11]), #13, '');
      AutoFitMergeCell(exWks.Range['B30']);
    end;

    ShowTextMessage('Подготовка данных ...', False);

    // Нижня таблица - присутсвует только для Отчете № 190 и 215 и 274
    if (cod_shablon = 190) or (cod_shablon = 215) or (cod_shablon = 274) then begin
      if (client_currency_id <> 3) then begin
        exWks.Range['client_brief_name'].Value := client_brief_name;
      end;
      exWks.Range['D18'].Value := 'Стоимость услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', согласованая в Приложении';
      exWks.Range['F18'].Value := '="Общая стоимость услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', "&client_brief_name';
      exWks.Range['I18'].Value := '="Фактически понесенные ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьом', 'ем') + ' расходы, "&client_brief_name';
      exWks.Range['B26'].Value := 'Итого подлежит оплате в адрес ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ':';

      sp_Report_return_rate := TADOStoredProc.Create(nil);
      sp_Report_return_rate.Connection := Fconnect;
      sp_Report_return_rate.ProcedureName := sp_name;
      sp_Report_return_rate.Parameters.Refresh;
      sp_Report_return_rate.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
      sp_Report_return_rate.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
      sp_Report_return_rate.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
      sp_Report_return_rate.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
      sp_Report_return_rate.Parameters.ParamByName('@type_result'              ).Value := 1;
      sp_Report_return_rate.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
      sp_Report_return_rate.Parameters.ParamByName('@set_ppfromfact'           ).Value := retActSettings[6][10];
      sp_Report_return_rate.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
      sp_Report_return_rate.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
      sp_Report_return_rate.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
      sp_Report_return_rate.CommandTimeout := 100;
      sp_Report_return_rate.Open;

      recNo := 1;
      while not sp_Report_return_rate.Eof do begin
        exWks.Rows[IntToStr(22 + recNo)].Insert;
        exWks.Rows[IntToStr(21 + recNo)].Copy;
        exWks.Rows[IntToStr(22 + recNo)].PasteSpecial(1);

        exWks.Range['C' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('route_name').AsString;
        exWks.Range['D' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('precalc_rate_nonds').Value;
        exWks.Range['E' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('precalc_rate').Value;
        exWks.Range['F' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('client_sum').Value;
        exWks.Range['J' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('agent_sum').Value;
        exWks.Range['M' + IntToStr(21 + recNo)].Value := sp_Report_return_rate.FieldByName('client_calc_weight').AsFloat;

        recNo := recNo + 1;
        ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_rate.RecordCount - sp_Report_return_rate.RecNo), False);
        sp_Report_return_rate.Next;
      end;

      exWks.Rows[IntToStr(21 + recNo)].Delete;
      exWks.Rows[IntToStr(21 + recNo)].Delete;

      exWks.Range[IntToStr(21 + 1) + ':' + IntToStr(21 + recNo)].EntireRow.AutoFit;
      recNo2 := 10 + recNo; // Это количество строк которые надо добавить при автовыравнивании (для выравнивания и второй таблицы тоже)

      sp_Report_return_rate.Free;
    end else begin
      exWks.Rows['15:29'].Delete;
      recNo2 := 0;
    end;

    // Верхня таблица - повагонка
    sp_Report_return_tarif := TADOStoredProc.Create(nil);
    sp_Report_return_tarif.Connection := Fconnect;
    sp_Report_return_tarif.ProcedureName := sp_name;
    sp_Report_return_tarif.Parameters.Refresh;
    sp_Report_return_tarif.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_tarif.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_invoice_id').Value := iif(contract_agent_invoice_id=0, null, contract_agent_invoice_id);
    sp_Report_return_tarif.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_tarif.Parameters.ParamByName('@type_result'              ).Value := 0;
    sp_Report_return_tarif.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_tarif.Parameters.ParamByName('@set_ppfromfact'           ).Value := retActSettings[6][10];
    sp_Report_return_tarif.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_tarif.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_tarif.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_tarif.CommandTimeout := 100;
    sp_Report_return_tarif.Open;

    ClientDS_distance := TClientDataSet.Create(nil);
    ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
    ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
    ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
    ClientDS_distance.CreateDataSet;
    ClientDS_distance.LogChanges := False;

    recNo       := 1;
    fact_no     := 1;

    fact_id := -9; shaping_rate_id := -9;
    while not sp_Report_return_tarif.Eof do begin

      if (fact_id <> sp_Report_return_tarif.FieldByName('fact_id').Value) or (shaping_rate_id <> sp_Report_return_tarif.FieldByName('shaping_rate_id').Value) then begin
        fact_id := sp_Report_return_tarif.FieldByName('fact_id').Value;
        shaping_rate_id := sp_Report_return_tarif.FieldByName('shaping_rate_id').Value;
        exWks.Rows[IntToStr(10 + recNo)].Insert;
        exWks.Rows[IntToStr( 9 + recNo)].Copy;
        exWks.Rows[IntToStr(10 + recNo)].PasteSpecial(1);

        // Формулы
        exWks.Range['Q' + IntToStr(9 + recNo)].Value := '=RC[1]*SUM(RC[-2])/(SUM(RC[-2])+100)';
        exWks.Range['P' + IntToStr(9 + recNo)].Value := '=RC[2]-RC[1]';

        exWks.Range['A' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('bargain_id').Value;
        exWks.Range['B' + IntToStr(9 + recNo)].Value := fact_no;
        exWks.Range['C' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('agreement_describe').AsString;
        exWks.Range['D' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('route_name').AsString;
        exWks.Range['E' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoETSNG_name').AsString;
        exWks.Range['F' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoETSNG_cod').AsString;
        exWks.Range['G' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoGNG_cod').AsString;

        exWks.Range['H' + IntToStr(9 + recNo)].Value := null;
        if exWks.Range['H:H'].EntireColumn.Hidden = False then begin
          // Заполняем, если колонка не спрятана
          // Расстояние
          if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([sp_Report_return_tarif.FieldByName('node_begin_cod').AsString, sp_Report_return_tarif.FieldByName('node_end_cod').AsString]), []) then begin
            ClientDS_distance.Append;
            ClientDS_distance.FieldByName('node_begin').AsString := sp_Report_return_tarif.FieldByName('node_begin_cod').AsString;
            ClientDS_distance.FieldByName('node_end').AsString   := sp_Report_return_tarif.FieldByName('node_end_cod').AsString;
            ClientDS_distance.FieldByName('distance').Value      := null;
            ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], sp_Report_return_tarif.FieldByName('date_from_to').Value);
            ClientDS_distance.Post;
          end;
          exWks.Range['H' + IntToStr(9 + recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
        end;

        exWks.Range['I' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_document').AsString;
        if sp_Report_return_tarif.FieldByName('vid_send').Value = 1 then // ВИД ОТПРАВКИ = Контейнерная (по версии Подрядчика)
          exWks.Range['J' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_konten').AsString
        else
          exWks.Range['J' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_vagon').Value;
        exWks.Range['K' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_weight').AsFloat;
        exWks.Range['L' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('calc_weight').AsFloat;
        exWks.Range['M' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_from_to').Value;
        exWks.Range['N' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_delivery').Value;
        if sp_Report_return_tarif.FieldByName('date_delivery').IsNull then exWks.Range['N' + IntToStr(9 + recNo)].Value := '---';

        Query_NDS.Locate('nds_id', sp_Report_return_tarif.FieldByName('shaping_rate_nds_id').Value, []);
        exWks.Range['O' + IntToStr(9 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

        exWks.Range['R' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('precalc_sum').Value;
//        exWks.Range['S' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_agent_name_full').AsString; //'ЦФТО ОАО "РЖД"';
        exWks.Range['S' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_zfto_score_name_full').AsString; //'ЦФТО ОАО "РЖД"';
        exWks.Range['T' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_num').AsString;
        exWks.Range['U' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('ktgrm_text').AsString;
        if sp_Report_return_tarif.FieldByName('fact_date').IsNull = False then
          exWks.Range['V' + IntToStr(9 + recNo)].Value := FormatDateTime('dd.mm.yyyy',sp_Report_return_tarif.FieldByName('fact_date').Value)
        else
          exWks.Range['V' + IntToStr(9 + recNo)].Value := '';

        // Рублевый эквивалент
        if retActSettings[6][1] = True then begin
          exWks.Range['W' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('exchange_RUB_agent').Value;
          exWks.Range['X' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('exchange_RUB_client').Value;
        end;

        exWks.Range['Z' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_customer_name').AsString;
        exWks.Range['Z' + IntToStr(9 + recNo)].Font.ColorIndex := 2;

        recNo := recNo + 1;
        fact_no := fact_no + 1;
      end else begin
        exWks.Range['T' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['T' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('fact_num').AsString;
        exWks.Range['U' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['U' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('ktgrm_text').AsString;
        if sp_Report_return_tarif.FieldByName('fact_date').IsNull = False then
          exWks.Range['V' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['V' + IntToStr(9 + recNo - 1)].Value) + #10 + FormatDateTime('dd.mm.yyyy',sp_Report_return_tarif.FieldByName('fact_date').Value);
        exWks.Range['Z' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['Z' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('firm_customer_name').AsString;
      end;

      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_tarif.RecordCount - sp_Report_return_tarif.RecNo), False);
      sp_Report_return_tarif.Next;
    end;

    exWks.Rows[IntToStr(9 + recNo)].Delete;
    exWks.Rows[IntToStr(9 + recNo)].Delete;

    exWks.Range[IntToStr(9 + 1) + ':' + IntToStr(9 + recNo)].EntireRow.AutoFit;
    // Выравнивание по ширине (суммы и вес)
    exWks.Range['B8:B' + IntToStr(9 + recNo)].Columns.AutoFit;
    exWks.Range['C8:C' + IntToStr(9 + recNo + recNo2)].Columns.AutoFit;
    exWks.Range['D8:D' + IntToStr(9 + recNo + recNo2)].Columns.AutoFit;
    exWks.Range['E8:E' + IntToStr(9 + recNo + recNo2)].Columns.AutoFit;
    exWks.Range['K9:L' + IntToStr(9 + recNo + recNo2)].Columns.AutoFit;
    exWks.Range['P9:R' + IntToStr(9 + recNo)].Columns.AutoFit;
    exWks.Range['S8:S' + IntToStr(9 + recNo)].Columns.AutoFit;
    exWks.Range['T9:T' + IntToStr(9 + recNo)].Columns.AutoFit;
    exWks.Range['V9:V' + IntToStr(9 + recNo)].Columns.AutoFit;

    // Рублевый эквивалент
    if retActSettings[6][1] = False then
      exWks.Columns['W:Y'].Delete;

    sum_rep := 0;
    try
      sum_rep := exWks.Range['R' + IntToStr(9 + recNo)].Value;
      if TVarData(sum_rep).VType = varError then
        sum_rep := 0;
    except
    end;

    // Второй лист - копия первого
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    exWks2.Rows['4:7'].Copy;
    exWks2.Rows['11:14'].PasteSpecial(1);

    exWks2.Range['F14'].Value := fact_no - 1;
    exWks2.Range['G14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    exWks2.Range['H14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    // Добавим нужное кол-во строк
    fact_no := fact_no - 1;
    if fact_no > 0 then
      exWks2.Rows['13:' + IntToStr(12 + fact_no)].Insert;
    exWks2.Rows['12'].Delete;
    exWks2.Rows['12'].Delete;
    // копируем колонки
    if fact_no > 0 then begin
      exWks.Range['T10:T' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['B12:B' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['V10:V' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['C12:C' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['U10:U' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['D12:D' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['I10:I' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['E12:E' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['J10:J' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['F12:F' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['Q10:Q' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['G12:G' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['R10:R' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['H12:H' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    end;
    exWks2.Columns['B:D'].WrapText := True;
    exWks2.Rows['11:' + IntToStr(11 + fact_no)].EntireRow.AutoFit;
    // сортировка
    exWks2.Range['B11:H' + IntToStr(11 + fact_no)].Sort(Key1 := exWks2.Range['B12'], Key2 := exWks2.Range['F12'], Header := 1);
    // разделяем на группы
    recNo := 1; rec_begin := 1;
    while recNo <= fact_no + 1 do begin
      if (exWks2.Range['B' + IntToStr(11 + recNo)].Value <> exWks2.Range['B' + IntToStr(11 + rec_begin)].Value)
      or (recNo = (fact_no + 1)) then begin
        exWks2.Rows[IntToStr(11 + rec_begin)].Insert;
        exWks2.Rows[IntToStr(12 + rec_begin)].Copy;
        exWks2.Rows[IntToStr(11 + rec_begin)].PasteSpecial(1);

        exWks2.Rows[IntToStr(12 + rec_begin) + ':' + IntToStr(11 + recNo)].Group;
        exWks2.Range['B' + IntToStr(11 + rec_begin)].Value := exWks2.Range['B' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['C' + IntToStr(11 + rec_begin)].Value := exWks2.Range['C' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['D' + IntToStr(11 + rec_begin)].Value := exWks2.Range['D' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['E' + IntToStr(11 + rec_begin)].Value := null;
        exWks2.Range['F' + IntToStr(11 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['G' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['H' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';

        inc(recNo);
        inc(fact_no);
        rec_begin := recNo;
      end;
      inc(recNo);
    end;

    // Второй лист - с-ф ЦФТО
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := sp_name;
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 4;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_ppfromfact'           ).Value := retActSettings[6][10];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;

    recNo := 1;

    zfto_score_id := -9;
    rec_begin     := 0;
    sum_str := '';
    nds_str := '';
    while not sp_Report_return_zfto.Eof do begin
      exWks2.Rows[IntToStr(5 + recNo)].Insert;
      exWks2.Rows[IntToStr(4 + recNo)].Copy;
      exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);

      if zfto_score_id <> sp_Report_return_zfto.FieldByName('zfto_score_id').Value then begin

        if rec_begin <> 0 then begin
          exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
          exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          if sum_str = '' then
            sum_str := '=G' + IntToStr(4 + rec_begin)
          else
            sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
        end;

        rec_begin := recNo;
        zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
        exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
        exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
        recNo := recNo + 1;

        exWks2.Rows[IntToStr(5 + recNo)].Insert;
        exWks2.Rows[IntToStr(4 + recNo)].Copy;
        exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);
      end;

      exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
      exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
      exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
      exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
      exWks2.Range['E' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('number_doc').AsString;
      exWks2.Range['F' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('vagon_num').AsString;
      exWks2.Range['G' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('nds_rub').Value;
      exWks2.Range['H' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('sum_rub').Value;

      recNo := recNo + 1;
      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_zfto.RecordCount - sp_Report_return_zfto.RecNo), False);
      sp_Report_return_zfto.Next;
    end;

    if rec_begin <> 0 then begin
      exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
      exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      if sum_str = '' then
        sum_str := '=G' + IntToStr(4 + rec_begin)
      else
        sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
    end;

    exWks2.Outline.ShowLevels(1);
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Range['G' + IntToStr(4 + recNo)].Value := sum_str;
    exWks2.Range['H' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'H');
    exWks2.Range['F' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'F');

    // Третий лист (по галочке)
    if retActSettings[6][3] = True then begin
      exWks.Copy(After := exWks2);
      exWks2 := exWkb.WorkSheets[3];
      exWks.Name := 'Отчет';
      exWks2.Name := 'Акт';
      // удалим лишнее имя
      exWks2.Names['acts_cod'].Delete;
      // заменяем Отчет на Акт
      exWks2.Cells.Replace('Отчет', 'Акт');

      exWks2.Range['B1'].Value := '="АКТ к Отчету № "&acts_cod&" от ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.' + '"';
    end;

    exWks := exWkb.WorkSheets[1];
    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_rep);

    ClientDS_distance.Free;
    sp_Report_return_tarif.Free;
    sp_Report_return_zfto.Free;

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    VarClear(exWks2); VarClear(exWks); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
end;

procedure TfmAgree2.dxBarButton133Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp, Q        : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  i                   : integer;
  contract_agent_id   : integer;

  cod_shablon         : integer;

  str_expeditor       : array [1..2] of string;
  str_expeditor_eng   : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  firm_self_name_eng     : string;
  firm_customer_name_eng : string;

  sp_name     : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  //231 = 'Акт оказанных услуг (тариф вознагр) - KHT-GCIE, RUS+ENG'

  if SP_Agree.Eof then exit;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT firm_property_cod,');
  Q.SQL.Add('type_firm_self_name, type_firm_customer_name, ');
  Q.SQL.Add('type_firm_self_name_translit, type_firm_customer_name_translit ');
  Q.SQL.Add('FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Q.Open;

//  firm_property_cod:= Q.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Q.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Q.FieldByName('type_firm_customer_name').AsString;

  str_expeditor_eng[1] := Q.FieldByName('type_firm_self_name_translit').AsString;
  str_expeditor_eng[2] := Q.FieldByName('type_firm_customer_name_translit').AsString;

  Q.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Подрядчик, чьи расходы перевыставляем';
  if fmFilter.ShowModal = mrOk then begin

    contract_agent_id := fmFilter.GetId;

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 3, ACT_SET_ADDSIGN or ACT_SET_ALLPARAMFROMFACT, -9, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    Query_tmp := TADOQuery.Create(nil);
    Query_tmp.Connection := Fconnect;
    Query_tmp.SQL.Add('SELECT ISNULL(NULLIF(firm_name_eng, ''''), firm_name_short) as firm_name_eng FROM firm WHERE firm_id = :firm_id');
    Query_tmp.Close;
    Query_tmp.Parameters.ParamByName('firm_id').Value := retActSettings[12][0];
    Query_tmp.Open;
    firm_self_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
    Query_tmp.Close;
    Query_tmp.Parameters.ParamByName('firm_id').Value := SP_Agree.FieldByName('firm_customer').AsInteger;
    Query_tmp.Open;
    firm_customer_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
    Query_tmp.Free;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];

    // Перед заполнением спрячем не нужные колонки - если это необходимо
    if VarToStr(retActSettings[10]) <> '' then
      exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

    // Заполняем шапку и подписи
    exWks.Range['C3'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                               'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                               'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' + #10 +
                               'to the Contract № ' + SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + '' + #10 +
                               'between ' + firm_self_name_eng + ' and ' + firm_customer_name_eng + '' + #10 +
                               'over the period from ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' till ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + '';

    exWks.Range['O4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]);

    exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                               ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                               ', с другой стороны, составили настоящий Отчет о нижеследующем :' + #10#10 +
                               firm_self_name_eng + ', on the one part, hereinafter refferd to as the "' + str_expeditor_eng[1] + '", through its ' + VarToStr(retActSettings[4][5]) +
                               ', and ' + firm_customer_name_eng + ', on the other part, hereinafter refferd to as the "' + str_expeditor_eng[2] + '", represented by ' + VarToStr(retActSettings[5][5]) +
                               ', have concluded the present Expence report of providing services as follows:' + #10;

    exWks.Range['B8'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' +
                               ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, указанные ниже, ' +
                               'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10#10 +
                               'over the period from ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' till ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + '.: ' +
                               'the ' + str_expeditor_eng[1] + ' had been rendered specified below, ' +
                               'in conformity with the Contract № ' + SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime);

    exWks.Range['B16'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.' + #10 +
                                'The above mentionned services fulfilled in full and in time. ' + str_expeditor_eng[2] + ' have now claims in terms of volume, quality, services duration.';
    exWks.Range['B17'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                                SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                                'This Act of provided services is made in two originals (each original for each of the Parties), and to be an integral part the Contract № ' +
                                SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + '';

    exWks.Range['B19'].Value := VarToStr(retActSettings[12][1]) + #10 + firm_self_name_eng;
    exWks.Range['I19'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 + firm_customer_name_eng;

    // Подписанты
    if retActSettings[13][2] = True then begin
      exWks.Range['B21'].Value := retActSettings[14][1];
      exWks.Range['B22'].Value := retActSettings[14][2];
      exWks.Range['E21'].Value := retActSettings[13][1];
    end else
      exWks.Range['B21:G22'].ClearContents;
    if retActSettings[13][5] = True then begin
      exWks.Range['B24'].Value := retActSettings[14][4];
      exWks.Range['B25'].Value := retActSettings[14][5];
      exWks.Range['E24'].Value := retActSettings[13][4];
    end else
      exWks.Range['B24:G25'].ClearContents;
    if retActSettings[13][8] = True then begin
      exWks.Range['I21'].Value := retActSettings[14][7];
      exWks.Range['I22'].Value := retActSettings[14][8];
      exWks.Range['N21'].Value := retActSettings[13][7];
    end else
      exWks.Range['I21:P22'].ClearContents;
    if retActSettings[13][11] = True then begin
      exWks.Range['I24'].Value := retActSettings[14][10];
      exWks.Range['I25'].Value := retActSettings[14][11];
      exWks.Range['N24'].Value := retActSettings[13][10];
    end else
      exWks.Range['I24:P25'].ClearContents;

    if retActSettings[6][2] = True then begin
      // 1. Раздвинем область печати на 4 строки вниз
      PrintArea := exWks.PageSetup.PrintArea;
      if PrintArea <> '' then begin
        PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
        exWks.PageSetup.PrintArea := WideString(PrintArea);
      end;
      // 2. Копируем формат
      exWks.Rows['21:24'].Copy;
      exWks.Rows['28:31'].PasteSpecial(Paste:=-4122);
      // 3. Добавим нужные нам строки
      exWks.Range['B28'].Value := 'Дата подписания';
      exWks.Range['B29'].Value := 'Date of signing';
      exWks.Range['B31'].Value := '"____" __________________ 201__';
      exWks.Range['J28'].Value := 'Дата подписания';
      exWks.Range['J29'].Value := 'Date of signing';
      exWks.Range['J31'].Value := '"____" __________________ 201__';
    end;

    if (retActSettings[7][0] <> 3) then begin
      exWks.Range['N11'].Value := 'Сумма без НДС, ' + VarToStr(retActSettings[7][1]) + #10'Total amount without Russian VAT, ' + VarToStr(retActSettings[7][1]);
      exWks.Range['O11'].Value := 'Сумма НДС, ' + VarToStr(retActSettings[7][1]) + #10'Russian VAT, ' + VarToStr(retActSettings[7][1]);
      exWks.Range['P11'].Value := 'Сумма с НДС, ' + VarToStr(retActSettings[7][1]) + #10'Total amount with Russian VAT, ' + VarToStr(retActSettings[7][1]);

      exWks.Range['K11'].Value := 'Ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' без НДС, ' + VarToStr(retActSettings[7][1]) + #10'rate of the "' + str_expeditor_eng[1] + '" whithout Russian VAT, ' + VarToStr(retActSettings[7][1]);
      exWks.Range['M11'].Value := 'Ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' с НДС, ' + VarToStr(retActSettings[7][1]) + #10'rate of the "' + str_expeditor_eng[1] + '" whith Russian VAT, ' + VarToStr(retActSettings[7][1]);
    end else begin
      exWks.Range['K11'].Value := 'Ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' без НДС, руб'#10'rate of the "' + str_expeditor_eng[1] + '" whithout Russian VAT, RUR';
      exWks.Range['M11'].Value := 'Ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' с НДС, руб'#10'rate of the "' + str_expeditor_eng[1] + '" whith Russian VAT, RUR';
    end;

    // ed_izm_cod = '001' // контейнер
    if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
      exWks.Range['H11'].Value := 'кол-во контейнеров'#10'quantity of containers';

    // Автоподбор по высоте
    AutoFitMergeCell(exWks.Range['B6']);
    AutoFitMergeCell(exWks.Range['B8']);
    AutoFitMergeCell(exWks.Range['B17']);

    // Данные отчета - перевозки
    ShowTextMessage('Подготовка данных ...', False);

    // Имя ХП
    case cod_shablon of
      231: sp_name := 'sp_Report_return_tarif_KHT_GCIE';
      else sp_name := 'sp_Report_return_tarif_2';
    end;

    SP_Balans_Detail := TADOStoredProc.Create(nil);
    SP_Balans_Detail.Connection := Fconnect;
    SP_Balans_Detail.ProcedureName := sp_name;
    SP_Balans_Detail.Parameters.Refresh;
    SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
    SP_Balans_Detail.Parameters.ParamByName('@contract_agent_id'  ).Value := contract_agent_id;
    SP_Balans_Detail.Parameters.ParamByName('@type_result'        ).Value := 3;
    SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
    SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
    SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact' ).Value := retActSettings[6][6];
    SP_Balans_Detail.CommandTimeout := 100;
    SP_Balans_Detail.Open;

    recNo := 1;
    while not SP_Balans_Detail.Eof do begin
      exWks.Rows[IntToStr(12 + recNo)].Insert;
      exWks.Rows[IntToStr(11 + recNo)].Copy;
      exWks.Rows[IntToStr(12 + recNo)].PasteSpecial(1);

      // Дату вставляем в столбец "А" (В столбец "B" стоит формула)
      exWks.Range['A' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period_service').AsDatetime;
      exWks.Range['C' + IntToStr(11 + recNo)].Value := recNo;
      exWks.Range['D' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString + #10 + SP_Balans_Detail.FieldByName('service_kind_ENG').AsString;
      exWks.Range['E' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('route_name').AsString + #10 + SP_Balans_Detail.FieldByName('route_name_ENG').AsString;
      exWks.Range['F' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['G' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString + #10 + SP_Balans_Detail.FieldByName('kargoETSNG_name_ENG').AsString;
      exWks.Range['H' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['I' + IntToStr(11 + recNo)].Value := null
      else
        exWks.Range['I' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['J' + IntToStr(11 + recNo)].Value := null
      else
        exWks.Range['J' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('shaping_rate_nds_id').Value, []);
      exWks.Range['L' + IntToStr(11 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;
      exWks.Range['P' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('client_sum').AsCurrency - SP_Balans_Detail.FieldByName('agent_sum').AsCurrency;

      inc(recNo);

      ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
      SP_Balans_Detail.Next;
    end;

    exWks.Rows[IntToStr(11 + recNo)].Delete;
    if recNo > 1 then
      exWks.Rows[IntToStr(11 + recNo)].Delete
    else begin
      exWks.Rows[IntToStr(11 + recNo)].ClearContents;
      recNo := 2;
    end;

    SP_Balans_Detail.Free;

    exWks.Range['A1'].Select;

    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['P' + IntToStr(11 + recNo)].Value);

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
//    exApp.Visible := True;
    VarClear(exWks); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
end;

procedure TfmAgree2.dxBarButton134Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp, Q        : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  i                   : integer;

  cod_shablon         : integer;

  str_expeditor       : array [1..2] of string;
  str_expeditor_eng   : array [1..2] of string;
  PrintArea           : string;

  firm_self_name_eng     : string;
  firm_customer_name_eng : string;

  sp_name     : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  //311 = 'Акт оказанных услуг (предоставление, RUS+ENG)'

  if SP_Agree.Eof then exit;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT firm_property_cod,');
  Q.SQL.Add('type_firm_self_name, type_firm_customer_name, ');
  Q.SQL.Add('type_firm_self_name_translit, type_firm_customer_name_translit ');
  Q.SQL.Add('FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Q.Open;

//  firm_property_cod:= Q.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Q.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Q.FieldByName('type_firm_customer_name').AsString;

  str_expeditor_eng[1] := Q.FieldByName('type_firm_self_name_translit').AsString;
  str_expeditor_eng[2] := Q.FieldByName('type_firm_customer_name_translit').AsString;

  Q.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 3, ACT_SET_ADDSIGN or ACT_SET_ALLPARAMFROMFACT);
  if retActSettings[0] = -9 then
    exit;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT ISNULL(NULLIF(firm_name_eng, ''''), firm_name_short) as firm_name_eng FROM firm WHERE firm_id = :firm_id');
  Query_tmp.Close;
  Query_tmp.Parameters.ParamByName('firm_id').Value := retActSettings[12][0];
  Query_tmp.Open;
  firm_self_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
  Query_tmp.Close;
  Query_tmp.Parameters.ParamByName('firm_id').Value := SP_Agree.FieldByName('firm_customer').AsInteger;
  Query_tmp.Open;
  firm_customer_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
  Query_tmp.Free;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['C3'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' + #10 +
                             'to the Contract № ' + SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + '' + #10 +
                             'between ' + firm_self_name_eng + ' and ' + firm_customer_name_eng + '' + #10 +
                             'over the period from ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' till ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + '';

  exWks.Range['O4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]);

  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                             ', с другой стороны, составили настоящий Отчет о нижеследующем :' + #10#10 +
                             firm_self_name_eng + ', on the one part, hereinafter refferd to as the "' + str_expeditor_eng[1] + '", through its ' + VarToStr(retActSettings[4][5]) +
                             ', and ' + firm_customer_name_eng + ', on the other part, hereinafter refferd to as the "' + str_expeditor_eng[2] + '", represented by ' + VarToStr(retActSettings[5][5]) +
                             ', have concluded the present Expence report of providing services as follows:' + #10;

  exWks.Range['B8'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10#10 +
                             'over the period from ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' till ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + '.: ' +
                             'the ' + str_expeditor_eng[1] + ' had been rendered specified below, ' +
                             'in conformity with the Contract № ' + SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime);

  exWks.Range['B17'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.' + #10 +
                              'The above mentionned services fulfilled in full and in time. ' + str_expeditor_eng[2] + ' have now claims in terms of volume, quality, services duration.';
  exWks.Range['B18'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                              SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                              'This Act of provided services is made in two originals (each original for each of the Parties), and to be an integral part the Contract № ' +
                              SP_Agree.FieldByName('contract_cod').AsString + ' d.d. ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + '';

  exWks.Range['B20'].Value := VarToStr(retActSettings[12][1]) + #10 + firm_self_name_eng;
  exWks.Range['J20'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 + firm_customer_name_eng;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B22'].Value := retActSettings[14][1];
    exWks.Range['B23'].Value := retActSettings[14][2];
    exWks.Range['E22'].Value := retActSettings[13][1];
  end else
    exWks.Range['B22:G23'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B25'].Value := retActSettings[14][4];
    exWks.Range['B26'].Value := retActSettings[14][5];
    exWks.Range['E25'].Value := retActSettings[13][4];
  end else
    exWks.Range['B25:G26'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['J22'].Value := retActSettings[14][7];
    exWks.Range['J23'].Value := retActSettings[14][8];
    exWks.Range['N22'].Value := retActSettings[13][7];
  end else
    exWks.Range['J22:P23'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['J25'].Value := retActSettings[14][10];
    exWks.Range['J26'].Value := retActSettings[14][11];
    exWks.Range['N25'].Value := retActSettings[13][10];
  end else
    exWks.Range['J25:P26'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['22:25'].Copy;
    exWks.Rows['29:32'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B29'].Value := 'Дата подписания';
    exWks.Range['B30'].Value := 'Date of signing';
    exWks.Range['B32'].Value := '"____" __________________ 201__';
    exWks.Range['J29'].Value := 'Дата подписания';
    exWks.Range['J30'].Value := 'Date of signing';
    exWks.Range['J32'].Value := '"____" __________________ 201__';
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['N11'].Value := 'Сумма без НДС, ' + VarToStr(retActSettings[7][1]) + #10'Total amount without Russian VAT, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['O11'].Value := 'Сумма НДС, ' + VarToStr(retActSettings[7][1]) + #10'Russian VAT, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['P11'].Value := 'Сумма с НДС, ' + VarToStr(retActSettings[7][1]) + #10'Total amount with Russian VAT, ' + VarToStr(retActSettings[7][1]);

    exWks.Range['K11'].Value := 'Ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' без НДС, ' + VarToStr(retActSettings[7][1]) + #10'rate of the "' + str_expeditor_eng[1] + '" whithout Russian VAT, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['M11'].Value := 'Ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' с НДС, ' + VarToStr(retActSettings[7][1]) + #10'rate of the "' + str_expeditor_eng[1] + '" whith Russian VAT, ' + VarToStr(retActSettings[7][1]);
  end else begin
    exWks.Range['K11'].Value := 'Ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' без НДС, руб'#10'rate of the "' + str_expeditor_eng[1] + '" whithout Russian VAT, RUR';
    exWks.Range['M11'].Value := 'Ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' с НДС, руб'#10'rate of the "' + str_expeditor_eng[1] + '" whith Russian VAT, RUR';
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['H11'].Value := 'кол-во контейнеров'#10'quantity of containers';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B6']);
  AutoFitMergeCell(exWks.Range['B8']);
  AutoFitMergeCell(exWks.Range['B18']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  // Имя ХП
  case cod_shablon of
    311: sp_name := 'sp_act_report_basic_SFH';
    else sp_name := 'sp_act_report_basic_SFH';
  end;

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := sp_name;
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'        ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'      ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'         ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'           ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'        ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'       ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact' ).Value := retActSettings[6][6];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(13 + recNo)].Insert;
    exWks.Rows[IntToStr(12 + recNo)].Copy;
    exWks.Rows[IntToStr(13 + recNo)].PasteSpecial(1);

    // Дату вставляем в столбец "А" (В столбец "B" стоит формула)
    exWks.Range['A' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
    exWks.Range['C' + IntToStr(12 + recNo)].Value := recNo;
    exWks.Range['D' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString + #10 + SP_Balans_Detail.FieldByName('service_kind_ENG').AsString;
    if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
      exWks.Range['E' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString +
      #10 + SP_Balans_Detail.FieldByName('node_begin_name_ENG').AsString + SP_Balans_Detail.FieldByName('node_end_name_ENG').AsString
    else
      exWks.Range['E' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString +
      #10 + SP_Balans_Detail.FieldByName('node_begin_name_ENG').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name_ENG').AsString;
    exWks.Range['F' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
    exWks.Range['G' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString + #10 + SP_Balans_Detail.FieldByName('kargoETSNG_name_ENG').AsString;
    exWks.Range['H' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

    if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
      exWks.Range['I' + IntToStr(12 + recNo)].Value := null
    else
      exWks.Range['I' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks.Range['J' + IntToStr(12 + recNo)].Value := null
    else
      exWks.Range['J' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['L' + IntToStr(12 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

    exWks.Range['K' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('rate_no_nds').AsCurrency;
    exWks.Range['M' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;

    exWks.Range['P' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(12 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(12 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(12 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['P' + IntToStr(12 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);

end;

procedure TfmAgree2.dxBarButton135Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks, exWks2    : Variant;
  sp_Report_return_tarif : TADOStoredProc;
  sp_Report_return_zfto  : TADOStoredProc;
  Query_tmp, Q           : TADOQuery;
  Query_Contract         : TADOQuery;
  Query_Exchange         : TADOQuery;
  recNo, i, cnt_invoice  : integer;
  contract_agent_id      : integer;
  contract_agent_rep_id  : integer;
  fact_id, fact_no       : integer;
  shaping_rate_id        : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..2] of string;
  zfto_score_id          : integer;
  rec_begin              : integer;
  sum_str, nds_str       : string;
  str_zfto_score_id      : string;

  sum_rep                : Variant;
  currency_id            : integer;
  brief_name             : string;

  cod_shablon            : integer;
begin
  // 194 - Отчет по возмещению тарифа (Подрядчики).xls
  // 201 - Отчет по возмещению простоя (Подрядчики).xls
  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Кому перевыставляем (Исполнитель)';
  if fmFilter.ShowModal = mrOk then begin
    contract_agent_rep_id := fmFilter.GetId;
  end else begin
    Q.Free;
    Screen.Cursor := crDefault;
    Application.MessageBox('Не выбран подрядчик', 'ВНИМАНИЕ', MB_OK);
    Exit;
  end;
  fmFilter.Free;


  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_rep_id));
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Close;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  // Проверка на одну валюту для всех выбранных подрядчиков
  Query_tmp.SQL.Clear;
  Query_tmp.SQL.Add('SELECT DISTINCT currency_id, brief_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ') AND contract_agent_id = ' + IntToStr(contract_agent_rep_id));
  Query_tmp.Open;
  // Без проверки (сами виноваты, если получится бред)
  // Берем первую попавшеюся валюту в качестве наименования колонок
//  if Query_tmp.RecordCount <> 1 then begin
//    Application.MessageBox('У выбранного подрядчика для всех Перевозок должна быть указана одна валюта!',
//                           'Внимание! Акт не может быть сформирован',
//                           MB_ICONEXCLAMATION or MB_OK);
//    exit;
//  end;
  currency_id := Query_tmp.FieldByName('currency_id').AsInteger;
  brief_name  := Query_tmp.FieldByName('brief_name').AsString;
  Query_tmp.Free;


  Screen.Cursor := crHourglass;
  Q.Close;
  Q.SQL.Clear;
  Q.SQL.Add('SELECT DISTINCT z.contract_id, f.firm_name, c.contract_cod');
  Q.SQL.Add('from view_zfto_score_rights z INNER JOIN contract c ON z.contract_id = c.contract_id');
  Q.SQL.Add('INNER JOIN firm f ON c.firm_customer = f.firm_id');
  //SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ')');// AND contract_agent_id <> ' + IntToStr(contract_agent_rep_id));
  Q.Open;
  Screen.Cursor := crDefault;

  fmFilter := TfmFilter.Create(0, Q, 'contract_id', 'contract_cod', 'firm_name');
  fmFilter._SetCaption := 'Подрядчик чьи с\ф попадут в отчет';
  if fmFilter.ShowModal = mrOk then begin

    contract_agent_id := fmFilter.GetId;

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ALLPARAMFROMFACT or ACT_SET_SCOREZFTOFROMFACTINC, contract_agent_rep_id, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    retActSettings[7] := VarArrayOf([currency_id, brief_name]);

    // Составим список перечней и если их болше 1, то предложим выбор
    ShowTextMessage('Получение списка перечней...', False);
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := 'sp_Report_return_tarif_2';
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_rep_id;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_invoice_id').Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := null;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 7;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;
    ShowTextMessage;

    if sp_Report_return_zfto.RecordCount = 0 then str_zfto_score_id := '';
    if sp_Report_return_zfto.RecordCount = 1 then str_zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').AsString;
    if sp_Report_return_zfto.RecordCount > 1 then begin
      fmFilter := TfmFilter.Create(0, sp_Report_return_zfto, 'zfto_score_id', 'ktgrm_cod', 'ktgrm_text');
      fmFilter._SetChooseZFTO4Report := True;
      if fmFilter.ShowModal = mrOk then
        str_zfto_score_id := fmFilter._GetStrId
      else
        str_zfto_score_id := '';
    end;
    sp_Report_return_zfto.Free;

    // Запомним выбор для формирования с\ф
    retActSettings[15] := str_zfto_score_id;
    ShowTextMessage;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];
    exWks2 := exWkb.WorkSheets[2];
   //exApp.Visible := True;
    // для ускорения - отключимся от принтера
    try
      exWks2.Select;
      exApp.ActiveWindow.View := 1;
      exWks.Select;
      exApp.PrintCommunication := False;
    except
    end;

    // Заполняем шапку и подписи
    Query_Contract := TADOQuery.Create(nil);
    Query_Contract.Connection := Fconnect;
    Query_Contract.SQL.Add('SELECT *, date_begin as contract_date_begin FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_rep_id));
    Query_Contract.Open;

    exWks.Range['B2'].Value := 'о произведенных расходах, подлежащих возмещению, по Договору № ' + Query_Contract.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Contract.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                               'между ' + VarToStr(retActSettings[12][1]) + ' и ' + Query_Contract.FieldByName('firm_customer_name_short').AsString + #10 +
                               'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
    exWks.Range['AL3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

    exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                               ', с одной стороны, и ' + Query_Contract.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                               ', с другой стороны, составили настоящий Отчет о нижеследующем :';

    exWks.Range['B6'].Value := '"' + str_expeditor[1] + '" во исполнение обязательств по договору № ' + Query_Contract.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Contract.FieldByName('contract_date_begin').AsDateTime) + 'г. предъявляет к возмещению  расходы по оплате ж/д тарифа: ';  // за возврат порожних вагонов (письмо Киреевой от 02.03.21)

    exWks.Range['B31'].Value := 'Настоящий Отчет составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                                Query_Contract.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Contract.FieldByName('contract_date_begin').AsDateTime) + 'г.';


    exWks.Range['B12'].Value := 'ВСЕГО подлежит возмещению в адрес ' + VarToStr(retActSettings[12][1]);
    exWks.Range['B34'].Value := VarToStr(retActSettings[12][1]);
    exWks.Range['AI34'].Value := Query_Contract.FieldByName('firm_customer_name_short').AsString;

    // Подписанты
    if retActSettings[13][2] = True then begin
      exWks.Range['B36'].Value := VarToStr(retActSettings[14][1]) + ' ______________________________';
      exWks.Range['M36'].Value := retActSettings[13][1];
    end else
      exWks.Range['B36:M36'].ClearContents;
    if retActSettings[13][5] = True then begin
      exWks.Range['B38'].Value := VarToStr(retActSettings[14][4]) + ' ______________________________';
      exWks.Range['M38'].Value := retActSettings[13][4];
    end else
      exWks.Range['B38:M38'].ClearContents;
    if retActSettings[13][8] = True then begin
      exWks.Range['AI36'].Value := VarToStr(retActSettings[14][7]) + ' ______________________________';
      exWks.Range['AK36'].Value := retActSettings[13][7];
    end else
      exWks.Range['AI36:AK36'].ClearContents;
    if retActSettings[13][11] = True then begin
      exWks.Range['AI38'].Value := VarToStr(retActSettings[14][10]) + ' ______________________________';
      exWks.Range['AK38'].Value := retActSettings[13][10];
    end else
      exWks.Range['AI38:AK38'].ClearContents;

    // Наименование валюты
    if (currency_id <> 3) then begin
      exWks.Range['AB9'].Value := 'Сумма без НДС, ' + brief_name;
      exWks.Range['AD9'].Value := 'Сумма НДС, ' + brief_name;
      exWks.Range['AF9'].Value := 'Сумма с НДС, ' + brief_name;
    end;

    ShowTextMessage('Подготовка данных ...', False);

    exWks.Rows['15:29'].Delete;

    sp_Report_return_tarif := TADOStoredProc.Create(nil);
    sp_Report_return_tarif.Connection := Fconnect;
    sp_Report_return_tarif.ProcedureName := 'sp_Report_return_tarif_2';
    sp_Report_return_tarif.Parameters.Refresh;
    sp_Report_return_tarif.Parameters.ParamByName('@str_bargain_id'            ).Value := str_bargain_id;
    sp_Report_return_tarif.Parameters.ParamByName('@acts_type_cod'             ).Value := cod_shablon;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_id'         ).Value := contract_agent_rep_id;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_invoice_id' ).Value := contract_agent_id;
    sp_Report_return_tarif.Parameters.ParamByName('@str_zfto_score_id'         ).Value := str_zfto_score_id;
    sp_Report_return_tarif.Parameters.ParamByName('@type_result'               ).Value := 0;
    sp_Report_return_tarif.Parameters.ParamByName('@set_routefromfact'         ).Value := retActSettings[6][4];
    sp_Report_return_tarif.Parameters.ParamByName('@set_kargofromfact'         ).Value := retActSettings[6][5];
    sp_Report_return_tarif.Parameters.ParamByName('@set_weightfromfact'        ).Value := retActSettings[6][6];
    sp_Report_return_tarif.Parameters.ParamByName('@set_scorezftofromfactinc'  ).Value := retActSettings[6][8];
    sp_Report_return_tarif.Open;


    recNo       := 1;
    fact_no     := 1;
    cnt_invoice := 0;

    fact_id := -9; shaping_rate_id := -9;
    while not sp_Report_return_tarif.Eof do begin

      if (fact_id <> sp_Report_return_tarif.FieldByName('fact_id').Value) or (shaping_rate_id <> sp_Report_return_tarif.FieldByName('shaping_rate_id').Value) then begin
        if cnt_invoice <> 0 then begin
          exWks.Range[ 'B'+IntToStr(9 + recNo - cnt_invoice) +  ':B'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'C'+IntToStr(9 + recNo - cnt_invoice) +  ':D'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'E'+IntToStr(9 + recNo - cnt_invoice) +  ':H'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'I'+IntToStr(9 + recNo - cnt_invoice) +  ':L'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'M'+IntToStr(9 + recNo - cnt_invoice) +  ':N'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'O'+IntToStr(9 + recNo - cnt_invoice) +  ':Q'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'R'+IntToStr(9 + recNo - cnt_invoice) +  ':S'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'T'+IntToStr(9 + recNo - cnt_invoice) +  ':U'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'V'+IntToStr(9 + recNo - cnt_invoice) +  ':W'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'X'+IntToStr(9 + recNo - cnt_invoice) +  ':Y'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range[ 'Z'+IntToStr(9 + recNo - cnt_invoice) + ':AA'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range['AB'+IntToStr(9 + recNo - cnt_invoice) + ':AC'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range['AD'+IntToStr(9 + recNo - cnt_invoice) + ':AE'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range['AF'+IntToStr(9 + recNo - cnt_invoice) + ':AG'+IntToStr(9 + recNo - 1)].Merge;
          exWks.Range['AH'+IntToStr(9 + recNo - cnt_invoice) + ':AH'+IntToStr(9 + recNo - 1)].Merge;

          exWks.Range[ 'B'+IntToStr(9 + recNo - cnt_invoice) +  ':B'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
          exWks.Range[ 'E'+IntToStr(9 + recNo - cnt_invoice) +  ':H'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4131;
          exWks.Range[ 'M'+IntToStr(9 + recNo - cnt_invoice) +  ':N'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
          exWks.Range[ 'O'+IntToStr(9 + recNo - cnt_invoice) +  ':Q'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
          exWks.Range[ 'R'+IntToStr(9 + recNo - cnt_invoice) +  ':S'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
          exWks.Range[ 'T'+IntToStr(9 + recNo - cnt_invoice) +  ':U'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
          exWks.Range[ 'V'+IntToStr(9 + recNo - cnt_invoice) +  ':W'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
          exWks.Range[ 'X'+IntToStr(9 + recNo - cnt_invoice) +  ':Y'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
          exWks.Range[ 'Z'+IntToStr(9 + recNo - cnt_invoice) + ':AA'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
          exWks.Range['AB'+IntToStr(9 + recNo - cnt_invoice) + ':AC'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4152;
          exWks.Range['AD'+IntToStr(9 + recNo - cnt_invoice) + ':AE'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4152;

          //exWks.Range['AD' + IntToStr(9 + recNo - cnt_invoice)].Value := '=RC[2]*SUM(RC[-4])/(SUM(RC[-4])+100)';   ./Excel округдяет по другому
          exWks.Range['AD' + IntToStr(9 + recNo - cnt_invoice)].Value := '=ROUND(RC[2]*SUM(RC[-4])/(SUM(RC[-4])+100), 2)';
          exWks.Range['AB' + IntToStr(9 + recNo - cnt_invoice)].Value := '=RC[4]-RC[2]';
        end;

        cnt_invoice := 1;
        fact_id := sp_Report_return_tarif.FieldByName('fact_id').Value;
        shaping_rate_id := sp_Report_return_tarif.FieldByName('shaping_rate_id').Value;
        exWks.Rows[IntToStr(10 + recNo)].Insert;
        exWks.Rows[IntToStr( 9 + recNo)].Copy;
        exWks.Rows[IntToStr(10 + recNo)].PasteSpecial(1);

        exWks.Range['A' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('bargain_id').Value;
        exWks.Range['B' + IntToStr(9 + recNo)].Value := fact_no;
        exWks.Range['C' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('agent_agreement_describe').AsString;
        exWks.Range['E' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('route_name').AsString;
        exWks.Range['I' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoETSNG_name').AsString;
        exWks.Range['M' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_document').AsString;
        exWks.Range['O' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_vagon').Value;
        exWks.Range['R' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_weight').AsFloat;
        exWks.Range['T' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('calc_weight').AsFloat;
        exWks.Range['V' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_from_to').Value;
        exWks.Range['X' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_delivery').Value;
        if sp_Report_return_tarif.FieldByName('date_delivery').IsNull then exWks.Range['X' + IntToStr(9 + recNo)].Value := '---';

        Query_NDS.Locate('nds_id', sp_Report_return_tarif.FieldByName('shaping_rate_nds_id').Value, []);
        exWks.Range['Z' + IntToStr(9 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

        exWks.Range['AF' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('precalc_sum').Value;
        exWks.Range['AH' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_zfto_score_name_full').AsString; //'ЦФТО ОАО "РЖД"';

        exWks.Range['AI' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_num').AsString;
        exWks.Range['AK' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('ktgrm_text').AsString;
        exWks.Range['AL' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_date').Value;
        exWks.Range['AN' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_customer_name').AsString;
        exWks.Range['AN' + IntToStr(9 + recNo)].Font.ColorIndex := 2;

        // высота строки объединённых колонок (по колонке Груз)
        ExcelAutoFitCells(exWks, 9 + recNo, 9, 12);

        recNo := recNo + 1;
        fact_no := fact_no + 1;
      end else begin
        exWks.Rows[IntToStr(10+ recNo)].Insert;
        exWks.Rows[IntToStr( 9+ recNo)].Copy;
        exWks.Rows[IntToStr(10+ recNo)].PasteSpecial(1);
        cnt_invoice := cnt_invoice + 1;
        exWks.Range['AI' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_num').AsString;
        exWks.Range['AK' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('ktgrm_text').AsString;
        exWks.Range['AL' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_date').Value;
        exWks.Range['AN' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_zfto_score_name_full').AsString;
        exWks.Range['AN' + IntToStr(9 + recNo)].Font.ColorIndex := 2;
        recNo := recNo + 1;
      end;


      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_tarif.RecordCount - sp_Report_return_tarif.RecNo), False);
      sp_Report_return_tarif.Next;
    end;


    if cnt_invoice <> 0 then begin
      exWks.Range[ 'B'+IntToStr(9 + recNo - cnt_invoice) +  ':B'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'C'+IntToStr(9 + recNo - cnt_invoice) +  ':D'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'E'+IntToStr(9 + recNo - cnt_invoice) +  ':H'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'M'+IntToStr(9 + recNo - cnt_invoice) +  ':N'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'I'+IntToStr(9 + recNo - cnt_invoice) +  ':L'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'O'+IntToStr(9 + recNo - cnt_invoice) +  ':Q'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'R'+IntToStr(9 + recNo - cnt_invoice) +  ':S'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'T'+IntToStr(9 + recNo - cnt_invoice) +  ':U'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'V'+IntToStr(9 + recNo - cnt_invoice) +  ':W'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'X'+IntToStr(9 + recNo - cnt_invoice) +  ':Y'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range[ 'Z'+IntToStr(9 + recNo - cnt_invoice) + ':AA'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range['AB'+IntToStr(9 + recNo - cnt_invoice) + ':AC'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range['AD'+IntToStr(9 + recNo - cnt_invoice) + ':AE'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range['AF'+IntToStr(9 + recNo - cnt_invoice) + ':AG'+IntToStr(9 + recNo - 1)].Merge;
      exWks.Range['AH'+IntToStr(9 + recNo - cnt_invoice) + ':AH'+IntToStr(9 + recNo - 1)].Merge;

      exWks.Range[ 'B'+IntToStr(9 + recNo - cnt_invoice) +  ':B'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
      exWks.Range[ 'E'+IntToStr(9 + recNo - cnt_invoice) +  ':H'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4131;
      exWks.Range[ 'M'+IntToStr(9 + recNo - cnt_invoice) +  ':N'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
      exWks.Range[ 'O'+IntToStr(9 + recNo - cnt_invoice) +  ':Q'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
      exWks.Range[ 'R'+IntToStr(9 + recNo - cnt_invoice) +  ':S'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
      exWks.Range[ 'T'+IntToStr(9 + recNo - cnt_invoice) +  ':U'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
      exWks.Range[ 'V'+IntToStr(9 + recNo - cnt_invoice) +  ':W'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
      exWks.Range[ 'X'+IntToStr(9 + recNo - cnt_invoice) +  ':Y'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
      exWks.Range[ 'Z'+IntToStr(9 + recNo - cnt_invoice) + ':AA'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4108;
      exWks.Range['AB'+IntToStr(9 + recNo - cnt_invoice) + ':AC'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4152;
      exWks.Range['AD'+IntToStr(9 + recNo - cnt_invoice) + ':AE'+IntToStr(9 + recNo - 1)].HorizontalAlignment := -4152;

//    exWks.Range['AD' + IntToStr(9 + recNo - cnt_invoice)].Value := '=RC[2]*SUM(RC[-4])/(SUM(RC[-4])+100)';     ./ настоящий Excel округляет по другому
      exWks.Range['AD' + IntToStr(9 + recNo - cnt_invoice)].Value := '=ROUND(RC[2]*SUM(RC[-4])/(SUM(RC[-4])+100), 2)';
      exWks.Range['AB' + IntToStr(9 + recNo - cnt_invoice)].Value := '=RC[4]-RC[2]';
    end;

//    exWks.Range[IntToStr(9 + 1) + ':' + IntToStr(9 + recNo)].EntireRow.AutoFit;

    exWks.Rows[IntToStr(9 + recNo)].Delete;
    exWks.Rows[IntToStr(9 + recNo)].Delete;

    // Прячем колонки
    if VarToStr(retActSettings[10]) <> '' then
      exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

    sum_rep := 0;
    try
      sum_rep := exWks.Range['AF' + IntToStr(9 + recNo)].Value;
      if TVarData(sum_rep).VType = varError then
        sum_rep := 0;
    except
    end;


    // Второй лист - копия первого
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    exWks2.Rows['4:7'].Copy;
    exWks2.Rows['11:14'].PasteSpecial(1);

    exWks2.Range['F14'].Value := fact_no - 1;
    exWks2.Range['G14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    exWks2.Range['H14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    // Добавим нужное кол-во строк
    fact_no := fact_no - 1;
    if fact_no > 0 then
      exWks2.Rows['13:' + IntToStr(12 + fact_no)].Insert;
    exWks2.Rows['12'].Delete;
    exWks2.Rows['12'].Delete;
    // копируем колонки
    if fact_no > 0 then begin
      exWks.Range['AI10:AI' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['B12:B' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['AL10:AL' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['C12:C' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['AK10:AK' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['D12:D' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['M10:M' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['E12:E' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['O10:O' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['F12:F' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['AD10:AD' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['G12:G' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['AF10:AF' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['H12:H' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    end;
    exWks2.Columns['B:D'].WrapText := True;
    exWks2.Rows['11:' + IntToStr(11 + fact_no)].EntireRow.AutoFit;
    // сортировка
    exWks2.Range['B11:H' + IntToStr(11 + fact_no)].Sort(Key1 := exWks2.Range['B12'], Key2 := exWks2.Range['F12'], Header := 1);
    // разделяем на группы
    recNo := 1; rec_begin := 1;
    while recNo <= fact_no + 1 do begin
      if (exWks2.Range['B' + IntToStr(11 + recNo)].Value <> exWks2.Range['B' + IntToStr(11 + rec_begin)].Value)
      or (recNo = (fact_no + 1)) then begin
        exWks2.Rows[IntToStr(11 + rec_begin)].Insert;
        exWks2.Rows[IntToStr(12 + rec_begin)].Copy;
        exWks2.Rows[IntToStr(11 + rec_begin)].PasteSpecial(1);

        exWks2.Rows[IntToStr(12 + rec_begin) + ':' + IntToStr(11 + recNo)].Group;
        exWks2.Range['B' + IntToStr(11 + rec_begin)].Value := exWks2.Range['B' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['C' + IntToStr(11 + rec_begin)].Value := exWks2.Range['C' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['D' + IntToStr(11 + rec_begin)].Value := exWks2.Range['D' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['E' + IntToStr(11 + rec_begin)].Value := null;
        exWks2.Range['F' + IntToStr(11 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['G' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['H' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';

        inc(recNo);
        inc(fact_no);
        rec_begin := recNo;
      end;
      inc(recNo);
    end;

    // Второй лист - с-ф ЦФТО
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := 'sp_Report_return_tarif_2';
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'            ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'             ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'         ).Value := contract_agent_rep_id;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_invoice_id' ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'         ).Value := str_zfto_score_id;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'               ).Value := 4;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'         ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'         ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'        ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc'  ).Value := retActSettings[6][8];
    sp_Report_return_zfto.Open;

    recNo := 1;

    zfto_score_id := -9;
    rec_begin     := 0;
    sum_str := '';
    nds_str := '';
    while not sp_Report_return_zfto.Eof do begin
      exWks2.Rows[IntToStr(5 + recNo)].Insert;
      exWks2.Rows[IntToStr(4 + recNo)].Copy;
      exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);

      if zfto_score_id <> sp_Report_return_zfto.FieldByName('zfto_score_id').Value then begin

        if rec_begin <> 0 then begin
          exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
          exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          if sum_str = '' then
            sum_str := '=G' + IntToStr(4 + rec_begin)
          else
            sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
        end;

        rec_begin := recNo;
        zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
        exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
        exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
        recNo := recNo + 1;

        exWks2.Rows[IntToStr(5 + recNo)].Insert;
        exWks2.Rows[IntToStr(4 + recNo)].Copy;
        exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);
      end;

      exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
      exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
      exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
      exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
      exWks2.Range['E' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('number_doc').AsString;
      exWks2.Range['F' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('vagon_num').AsString;
      exWks2.Range['G' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('nds_rub').Value;
      exWks2.Range['H' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('sum_rub').Value;

      recNo := recNo + 1;
      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_zfto.RecordCount - sp_Report_return_zfto.RecNo), False);
      sp_Report_return_zfto.Next;
    end;

    if rec_begin <> 0 then begin
      exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
      exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      if sum_str = '' then
        sum_str := '=G' + IntToStr(4 + rec_begin)
      else
        sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
    end;

    exWks2.Outline.ShowLevels(1);
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Range['G' + IntToStr(4 + recNo)].Value := sum_str;
    exWks2.Range['H' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'H');
    exWks2.Range['F' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'F');

    exWks := exWkb.WorkSheets[1];
    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_rep);

    sp_Report_return_tarif.Free;
    sp_Report_return_zfto.Free;
    Query_Contract.Free;

//    exWks.Range['A1'].Select;
//
//    // для ускорения - отключимся от принтера
//    try
//      exWks2.Select;
//      exApp.ActiveWindow.View := 3;
//      exWks.Select;
//      exApp.PrintCommunication := True;
//    except
//    end;

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
//    exApp.Visible := True;
    VarClear(exWks); VarClear(exWks2); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
  Query_Exchange.Free;
end;

procedure TfmAgree2.dxBarButton136Click(Sender: TObject);
begin
  FiltercxGrid4ListID(cxGrid1DBBandedTableView1);
end;

procedure TfmAgree2.dxBarButton138Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recXls              : integer;
  str_bargain_id      : string;
  str_head_txt        : string;
  str_agreement       : string;

  ClientDS_distance   : TClientDataSet;
  str_expeditor       : array [1..2] of string;
  nds_rate            : Currency;
  cod_shablon         : integer;

  fld_node            : string;
begin
  //cod_shablon := TComponent(Sender).Tag;
  case TComponent(Sender).Tag of
    -100: cod_shablon := 237;
    -200: cod_shablon := 237;
    -300: cod_shablon := 237;

    284 : cod_shablon := 284;
    445 : cod_shablon := 445;

  end;

  // 237 = 'Акт оказанных услуг (РН-Транс, Новокубышевская)'
  // 284 = 'Акт оказанных услуг (ТрансСинергия)'
  // 445 = 'Акт оказанных услуг (РН-Транс, Новый Уренгой)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTEFROMFACT or ACT_SET_RECALC_DISTANCE or ACT_SET_KARGOFROMFACT or ACT_SET_DATEDELIVERY);
  if retActSettings[0] = -9 then
    exit;

  if retActSettings[6][4] = True then begin
    fld_node := 'fact_node';
  end else begin
    fld_node := 'bargain_node';
  end;

  // Валюта всегда рубли
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  case TComponent(Sender).Tag of
    -100: str_head_txt := 'внутрироссийской перевозки грузов';
    -200: str_head_txt := 'перевозки грузов в порты';
    -300: str_head_txt := 'международной перевозки грузов';

    284 : str_head_txt := 'перевозки грузов';
    445 : str_head_txt := 'внутрироссийской перевозки грузов';
  end;

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['B3'].Value := 'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B4'].Value := 'к Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['B5'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  exWks.Range['N6'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B9'].Value := '    Мы, нижеподписавшиеся, представитель ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', в лице ' + VarToStr(retActSettings[4][2]) + ', с одной стороны' +
                             ', и представитель ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ', в лице ' + VarToStr(retActSettings[5][2]) + ', с другой стороны' +
                             ', составили настоящий Акт о том, что ' + str_expeditor[1] + ' оказал Услуги по предоставлению железнодорожного подвижного состава для осуществления ' + str_head_txt + ' ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ':';

  case IndexText(SP_Agree.FieldByName('ed_izm_cod').AsString, ['000', '001', '002', '004']) of
         // ed_izm_cod = '000' // тонны (тн)
    0 :  exWks.Range['L11'].Value := 'Ставка перевозки, руб./тн'#10'(без НДС)';
         // ed_izm_cod = '001' // контейнер (конт)
    1 :  exWks.Range['L11'].Value := 'Ставка перевозки, руб./конт'#10'(без НДС)';
         // ed_izm_cod = '002' // вагон (вагон)
    2 :  exWks.Range['L11'].Value := 'Ставка перевозки, руб./вагон'#10'(без НДС)';
         // ed_izm_cod = '004' // вагоно-сутки (сутки)
    3 :  exWks.Range['L11'].Value := 'Ставка, руб./сутки'#10'(без НДС)';
    else exWks.Range['L11'].Value := 'Ставка перевозки, руб.'#10'(без НДС)';
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B9']);

  exWks.Range['D27'].Value := 'от "' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + '"';
  exWks.Range['M27'].Value := 'от "' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + '"';

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['D28'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['D29'].Value := '_____________________ ' + VarToStr(retActSettings[13][1]);
  end else
    exWks.Range['D28:E29'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['M28'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['M29'].Value := '_____________________ ' + VarToStr(retActSettings[13][7]);
  end else
    exWks.Range['M28:N29'].ClearContents;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@set_datedelivery'        ).Value  := retActSettings[6][12];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;


  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recXls := 13;
  str_agreement := '';
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := SP_Balans_Detail.recNo;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName(fld_node + '_begin_name').AsString;
    exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName(fld_node + '_end_name').AsString;
    exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['G' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;

    if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
      exWks.Range['I' + IntToStr(recXls)].Value := null
    else
      exWks.Range['I' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

    exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;

    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName(fld_node + '_begin_cod').AsString, SP_Balans_Detail.FieldByName(fld_node + '_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName(fld_node + '_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName(fld_node + '_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
      ClientDS_distance.Post;
    end;
    exWks.Range['K' + IntToStr(recXls)].Value := ClientDS_distance.FieldByName('distance').Value;

    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;

    exWks.Range['L' + IntToStr(recXls)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsFloat * 100) / (100 + nds_rate), -2);
    // Сумма высчитывается по фурмулам в Экселе (Браташенко И. - 21.07.14)

    // Сумма без ндс - зададим формулу в зависимости от типа перевозки
    case IndexText(SP_Balans_Detail.FieldByName('bargain_ed_izm_cod').AsString, ['000', '001', '002', '004']) of
           // ed_izm_cod = '000' // тонны (тн)
      0 :  exWks.Range['M' + IntToStr(recXls)].Value := '=ROUND(RC[-4]*RC[-1],2)';
           // ed_izm_cod = '001' // контейнер (конт)
      1 :  exWks.Range['M' + IntToStr(recXls)].Value := '=RC[-1]';
           // ed_izm_cod = '002' // вагон (вагон)
      2 :  exWks.Range['M' + IntToStr(recXls)].Value := '=RC[-1]';
           // ed_izm_cod = '004' // вагоно-сутки (сутки)
      3 :  exWks.Range['M' + IntToStr(recXls)].Value := '=RC[-1]*' + IntToStr(SP_Balans_Detail.FieldByName('quantity').AsInteger);
      else exWks.Range['M' + IntToStr(recXls)].Value := '=RC[-1]';
    end;

    //exWks.Range['O' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa').Value;
    exWks.Range['P' + IntToStr(recXls)].Value := nds_rate;

    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // при необходимости удаляем лишнии записи
  if recXls > 13 then begin
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].Delete;
  end else begin
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].ClearContents;
    inc(recXls, 2);
  end;

  // убираем формулы (только для 237)
  if (cod_shablon = 237) then begin
    exWks.Range['B13:O' + IntToStr(recXls-1)].Copy;
    exWks.Range['B13:O' + IntToStr(recXls-1)].PasteSpecial(Paste:=-4163);
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  // str_agreement
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT DISTINCT doc_id, doc_describe, doc_image_date');
  Query_tmp.SQL.Add('FROM view_doc_blob JOIN bargain');
  Query_tmp.SQL.Add('ON doc_id = agreement_id AND doc_type_cod in (''2'') AND doc_describe is not null');
  Query_tmp.SQL.Add('AND bargain.bargain_id IN (' + str_bargain_id + ')');
  Query_tmp.SQL.Add('ORDER BY doc_id');
  Query_tmp.Open;
  str_agreement := '';
  while not Query_tmp.Eof do begin
    if str_agreement <> '' then str_agreement := str_agreement + ', ';
    str_agreement := str_agreement + Query_tmp.FieldByName('doc_describe').AsString;
//    if not Query_tmp.FieldByName('doc_image_date').IsNull then
//      str_agreement := str_agreement + ' от ' + FormatDateTime('dd.mm.yyyy', Query_tmp.FieldByName('doc_image_date').AsDateTime) + ' г.';
    Query_tmp.Next;
  end;

  if str_agreement <> '' then
    exWks.Range['str_agreement'].Value := 'В Графе 11, указывается стоимость услуг, предусмотренная Приложением № ' + str_agreement + ' к настоящему договору.'
  else
    exWks.Range['str_agreement'].Value := null;

  Query_tmp.Free;

  // Сумма прописью
  exWks.Range['str_sum_act'].Value := '(' + GetSumScript_RUS(exWks.Range['sum_act'].Value, 3) + ')';
  exWks.Range['str_sum_nds'].Value := '(' + GetSumScript_RUS(exWks.Range['sum_nds'].Value, 3) + ')';

  exApp.CutCopyMode := False;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['sum_act'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton190Click(Sender: TObject);
var
  retActSettings      : Variant;

  str_bargain_id      : string;

  contract_agent_id   : integer;
  contract_agent_cod  : string;
  firm_agent_name     : string;
  contract_agent_date : TDate;
  currency_id         : integer;
  brief_name          : string;

  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query               : TADOQuery;
  recNo_Score         : integer;
  recNo_Pays          : integer;
  recNo_FirstPart     : integer;

//  set_balance_return  : Boolean;

  str_expeditor       : array [1..4] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 368 = 'Акт сверки расчетов (подрядчик, возмещение)'

  if SP_Agree.Eof then exit;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  // Выбор контракта подрядчика
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT DISTINCT contract_id = contract_agent_id, contract_cod = contract_agent_cod, firm_customer_name = firm_agent_name');
  Query.SQL.Add('FROM view_shaping_rate');
  Query.SQL.Add('WHERE bargain_id in (' + str_bargain_id + ')');
  Query.Open;

  contract_agent_id := -9;
  if Query.RecordCount = 1 then contract_agent_id  := Query.FieldByName('contract_id').AsInteger;
  if Query.RecordCount > 1 then begin
    fmFilter := TfmFilter.Create(0, Query, 'contract_id', 'contract_cod', 'firm_customer_name');
    fmFilter._SetContract4FactIncChoose := True;
    if fmFilter.ShowModal = mrOk then contract_agent_id := fmFilter.GetId;
    fmFilter.Free;
  end;
  Query.Free;

  if contract_agent_id = -9 then begin
    Screen.Cursor := crDefault;
    Application.MessageBox('Не выбран подрядчик', 'ВНИМАНИЕ', MB_OK);
    Exit;
  end;

  // --- данные контракта подрядчика -----
  // --- валюта договора по умолчанию для акта сверки -----
  // --- валюта договора по умолчанию для акта сверки -----
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT contract_cod, date_begin, firm_customer_name_short, currency_id, brief_name, wide_name, firm_self, firm_customer, ');
  Query.SQL.Add('type_firm_self_name, type_firm_customer_name ');
  Query.SQL.Add('FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_id));
  Query.Open;

  str_expeditor[1] := Query.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query.FieldByName('type_firm_customer_name').AsString;
  str_expeditor[3] := 'задолженность ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е');
  str_expeditor[4] := 'задолженность ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е');

  contract_agent_cod  := Query.FieldByName('contract_cod').AsString;
  contract_agent_date := Query.FieldByName('date_begin').AsDateTime;
  firm_agent_name     := Query.FieldByName('firm_customer_name_short').AsString;
  currency_id         := Query.FieldByName('currency_id').AsInteger;
  brief_name          := Query.FieldByName('brief_name').AsString;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, 0, contract_agent_id);
  if retActSettings[0] = -9 then
    exit;
  // подменяем валюту, на валюту договора с подрядчиком
  retActSettings[7] := VarArrayOf([currency_id, brief_name]);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;

  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_agent;1';
//  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_new;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := contract_agent_id;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := currency_id;
  SP_Balance.Parameters.ParamByName('@set_return').Value := True;
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];
  SP_Balance.ExecProc;

  if SP_Balance.Parameters.ParamByName('@contract_id').Value = -9 then begin
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Первичный платёж установлен позже указанного периода. Начальное сальдо не сформировано', 'Внимание', MB_OK);
    SP_Balance.Free;
    Exit;
  end;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon)); // 'Акт сверки расчетов.xls'
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['B2'].Value := 'между ' + firm_agent_name +
                             ' и ' + VarToStr(retActSettings[12][1]) + #10 +
                             'Договор № ' + contract_agent_cod + ' от ' +
                             FormatDateTime('dd.mm.yyyy', contract_agent_date) + 'г.' +
                             ' (в части расходов, подлежащих возмещению в адрес ' + VarToStr(retActSettings[12][1]) + ')';

  exWks.Range['K3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) +
                             ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + firm_agent_name +
                             ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", ' +
                             'с другой стороны, составили настоящий Акт сверки расчетов ' +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';


  exWks.Range['B11'].Value := 'Оказаны услуги ' + VarToStr(retActSettings[12][1]);
  exWks.Range['G28'].Value := 'Платежи ' + VarToStr(retActSettings[12][1]);
  exWks.Range['B45'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['B28'].Value := 'Оказаны услуги ' + firm_agent_name;
  exWks.Range['G11'].Value := 'Платежи ' + firm_agent_name;
  exWks.Range['G45'].Value := firm_agent_name;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B47'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E47'].Value := retActSettings[13][1];
  end else
    exWks.Range['B47:F47'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B49'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E49'].Value := retActSettings[13][4];
  end else
    exWks.Range['B49:F49'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['G47'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['J47'].Value := retActSettings[13][7];
  end else
    exWks.Range['G47:K47'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['G49'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['J49'].Value := retActSettings[13][10];
  end else
    exWks.Range['G49:K49'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['47:49'].Copy;
    exWks.Rows['51:53'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B51'].Value := 'Дата подписания';
    exWks.Range['B53'].Value := '"____" __________________ 201__';
    exWks.Range['H51'].Value := 'Дата подписания';
    exWks.Range['H53'].Value := '"____" __________________ 201__';

    // Спрячем лишние колонки и строки (НДС), для иностранцев они не отображаются
    exWks.Rows['16:20'].Hidden := True;
    exWks.Rows['33:37'].Hidden := True;
    // Сначала раздвинем оставшиеся колонки, а потом спрячем ненужные
    exWks.Columns['B:B'].ColumnWidth := exWks.Columns['B:B'].ColumnWidth + (exWks.Columns['E:E'].ColumnWidth / 4);
    exWks.Columns['C:C'].ColumnWidth := exWks.Columns['C:C'].ColumnWidth + (exWks.Columns['E:E'].ColumnWidth / 4);
    exWks.Columns['D:D'].ColumnWidth := exWks.Columns['D:D'].ColumnWidth + (exWks.Columns['E:E'].ColumnWidth / 4);
    exWks.Columns['F:F'].ColumnWidth := exWks.Columns['F:F'].ColumnWidth + (exWks.Columns['E:E'].ColumnWidth / 4);

    exWks.Columns['G:G'].ColumnWidth := exWks.Columns['G:G'].ColumnWidth + (exWks.Columns['J:J'].ColumnWidth / 4);
    exWks.Columns['H:H'].ColumnWidth := exWks.Columns['H:H'].ColumnWidth + (exWks.Columns['J:J'].ColumnWidth / 4);
    exWks.Columns['I:I'].ColumnWidth := exWks.Columns['I:I'].ColumnWidth + (exWks.Columns['J:J'].ColumnWidth / 4);
    exWks.Columns['K:K'].ColumnWidth := exWks.Columns['K:K'].ColumnWidth + (exWks.Columns['J:J'].ColumnWidth / 4);

    exWks.Columns['E:E'].Hidden := True;
    exWks.Columns['J:J'].Hidden := True;
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['G9'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G22'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G26'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G39'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['G42'].Value := VarToStr(retActSettings[7][1]);

    exWks.Range['F12'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['K12'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['F29'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['K29'].Value := 'Сумма с учетом НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // сальдо берем с обратным знаком, т.к. это акт по возмещению
  exWks.Range['L9'].Value := -SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000));
//  set_balance_return := (SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value <> null);
//  set_balance_return := set_balance_return and (SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value <> 0);
//  if set_balance_return then
//    exWks.Range['L26'].Value := -SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value
//  else
  exWks.Range['L26'].Value := 0;
  SP_Balance.Free;

  // Данные отчета (заполнение происходит снизу-вверх)

  // Улдаляем лишний блок
  exWks.Rows['23:42'].Delete;

  // С-ф (обычные + клиент) (верхняя-левая часть) (возврат от агенте = обычные клиенту)
  ShowTextMessage('Формирование отчета: Шаг 1 из 2', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 0 AND set_clearing = 0 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  //Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.SQL.Add('ORDER BY score_date');
  Query.Parameters.ParamByName('contract_id').Value := contract_agent_id;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  recNo_Score := 1;
  while not Query.Eof do begin
    exWks.Rows[IntToStr(12 + recNo_Score)].ClearContents;
    exWks.Rows[IntToStr(13 + recNo_Score)].Insert;
    exWks.Rows[IntToStr(12 + recNo_Score)].Copy;
    exWks.Rows[IntToStr(13 + recNo_Score)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(12 + recNo_Score)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['F' + IntToStr(12 + recNo_Score)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_Score);
  end;
  Query.Free;

  // Платежи (возврат + подрядчики) (верхняя-правая часть)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 2 из 2', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(-pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 1');
  Query.SQL.Add('AND (set_return = 1)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := contract_agent_id;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  recNo_Pays := 1;
  while not Query.Eof do begin
    if (recNo_Pays >= recNo_Score) then begin
      exWks.Rows[IntToStr(12 + recNo_Pays)].ClearContents;
      exWks.Rows[IntToStr(13 + recNo_Pays)].Insert;
      exWks.Rows[IntToStr(12 + recNo_Pays)].Copy;
      exWks.Rows[IntToStr(13 + recNo_Pays)].PasteSpecial(1);
    end;

    if Query.FieldByName('pay_sum').AsCurrency >= 0  then
      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := 'платежное поручение'
    else
      exWks.Range['G' + IntToStr(12 + recNo_Pays)].Value := 'платежное поручение на возврат денежных средств';
    exWks.Range['H' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['I' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['J' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['K' + IntToStr(12 + recNo_Pays)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo_Pays);
  end;
  Query.Free;


  if (recNo_Pays > recNo_Score) then recNo_FirstPart := recNo_Pays else recNo_FirstPart := recNo_Score;

  if (recNo_Pays <> 1) or (recNo_Score <> 1) then exWks.Rows[IntToStr(12 + recNo_FirstPart)].Delete
  else recNo_FirstPart := recNo_FirstPart + 1;

  exWks.Rows[IntToStr(12 + recNo_FirstPart)].Delete;

  // Пункты акта
  exWks.Range['B8'].Value := '1. По Договору № ' + contract_agent_cod +
                             ' от ' + FormatDateTime('dd.mm.yyyy', contract_agent_date) + 'г.., ' +
                             VarToStr(iif(exWks.Range['L9'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части расходов, подлежащих возмещению ' +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B8']);

  if recNo_FirstPart = 1 then exWks.Range['L' + IntToStr(19 + recNo_FirstPart)].Value := '=L9';
  exWks.Range['B' + IntToStr(18 + recNo_FirstPart)].Value :=
                             'По Договору № ' + contract_agent_cod +
                             ' от ' + FormatDateTime('dd.mm.yyyy', contract_agent_date) + 'г.., ' +
                             VarToStr(iif(exWks.Range['L' + IntToStr(19 + recNo_FirstPart)].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части расходов, подлежащих возмещению ' +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['B' + IntToStr(18 + recNo_FirstPart)]);

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton192Click(Sender: TObject);
var
  Q              : TADOQuery;
  str_bargain_id : string;
  acts_id        : integer;

begin
  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  // Счет-Фактура (УПД)
  fmInvoiceScoreAdd := TfmInvoiceScoreAdd.Create(Application, True, 0);
  if fmInvoiceScoreAdd._InsertUPDByBargain(str_bargain_id, TComponent(Sender).Tag) then begin
    if fmInvoiceScoreAdd.ShowModal = mrOk then begin
      // откроем сформрованную УПД
      Q := TADOQuery.Create(nil);
      Q.Connection := Fconnect;
      Q.SQL.Add('SELECT acts_id FROM ACTS WHERE global_id = ' + IntToStr(fmInvoiceScoreAdd._GetInvoiceScoreID));
      Q.Open;

      if not Q.Eof then
        GetActsView(Q['acts_id'], Fconnect, False, Self)
      else
        Application.MessageBox('Файл не найден', 'Внимание!', MB_OK or MB_ICONERROR);

      Q.Free;
    end;
  end;
end;

procedure TfmAgree2.dxBarButton193Click(Sender: TObject);
type
  TFunc = function(users_group_cod: string; DocumentType: string; data_xml: TArray<Byte>; data_size: integer): variant;
var
    FPrintForm          : TFunc;
    handle              : THandle;
    v                   : Variant;

    cod_shablon         : integer;
    retActSettings      : Variant;
    Query_tmp           : TADOQuery;
    Query               : TADOQuery;
    Q_NDS               : TADOQuery;
    str_expeditor       : array [1..2] of string;
    str_bargain_id      : string;
    ClientDS_distance   : TClientDataSet;
    SP_Balans_Detail    : TADOStoredProc;
    recAct, recNo       : integer;
    old_bargain_id      : integer;
    old_rate            : Currency;
    nds_rate            : Currency;
    act_sum, nds_sum    : Currency;
    brief_name          : string;

    sp_BLOB_DETAIL_modify : TADOStoredProc;
    doc_id              : integer;
    files_type_id       : integer;
    s                   : TStringStream;
    files_data          : TArray<Byte>;

    i : integer;

    SpreadSheet         : TdxSpreadSheet;
    Sheet1              : TdxSpreadSheetTableView;
    Sheet2              : TdxSpreadSheetTableView;
    excel_stream        : TMemoryStream;

    _GUID : TGUID;
    doc   : EDOXMLAct.IXMLФайл;
    xml   : TXMLDocument;

    acts_sum_without_nds    : Double;
    acts_sum_nds            : Double;
    acts_sum_with_nds       : Double;
    sum_without_nds         : Double;
    sum_nds                 : Double;
    sum_with_nds            : Double;
    rate, cnt               : Double;
    fld_weight, ed_izm_name : string;
    mem_bytes               : TBytesStream;
    str_agreement           : string;
    _tmp_date               : TDateTime;

    cnt_bytes : integer;
    mem_xml : TStringStream;
begin
  cod_shablon := 233;// abs(TComponent(Sender).Tag);
  //233 = 'Акт приема-передачи оказанных услуг (РН-Транс, Уяр-Дземги)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_SET_ADDSIGN or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  SpreadSheet := TdxSpreadSheet.Create(nil);

  SpreadSheet.BeginUpdate();

  SpreadSheet.LoadFromStream(TBytesStream.Create(GetDocBlobBytes(Fconnect, cod_shablon)));

  Sheet1 := (SpreadSheet.Sheets[0] as TdxSpreadSheetTableView);
  Sheet2 := (SpreadSheet.Sheets[1] as TdxSpreadSheetTableView);

  Sheet1.BeginUpdate;
  Sheet2.BeginUpdate;

  Sheet1.Cells[1,2].AsString := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                                'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                                'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  Sheet1.Cells[2,12].AsString := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';


  Sheet1.Cells[14,1].AsString := VarToStr(retActSettings[12][1]);
  Sheet1.Cells[14,8].AsString := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then
    Sheet1.Cells[16,1].AsString := VarToStr(retActSettings[14][1]) + ' _________________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    Sheet1.Cells[16,1].AsVariant := Null;

  if retActSettings[13][5] = True then
    Sheet1.Cells[18,1].AsString := VarToStr(retActSettings[14][4]) + ' _____________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    Sheet1.Cells[18,1].AsVariant := Null;

  if retActSettings[13][8] = True then
    Sheet1.Cells[16,8].AsString := VarToStr(retActSettings[14][7]) + ' _________________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    Sheet1.Cells[16,8].AsVariant := Null;

  if retActSettings[13][11] = True then
    Sheet1.Cells[18,8].AsString := VarToStr(retActSettings[14][10]) + ' _____________________ ' + VarToStr(retActSettings[13][10]) + ''
  else
    Sheet1.Cells[18,8].AsVariant := Null;


  if retActSettings[6][2] = True then begin
//    // 1. Раздвинем область печати на 4 строки вниз
//    PrintArea := exWks.PageSetup.PrintArea;
//    if PrintArea <> '' then begin
//      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
//      exWks.PageSetup.PrintArea := WideString(PrintArea);
//    end;
//    // 2. Копируем формат
//    exWks.Rows['17:20'].Copy;
//    exWks.Rows['21:24'].PasteSpecial(Paste:=-4122);
//    // 3. Добавим нужные нам строки
//    exWks.Range['B21'].Value := 'Дата подписания';
//    exWks.Range['B23'].Value := '"____" __________________ 201__';
//    exWks.Range['I21'].Value := 'Дата подписания';
//    exWks.Range['I23'].Value := '"____" __________________ 201__';
  end;

  if (retActSettings[7][0] <> 3) then begin
    Sheet1.Cells[2,9].AsString := VarToStr(retActSettings[7][1]);
  end;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'      ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'    ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'      ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'   ).Value := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact').Value := retActSettings[6][4];
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recAct := 0;
  recNo := 1;
  old_bargain_id := -9; old_rate := 0;

  while not SP_Balans_Detail.Eof do begin

    if (old_bargain_id <> SP_Balans_Detail.FieldByName('bargain_id').AsInteger) or (old_rate <> SP_Balans_Detail.FieldByName('rate').AsCurrency) then begin
      // Новая строка в Акте
      Inc(recAct);

      Spread_RowCopy(Sheet1, recAct + 7, recAct + 8);
      Sheet1.Rows[recAct + 7].Cells[ 0].AsVariant := SP_Balans_Detail.FieldByName('bargain_id').Value;
      Sheet1.Rows[recAct + 7].Cells[ 1].AsVariant := recAct;
      Sheet1.Rows[recAct + 7].Cells[ 2].AsVariant := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
      Sheet1.Rows[recAct + 7].Cells[ 3].AsVariant := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
      Sheet1.Rows[recAct + 7].Cells[ 4].AsVariant := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      Sheet1.Rows[recAct + 7].Cells[ 8].AsFloat := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      Sheet1.Rows[recAct + 7].Cells[10].AsFloat := RoundCurr(SP_Balans_Detail.FieldByName('rate').AsCurrency, -2);
      Sheet1.Rows[recAct + 7].ApplyBestFit;

      old_bargain_id := SP_Balans_Detail.FieldByName('bargain_id').AsInteger;
      old_rate := SP_Balans_Detail.FieldByName('rate').AsCurrency;
    end;

    Spread_RowCopy(Sheet2, recNo + 5, recNo + 6);

    Sheet2.Rows[recNo + 5].Cells[0].AsVariant := recAct;
    Sheet2.Rows[recNo + 5].Cells[1].AsVariant := recNo;
    Sheet2.Rows[recNo + 5].Cells[2].AsVariant := SP_Balans_Detail.FieldByName('date_period').Value;
    Sheet2.Rows[recNo + 5].Cells[3].AsVariant := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    Sheet2.Rows[recNo + 5].Cells[4].AsVariant := SP_Balans_Detail.FieldByName('bargain_road_begin_name').AsString;
    Sheet2.Rows[recNo + 5].Cells[5].AsVariant := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    Sheet2.Rows[recNo + 5].Cells[6].AsVariant := SP_Balans_Detail.FieldByName('bargain_road_end_name').AsString;

    // расстояние
    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
      ShowTextMessage('Осталось вагонов: ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + char(10) +
                      'Расчет расстояния (' + SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString + ')->(' + SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString + ')', False);
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);

      ClientDS_distance.Post;
    end;
    ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []);

    Sheet2.Rows[recNo + 5].Cells[ 7].AsVariant := ClientDS_distance.FieldByName('distance').Value;
    Sheet2.Rows[recNo + 5].Cells[ 8].AsVariant := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
    Sheet2.Rows[recNo + 5].Cells[ 9].AsVariant := SP_Balans_Detail.FieldByName('date_from_to').Value;
    Sheet2.Rows[recNo + 5].Cells[10].AsVariant := SP_Balans_Detail.FieldByName('date_delivery').Value;
    Sheet2.Rows[recNo + 5].Cells[11].AsVariant := SP_Balans_Detail.FieldByName('num_document').AsString;
    Sheet2.Rows[recNo + 5].Cells[12].AsVariant := SP_Balans_Detail.FieldByName('num_vagon').Value;
    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      Sheet2.Rows[recNo + 5].Cells[13].AsVariant := null
    else
      Sheet2.Rows[recNo + 5].Cells[13].AsVariant := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    Sheet2.Rows[recNo + 5].Cells[14].AsFloat   := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
    Sheet2.Rows[recNo + 5].Cells[18].AsVariant := SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString;
    Sheet2.Rows[recNo + 5].ApplyBestFit;

    inc(recNo);

    ShowTextMessage('Осталось вагонов: ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  Spread_RowDelete(Sheet1, 8 + recAct);

  if recAct > 0 then
    Spread_RowDelete(Sheet1, 8 + recAct)
  else
    Spread_RowClear(Sheet1, 8 + recAct);


  Spread_RowDelete(Sheet2, 5 + recNo);
  if recAct > 0 then
    Spread_RowDelete(Sheet2, 5 + recNo)
  else
    Spread_RowClear(Sheet2, 5 + recNo);

  SpreadSheet.EndUpdate;

  act_sum    := StrToCurr(Spread_GetDefined(SpreadSheet, 'act_sum'));
  nds_sum    := StrToCurr(Spread_GetDefined(SpreadSheet, 'nds_sum'));
  brief_name := Spread_GetDefined(SpreadSheet, 'brief_name');

  Sheet1.Rows[4].Cells[1].AsString :=  'Настоящий акт составлен на предмет того, что ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' оказаны услуги ' +
                                       'по предоставлению железнодорожного подвижного состава для осуществления перевозок Грузов ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ' ' +
                                       'на сумму ' + CurrToStr(act_sum) + ' ' +
                                       '(' + GetSumScript_RUS(CurrToStr(abs(act_sum)), retActSettings[7][0]) + ') ' + brief_name + ', ' +
                                       'в том числе НДС 18% - ' + CurrToStr(nds_sum) + ' ' + brief_name + '';

  Spread_AutoFitMergeCell(Sheet1, 4, 1);


  Sheet1.Selection.Clear;
  Sheet2.Selection.Clear;
  Sheet1.EndUpdate;
  Sheet2.EndUpdate;

  SaveECPActsEnd(Fconnect, SpreadSheet, retActSettings, str_bargain_id, act_sum);

  // Формирование XML
  Screen.Cursor := crHourglass;
  ShowTextMessage('Создание XML...', False);


  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT * FROM view_acts WHERE acts_id = ' + VarToStr(retActSettings[1][0]));
  Query.Open;


  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT DISTINCT doc_id, doc_describe, doc_image_date');
  Query_tmp.SQL.Add('FROM view_doc_blob JOIN bargain');
  Query_tmp.SQL.Add('ON doc_id = agreement_id AND doc_type_cod in (''2'') AND doc_describe is not null');
  Query_tmp.SQL.Add('AND bargain.bargain_id IN (' + str_bargain_id + ')');
  Query_tmp.SQL.Add('ORDER BY doc_id');
  Query_tmp.Open;
  str_agreement := '';
  while not Query_tmp.Eof do begin
    if str_agreement <> '' then str_agreement := str_agreement + ', ';
    str_agreement := str_agreement + Query_tmp.FieldByName('doc_describe').AsString;
    Query_tmp.Next;
  end;

  if str_agreement <> '' then
    str_agreement := ' (' + str_agreement + ')';

  Query_tmp.Free;

  doc := EDOXMLAct.NewФайл;

  // Файл.СвУчДокОбор
  // идентификаторы участников ЭДО - надо будет брать из списка участников
  doc.СвУчДокОбор.ИдОтпр := '2BM-' + ReplaceStr(Query.FieldByName('firm_self_inn_kpp').AsString, '\', '-');
  doc.СвУчДокОбор.ИдПок  := '2BM-' + ReplaceStr(Query.FieldByName('firm_customer_inn_kpp').AsString, '\', '-');
  doc.СвУчДокОбор.СвОЭДОтпр.НаимОрг := 'ЗАО "ПФ "СКБ Контур"';
  doc.СвУчДокОбор.СвОЭДОтпр.ИННЮЛ   := '6663003127';
  doc.СвУчДокОбор.СвОЭДОтпр.ИдЭДО   := '2BM';

  // Файл
  CreateGUID(_GUID);
  doc.ИдФайл := 'DP_IAKTPRM_' + doc.СвУчДокОбор.ИдПок + '_' + doc.СвУчДокОбор.ИдОтпр + '_' + FormatDateTime('yyyymmdd', Date) + '_' + Copy(GUIDToString(_GUID), 2, 36);
  doc.ВерсФорм := '5.01';

  // Файл.Документ
  doc.Документ.КНД := '1175006';
  doc.Документ.ДатаДок := FormatDateTime('dd.mm.yyyy', Now);
  doc.Документ.ВремДок := FormatDateTime('hh.nn.ss', Now);
  // Файл.Документ.СвАктИ
  doc.Документ.СвАктИ.НаимПервДок := 'Акт о выполнении работ (оказании услуг)';
  doc.Документ.СвАктИ.НомАкт      := Query.FieldByName('acts_cod').AsString;
  doc.Документ.СвАктИ.ДатаАкт     := FormatDateTime('dd.mm.yyyy', Query.FieldByName('acts_date').AsDateTime);
  doc.Документ.СвАктИ.Заголовок   := 'Мы, нижеподписавшиеся, представитель Исполнителя, с одной стороны, и представитель Заказчика с другой стороны, составили настоящий акт в том, что Исполнитель выполнил, а Заказчик принял следующие работы (услуги).';

  // Файл.Документ.СвАктИ.Исполнитель
  doc.Документ.СвАктИ.Исполнитель.ИдСв.СвЮЛ.НаимОрг := Query.FieldByName('firm_self_name_full').AsString;
  doc.Документ.СвАктИ.Исполнитель.ИдСв.СвЮЛ.ИННЮЛ   := LeftStr(Query.FieldByName('firm_self_inn_kpp').AsString, Pos('/', Query.FieldByName('firm_self_inn_kpp').AsString) - 1);
  doc.Документ.СвАктИ.Исполнитель.ИдСв.СвЮЛ.КПП     := RightStr(Query.FieldByName('firm_self_inn_kpp').AsString, Length(Query.FieldByName('firm_self_inn_kpp').AsString) - Pos('/', Query.FieldByName('firm_self_inn_kpp').AsString));

  ShowTextMessage('Получение данных Акта...', False);

  // Файл.Документ.СвАктИ.ОписРабот
  Q_NDS := TADOQuery.Create(nil);
  Q_NDS.Connection := Fconnect;
  Q_NDS.SQL.Clear;
  Q_NDS.SQL.Add('SELECT * FROM inf_obj WHERE type_inf_id = -12');
  Q_NDS.Open;

  with doc.Документ.СвАктИ.ОписРабот.Add do begin

    acts_sum_without_nds := 0;
    acts_sum_nds := 0;
    acts_sum_with_nds := 0;

    SP_Balans_Detail.First;
    while not SP_Balans_Detail.Eof do begin
      ShowTextMessage('Осталось вагонов: ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo + 1), False);
      with Add do begin
        if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
        rate            := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsFloat * 100 / (100 + nds_rate)), -2);
        fld_weight      := 'calc_weight';
        cnt             := SP_Balans_Detail.FieldByName(fld_weight).AsFloat;
        ed_izm_name     := 'Ставка перевозки руб/т (без НДС)'; // тонна
        sum_without_nds := RoundCurr(rate * cnt, -2);
        sum_nds         := RoundCurr(sum_without_nds * nds_rate / 100, -2);
        sum_with_nds    := sum_without_nds + sum_nds;

        Номер      := IntToStr(SP_Balans_Detail.RecNo);
        НаимЕдИзм  := '-';
        СумБезНДС  := ReplaceStr(FormatCurr('0.00', sum_without_nds ), ',', '.');
        СумНДС     := ReplaceStr(FormatCurr('0.00', sum_nds         ), ',', '.');
        СумУчНДС   := ReplaceStr(FormatCurr('0.00', sum_with_nds    ), ',', '.');

        // расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
          ClientDS_distance.Post;
        end;
        ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []);

        Описание    := SP_Balans_Detail.FieldByName('service_kind').AsString;
        ИнфПолСтр   := '';
        // печатаем дату раскредитации, только если она задана
        if not SP_Balans_Detail.FieldByName('date_delivery').IsNull then
          ИнфПолСтр   := ИнфПолСтр + 'Дата раскредитования документа: ' + FormatDateTime('dd.mm.yyyy', SP_Balans_Detail.FieldByName('date_delivery').AsDateTime) + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Станция отправления: ' + SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString + ' (' + SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString + ');'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Станция назначения: ' + SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString + ' (' + SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString + ');'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Дата отправления: ' + FormatDateTime('dd.mm.yyyy', SP_Balans_Detail.FieldByName('date_from_to').AsDateTime) + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Накладная: ' + SP_Balans_Detail.FieldByName('num_document').AsString + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Номер вагона: ' + SP_Balans_Detail.FieldByName('num_vagon').AsString + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Груз: ' + SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString + ' (' + SP_Balans_Detail.FieldByName('bargain_kargoETSNG_cod').AsString + ');'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Расстояние, км: ' + ClientDS_distance.FieldByName('distance').AsString + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Фактич.вес груза, т: ' + ReplaceStr(FormatCurr('0.000', SP_Balans_Detail.FieldByName(fld_weight).AsFloat), ',', '.') + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + ed_izm_name + ': ' + ReplaceStr(FormatCurr('0.00', rate), ',', '.') + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Ставка НДС: ' + VarToStr(Q_NDS.Lookup('inf_obj_id', SP_Balans_Detail.FieldByName('bargain_nds_id').AsInteger, 'inf_obj_name')) + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Расчетная масса груза, т: ' + ReplaceStr(FormatCurr('0.000', SP_Balans_Detail.FieldByName('calc_weight').AsFloat), ',', '.') + ';';
      end;

      acts_sum_without_nds := acts_sum_without_nds + sum_without_nds;
      acts_sum_nds         := acts_sum_nds + sum_nds;
      acts_sum_with_nds    := acts_sum_with_nds + sum_with_nds;

      SP_Balans_Detail.Next;
    end;

    SP_Balans_Detail.First;

    НачРабот    := FormatDateTime('dd.mm.yyyy', Query.FieldByName('date_begin').AsDateTime);
    КонРабот    := FormatDateTime('dd.mm.yyyy', Query.FieldByName('date_end').AsDateTime);

    СумБезНДСИт := ReplaceStr(FormatCurr('0.00', acts_sum_without_nds), ',', '.');
    СумНДСИт    := ReplaceStr(FormatCurr('0.00', acts_sum_nds)        , ',', '.');
    СумУчНДСИт  := ReplaceStr(FormatCurr('0.00', acts_sum_with_nds)   , ',', '.');
  end;

  // Файл.Документ.СвАктИ.Сдал
  doc.Документ.СвАктИ.Сдал.ДатаИсполн := FormatDateTime('dd.mm.yyyy', Now);
  if not Query.FieldByName('self_type_dir').IsNull then doc.Документ.СвАктИ.Сдал.ПодписьИсполн.Должность := Query.FieldByName('self_type_dir').AsString;

  if not Query.FieldByName('self_dir_name').IsNull then begin
    doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Фамилия := LeftStr(Query.FieldByName('self_dir_name').AsString, Pos(' ', Query.FieldByName('self_dir_name').AsString) - 1);
    doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя := RightStr(Query.FieldByName('self_dir_name').AsString, Length(Query.FieldByName('self_dir_name').AsString) - Pos(' ', Query.FieldByName('self_dir_name').AsString));
    if pos(' ', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) > 0 then begin
      doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Отчество := RightStr(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя, Length(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) - Pos(' ', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя));
      doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя := LeftStr(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя, Pos(' ', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) - 1);
    end else if pos('.', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) > 0 then begin
      doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Отчество := RightStr(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя, Length(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) - Pos('.', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя));
      doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя := LeftStr(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя, Pos('.', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя));
    end;
  end;

  if (not Query.FieldByName('self_dir_comment').IsNull) and (pos(' от ', Query.FieldByName('self_dir_comment').AsString) > 0) then begin
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен := LeftStr(Query.FieldByName('self_dir_comment').AsString, Pos(' от ', Query.FieldByName('self_dir_comment').AsString) - 1);
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен := RightStr(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен, Length(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен) - Pos(' ', doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен));
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен := ReplaceStr(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен, '№', '');

    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен := RightStr(Query.FieldByName('self_dir_comment').AsString, Length(Query.FieldByName('self_dir_comment').AsString) - Pos(' от ', Query.FieldByName('self_dir_comment').AsString) - 3);
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен := ReplaceStr(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен, 'г.', '');
    if TryStrToDate(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен, _tmp_date) then
      doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен := FormatDateTime('dd.mm.yyyy', _tmp_date);

    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.Должн := doc.Документ.СвАктИ.Сдал.ПодписьИсполн.Должность;
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Фамилия := doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Фамилия;
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Имя := doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя;
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Отчество := doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Отчество;
  end;

  doc.Документ.СвАктИ.ИнфПол.ТекстИнф := 'к Договору № ' + Query.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query.FieldByName('contract_date_begin').AsDateTime) + 'г.' + str_agreement + ' за период  с ' + FormatDateTime('dd.mm.yyyy', Query.FieldByName('date_begin').AsDateTime) + ' по ' + FormatDateTime('dd.mm.yyyy', Query.FieldByName('date_end').AsDateTime) + 'г.';

  doc.Документ.Подписант.ЮЛ.ИННЮЛ := '7702059030';
  doc.Документ.Подписант.ЮЛ.Должн := 'Генеральный директор';
  doc.Документ.Подписант.ЮЛ.ФИО.Фамилия := 'Пурим';
  doc.Документ.Подписант.ЮЛ.ФИО.Имя := 'Дмитрий';
  doc.Документ.Подписант.ЮЛ.ФИО.Отчество := 'Юрьевич';
  doc.Документ.СвАктИ.Исполнитель.Адрес.АдрТекст := '109012, Москва, ул.Рождественка, 1/4';
  doc.Документ.СвАктИ.Исполнитель.БанкРекв.НомерСчета := '40702810310000000505';
  doc.Документ.СвАктИ.Исполнитель.БанкРекв.СвБанк.НаимБанк := 'Московский филиал Банка МБСП (АО) г. Москва';
  doc.Документ.СвАктИ.Исполнитель.БанкРекв.СвБанк.БИК := '044525802';


  xml := doc.OwnerDocument as TXMLDocument;
  xml.Active := True;

  xml.Version := '1.0';
  xml.Encoding := 'windows-1251';
  Screen.Cursor := crDefault;
  ShowTextMessage;


  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT inf_obj_id FROM inf_obj WHERE type_inf_id = 151 AND inf_obj_cod = ''02'''); // Формат XML
  Query_tmp.Open;

  files_type_id := Query_tmp.FieldByName('inf_obj_id').AsInteger;

  Query_tmp.SQL.Clear;
  Query_tmp.SQL.Add('SELECT doc_id FROM doc_blob WHERE global_id = ' + VarToStr(retActSettings[1][0]));
  Query_tmp.Open;

  doc_id := Query_tmp.FieldByName('doc_id').AsInteger;

  mem_bytes := TBytesStream.Create;
  xml.SaveToStream(mem_bytes); // Сохраняем XML для получения печатной формы

  s := TStringStream.Create('');
  xml.SaveToStream(s);

  files_data := LZHPack(s.Bytes, s.Size);
  s.Free;
  s := TStringStream.Create(files_data);

  sp_BLOB_DETAIL_modify  := TADOStoredProc.Create(nil);
  sp_BLOB_DETAIL_modify.Connection := Fconnect;
  sp_BLOB_DETAIL_modify.ProcedureName := 'sp_BLOB_DETAIL_modify';
  sp_BLOB_DETAIL_modify.Parameters.Refresh;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@doc_detail_id' ).Value := null;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@doc_id'        ).Value := doc_id;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@type_action'   ).Value := 0;  // Добавить файл к уже созданной записи
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@files_type_id' ).Value := files_type_id;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@files_name'    ).Value := doc.ИдФайл + '.xml';
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@files_date'    ).Value := Now;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@files_image'   ).LoadFromStream(s, ftBlob);
  sp_BLOB_DETAIL_modify.ExecProc;

  sp_BLOB_DETAIL_modify.Free;

  s.Free;


  // Формирование печатной формы
  handle := LoadLibrary('work_edo.dll');
  @FPrintForm := GetProcAddress(handle, 'CreateWndGeneratePrintForm3');
  v := FPrintForm('0', 'XmlAcceptanceCertificate', mem_bytes.Bytes, mem_bytes.Size);
  FreeLibrary(handle);

  cnt_bytes := v[1];

  mem_bytes.Free;
  mem_bytes := TStringStream.Create();
  mem_bytes.WriteData(TBytes(v[0]), cnt_bytes);
  files_data := LZHPack(mem_bytes.Bytes, mem_bytes.Size);
  mem_bytes.Free;
  mem_bytes := TStringStream.Create(files_data);

  Query_tmp.SQL.Clear;
  Query_tmp.SQL.Add('SELECT inf_obj_id FROM inf_obj WHERE type_inf_id = 151 AND inf_obj_cod = ''03'''); // Печатная форма
  Query_tmp.Open;

  files_type_id := Query_tmp.FieldByName('inf_obj_id').AsInteger;

  sp_BLOB_DETAIL_modify  := TADOStoredProc.Create(nil);
  sp_BLOB_DETAIL_modify.Connection := Fconnect;
  sp_BLOB_DETAIL_modify.ProcedureName := 'sp_BLOB_DETAIL_modify';
  sp_BLOB_DETAIL_modify.Parameters.Refresh;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@doc_detail_id' ).Value := null;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@doc_id'        ).Value := doc_id;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@type_action'   ).Value := 0;  // Добавить файл к уже созданной записи
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@set_main'      ).Value := 1;  // Добавить файл к уже созданной записи
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@files_name'    ).Value := 'Печатная форма.pdf';
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@files_date'    ).Value := Now;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@files_type_id' ).Value := files_type_id;
  sp_BLOB_DETAIL_modify.Parameters.ParamByName('@files_image'   ).LoadFromStream(mem_bytes, ftBlob);
  sp_BLOB_DETAIL_modify.ExecProc;
  sp_BLOB_DETAIL_modify.Free;


  SpreadSheet.Free;
  xml.Active := False;
  Q_NDS.Free;
  Query.Free;
  SP_Balans_Detail.Free;
  ClientDS_distance.Free;
  Query_tmp.Free;
  Screen.Cursor := crDefault;
  ShowTextMessage('', True);

  GetDocBlobView(doc_id, nil, '', Fconnect);
end;

procedure TfmAgree2.dxBarButton195Click(Sender: TObject);
var
  retActSettings      : Variant;
  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  str_bargain_id      : string;
  str_expeditor       : array [1..2] of string;
  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 437 = 'Расчет объема оказанных услуг (к УПД)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE or ACT_SET_DATEDELIVERY);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
//     exApp.Visible := True;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'        ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'      ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'         ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'           ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'        ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'       ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  // Расчет объема (у нас есть специальная процедура)
  Report_WorkVolume(retActSettings, exWkb, str_bargain_id, SP_Balans_Detail);

  exWks.Range['A1'].Select;

  SP_Balans_Detail.Free;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);

  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton198Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  recXls              : integer;
  str_bargain_id      : string;

  ClientDS_distance   : TClientDataSet;
  str_expeditor       : array [1..2] of string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 223 = 'Расчет объема оказанных услуг (ВЦЗ)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['B2'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' + #10 +
                             'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['R4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B20'].Value := 'Настоящий расчёт объёма оказанных услуг составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ' - ' + str_expeditor[1];
  exWks.Range['B7'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString + ' - ' + str_expeditor[2];
  exWks.Range['B24'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['K24'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // валюта
  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['P9'].Value := 'Сумма оказанных услуг с НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['Q9'].Value := 'Сумма оказанных услуг без НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B26'].Value := retActSettings[14][1];
    exWks.Range['F26'].Value := retActSettings[13][1];
  end else
    exWks.Range['B26:H26'].ClearContents;

  if retActSettings[13][5] = True then begin
    exWks.Range['B28'].Value := retActSettings[14][4];
    exWks.Range['F28'].Value := retActSettings[13][4];
  end else
    exWks.Range['B28:H28'].ClearContents;

  if retActSettings[13][8] = True then begin
    exWks.Range['K26'].Value := retActSettings[14][7];
    exWks.Range['N26'].Value := retActSettings[13][7];
  end else
    exWks.Range['K26:M26'].ClearContents;

  if retActSettings[13][11] = True then begin
    exWks.Range['K28'].Value := retActSettings[14][10];
    exWks.Range['N28'].Value := retActSettings[13][10];
  end else
    exWks.Range['K28:M28'].ClearContents;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B20']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH';
  SP_Balans_Detail.Parameters.Refresh;

  SP_Balans_Detail.Parameters.ParamByName('@contract_id'        ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'      ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'         ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'           ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'        ).Value := retActSettings[7][0];
//  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'       ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT road_name FROM view_node WHERE inf_obj_id = :node_id');

  recNo := 1;
  recXls := 12;
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_period').Value;

    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString;
    Query_tmp.Parameters.ParamByName('node_id').Value := SP_Balans_Detail.FieldByName('node_begin_id').AsInteger;
    Query_tmp.Open;
    exWks.Range['E' + IntToStr(recXls)].Value := Query_tmp.FieldByName('road_name').AsString;
    Query_tmp.Close;

    exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('node_end_name').AsString;
    Query_tmp.Parameters.ParamByName('node_id').Value := SP_Balans_Detail.FieldByName('node_end_id').AsInteger;
    Query_tmp.Open;
    exWks.Range['G' + IntToStr(recXls)].Value := Query_tmp.FieldByName('road_name').AsString;
    Query_tmp.Close;

    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;

    exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('cnt').Value;
    exWks.Range['K' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('doc_name').AsString;
    exWks.Range['L' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('vagon_name').AsString;

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['M' + IntToStr(recXls)].Value := Query_NDS.FieldByName('nds_name').AsString;

    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks.Range['N' + IntToStr(recXls)].Value := null
    else
      exWks.Range['N' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    exWks.Range['O' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('rate').Value;
    //Тохина Заявка № 15870908 сделаем, как в УПД, иначе копейки не сходятся
    //Сумма НДС
    exWks.Range['Q' + IntToStr(recXls)].Value := RoundCurr(SP_Balans_Detail.FieldByName('summa').AsFloat * Query_NDS.FieldByName('nds_cod').AsFloat /(100 + Query_NDS.FieldByName('nds_cod').AsFloat), -2);
    exWks.Range['P' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa').AsFloat - exWks.Range['Q' + IntToStr(recXls)].Value;

    //exWks.Range['P' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa_no_nds').AsFloat;
    //exWks.Range['Q' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('rate').Value;


    exWks.Range['R' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa').AsFloat;
    exWks.Range['S' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa_no_nds').AsFloat;

    exWks.Range['I' + IntToStr(recXls)].Value := null;
    if exWks.Range['I:I'].EntireColumn.Hidden = False then begin
      // Заполняем, если колонка не спрятана
      if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('node_begin_cod').AsString, SP_Balans_Detail.FieldByName('node_end_cod').AsString]), []) then begin
        ClientDS_distance.Append;
        ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('node_begin_cod').AsString;
        ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('node_end_cod').AsString;
        ClientDS_distance.FieldByName('distance').Value      := null;
        ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_period').Value);
        ClientDS_distance.Post;
      end;
      exWks.Range['I' + IntToStr(recXls)].Value := ClientDS_distance.FieldByName('distance').Value;
    end;

    inc(recNo);
    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(recXls)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(recXls)].Delete
  else begin
    exWks.Rows[IntToStr(recXls)].ClearContents;
    inc(recXls);
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;
  Query_tmp.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton19Click(Sender: TObject);
begin
  PrintReportAgent_Gurevskii(cxGrid1DBBandedTableView1contract_id.DataBinding.Field.AsInteger, Fdate1, Fdate2, Fconnect, usr_pwd);
end;

procedure TfmAgree2.dxBarButton141Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks, exWks2 : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  ClientDS_distance   : TClientDataSet;
  str_expeditor       : array [1..2] of string;

  cod_shablon         : integer;

  fld_node            : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  //256 = 'Акт приема-передачи оказанных услуг (ПГК).xls'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTEFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  if retActSettings[6][4] = True then begin
    fld_node := 'fact_node';
  end else begin
    fld_node := 'bargain_node';
  end;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
  exWks2 := exWkb.WorkSheets[2];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['contract_name']      := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['acts_date']          := retActSettings[3][0];
  exWks.Range['self_type_name']     := str_expeditor[1] + ':';
  exWks.Range['customer_type_name'] := str_expeditor[2] + ':';
  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['brief_name'].Value := retActSettings[7][1];
  end;

  exWks.Range['B8'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, совместно именуемые в дальнейшем "Стороны" составили настоящий Акт о том' +
                             ', что за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + ' г.' +
                             ' ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' оказаны ' + ReplaceStr(str_expeditor[2] + 'у', 'ьу', 'ю') + ' следующие услуги:';

  // Подписанты
  if retActSettings[13][2] = True then
    exWks.Range['B29'].Value := VarToStr(retActSettings[14][1]) + ' ________________ / ' + VarToStr(retActSettings[13][1]) + ' /'
  else
    exWks.Range['B29'].Value := Null;
//  if retActSettings[13][5] = True then
//    exWks.Range['D26'].Value := retActSettings[13][4]
//  else
//    exWks.Range['B25:D26'].ClearContents;
  if retActSettings[13][8] = True then
    exWks.Range['F29'].Value := VarToStr(retActSettings[14][7]) + ' ________________ / ' + VarToStr(retActSettings[13][7]) + ' /'
  else
    exWks.Range['F29'].Value := Null;
//  if retActSettings[13][11] = True then
//    exWks.Range['K26'].Value := retActSettings[13][10]
//  else
//    exWks.Range['H25:K26'].ClearContents;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B8']);

  // Данные отчета - перевозки
  ShowTextMessage('Акт: Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'          ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'        ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'           ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'             ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'          ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'         ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'    ).Value := retActSettings[6][4];
//  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'       ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    if (SP_Balans_Detail.FieldByName('bargain_correct_type').AsInteger = 1) or (SP_Balans_Detail.FieldByName('summa').AsCurrency > 0) then begin
      exWks.Rows[IntToStr(14 + recNo)].Insert;
      exWks.Rows[IntToStr(13 + recNo)].Copy;
      exWks.Rows[IntToStr(14 + recNo)].PasteSpecial(1);

      if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
        exWks.Range['A' + IntToStr(13 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
      else // Доп. сбор.
        exWks.Range['A' + IntToStr(13 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(13 + recNo)].Value := '1.' + IntToStr(recNo);
      if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
        exWks.Range['C' + IntToStr(13 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
      else
        exWks.Range['C' + IntToStr(13 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['D' + IntToStr(13 + recNo)].Value := SP_Balans_Detail.FieldByName('ed_izm_name').AsString;
      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['E' + IntToStr(13 + recNo)].Value := null
      else
        exWks.Range['E' + IntToStr(13 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['F' + IntToStr(13 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      exWks.Range['I' + IntToStr(13 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;
      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['J' + IntToStr(13 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      if SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString = '18' then
        exWks.Range['H' + IntToStr(13 + recNo)].Value := '=ROUND(RC[-1]*0.18,2)'
      else if SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString = '20' then
        exWks.Range['H' + IntToStr(13 + recNo)].Value := '=ROUND(RC[-1]*0.20,2)'
      else
        exWks.Range['H' + IntToStr(13 + recNo)].Value := '=ROUND(RC[-1],2)';


      inc(recNo);
    end;

    ShowTextMessage('Акт: Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;
  exWks.Range['nds_name'] := 'НДС (' + Query_NDS.FieldByName('nds_name_full').AsString + ')';

  exWks.Rows[IntToStr(13 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(13 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(13 + recNo)].ClearContents;
    recNo := 2;
  end;
  SP_Balans_Detail.Free;

  // Суммы прописью
  exWks.Range['str_acts_sum_nonds'].Value := 'Всего оказано услуг на сумму: ' + GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum_nonds'].Value)), retActSettings[7][0]);
  exWks.Range['str_nds_sum'].Value        := 'Кроме того, НДС (' + Query_NDS.FieldByName('nds_name').AsString + '): ' + GetSumScript_RUS(FloatToStr(abs(exWks.Range['nds_sum'].Value)), retActSettings[7][0]);
  exWks.Range['str_acts_sum'].Value       := 'Всего с учетом НДС: ' + GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum'].Value)), retActSettings[7][0]);

  /////////////////////////////////////////
  /////////////////////////////////////////
  /////////////////////////////////////////

  // Расчет объема оказанных услуг
  exWks2.Select;
  exWks2.Range['self_name']         := VarToStr(retActSettings[12][1]);
  exWks2.Range['customer_name']     := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks2.Range['period_name']       := 'с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + '';

  // Данные отчета - перевозки
  ShowTextMessage('Акт: ОК'#10'Расчет объема: Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks2.Rows[IntToStr(recNo + 14)].Insert;
    exWks2.Rows[IntToStr(recNo + 13)].Copy;
    exWks2.Rows[IntToStr(recNo + 14)].PasteSpecial(1);

    exWks2.Range['A' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks2.Range['B' + IntToStr(recNo + 13)].Value := recNo;
    exWks2.Range['C' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks2.Range['D' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks2.Range['E' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName(fld_node + '_begin_name').AsString;
    exWks2.Range['F' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks2.Range['G' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName(fld_node + '_end_name').AsString;
    exWks2.Range['H' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName('datpr').Value;
    exWks2.Range['I' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_cod').AsString;

    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName(fld_node + '_begin_cod').AsString, SP_Balans_Detail.FieldByName(fld_node + '_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName(fld_node + '_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName(fld_node + '_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
      ClientDS_distance.Post;
    end;
    exWks2.Range['J' + IntToStr(recNo + 13)].Value := ClientDS_distance.FieldByName('distance').Value;

    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks2.Range['K' + IntToStr(recNo + 13)].Value := null
    else
      exWks2.Range['K' + IntToStr(recNo + 13)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    inc(recNo);

    ShowTextMessage('Акт: ОК'#10'Расчет объема: Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  exWks2.Rows[IntToStr(13 + recNo)].Delete;
  if recNo > 1 then
    exWks2.Rows[IntToStr(13 + recNo)].Delete
  else begin
    exWks2.Rows[IntToStr(13 + recNo)].ClearContents;
    recNo := 2;
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exWks2.Range['A1'].Select;
  exWks.Select;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks2); VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton143Click(Sender: TObject);
var i : Integer;
begin
  Screen.Cursor := crHourglass;

  if dxBarButton143.Down then begin
    dxBarManager1Bar1.Color := clDefault;
    dxBarSubItem33.ImageIndex := 25;
    dxBarButton3.Caption := 'Месяц перевозки';
    dxBarButton4.Caption := 'Период перевозки';
  end else begin
    dxBarManager1Bar1.Color := $00D4F0D4;
    dxBarSubItem33.ImageIndex := 21;
    dxBarButton3.Caption := 'Финансовый месяц';
    dxBarButton4.Caption := 'Финансовый период';
  end;

  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton144Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;
  ClientDS_distance   : TClientDataSet;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 259 = 'Акт оказанных услуг + Вагон (Верхнебаканский цементный завод)'
  // 434 = 'Акт оказанных услуг + Вагон (СребряковЦемент)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN or ACT_SET_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;


  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['M3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['N18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:G20'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E22'].Value := retActSettings[13][4];
  end else
    exWks.Range['B22:G22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['N20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['R20'].Value := retActSettings[13][7];
  end else
    exWks.Range['N20:S20'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['N22'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['R22'].Value := retActSettings[13][10];
  end else
    exWks.Range['N22:S22'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['20:22'].Copy;
    exWks.Rows['24:26'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B24'].Value := 'Дата подписания';
    exWks.Range['B26'].Value := '"____" __________________ 201__';
    exWks.Range['N24'].Value := 'Дата подписания';
    exWks.Range['N26'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['N10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['P10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['Q10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['R10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['S10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['K10'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_VerhneBakanskiy;1';

  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value       := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value     := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin').Value        := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end').Value          := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value       := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon').Value      := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact').Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value    := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    if (SP_Balans_Detail.FieldByName('bargain_correct_type').AsInteger = 1) or (SP_Balans_Detail.FieldByName('summa').AsCurrency > 0) then begin
      exWks.Rows[IntToStr(11 + recNo)].Insert;
      exWks.Rows[IntToStr(10 + recNo)].Copy;
      exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

      if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
        exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
      else // Доп. сбор.
        exWks.Range['A' + IntToStr(10 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
      exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
      if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
      else
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
      // Номера вагонов и накладных выводим только в случае не спрятанных колонок
      if exWks.Range['H:H'].EntireColumn.Hidden = False then
        exWks.Range['H' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('vagon_name').AsString;
      if exWks.Range['I:I'].EntireColumn.Hidden = False then
        exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('doc_name').AsString;

      exWks.Range['J' + IntToStr(10 + recNo)].Value := null;
      if exWks.Range['J:J'].EntireColumn.Hidden = False then begin
        // Заполняем, если колонка не спрятана
        // Расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('node_begin_cod').AsString, SP_Balans_Detail.FieldByName('node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_period').AsDatetime);
          ClientDS_distance.Post;
        end;
        exWks.Range['J' + IntToStr(10 + recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
      end;

      exWks.Range['K' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['L' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['L' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['M' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['M' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['O' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['N' + IntToStr(10 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      exWks.Range['P' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;
      exWks.Range['S' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

      inc(recNo);
    end;

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['S' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton160Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 283 = 'Акт оказанных услуг + Вагон (НПК)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN or ACT_SET_KARGOFROMFACT);
  if retActSettings[0] = -9 then
    exit;


  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['N3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['O18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:G20'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E22'].Value := retActSettings[13][4];
  end else
    exWks.Range['B22:G22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['O20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['S20'].Value := retActSettings[13][7];
  end else
    exWks.Range['O20:T20'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['O22'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['S22'].Value := retActSettings[13][10];
  end else
    exWks.Range['O22:T22'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['20:22'].Copy;
    exWks.Rows['24:26'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B24'].Value := 'Дата подписания';
    exWks.Range['B26'].Value := '"____" __________________ 201__';
    exWks.Range['O24'].Value := 'Дата подписания';
    exWks.Range['O26'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['O10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['Q10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['R10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['S10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['T10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['L10'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  case cod_shablon of
    283: SP_Balans_Detail.ProcedureName := 'sp_act_report_VerhneBakanskiy;1';
  end;
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value       := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value     := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin').Value        := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end').Value          := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value       := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon').Value      := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact').Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value    := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    if (SP_Balans_Detail.FieldByName('bargain_correct_type').AsInteger = 1) or (SP_Balans_Detail.FieldByName('summa').AsCurrency > 0) then begin
      exWks.Rows[IntToStr(11 + recNo)].Insert;
      exWks.Rows[IntToStr(10 + recNo)].Copy;
      exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

      if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
        exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
      else // Доп. сбор.
        exWks.Range['A' + IntToStr(10 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
      exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
      if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
      else
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
      // Номера вагонов и накладных выводим только в случае не спрятанных колонок
      if exWks.Range['H:H'].EntireColumn.Hidden = False then
        exWks.Range['H' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('vagon_name').AsString;
      if exWks.Range['I:I'].EntireColumn.Hidden = False then
        exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('doc_name').AsString;
      if exWks.Range['J:J'].EntireColumn.Hidden = False then
        exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_from_to_name').AsString;
      if exWks.Range['K:K'].EntireColumn.Hidden = False then
        exWks.Range['K' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('datpr_name').AsString;

      exWks.Range['L' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['M' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['M' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['N' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['N' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['P' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['O' + IntToStr(10 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      exWks.Range['Q' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;
      exWks.Range['T' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

      inc(recNo);
    end;

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['T' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton161Click(Sender: TObject);
type
  TFunc =  function(AppHandle: THandle; user_pwd: PUser_pwd; bargain_id: integer; var ClientDS: TClientDataSet; str_fact_id : string): variant;
var
                v : variant;
                i : integer;
  SearchLibHandle : THandle;
  FSearchFact     : TFunc;
  ClientDS        : TClientDataSet;
begin
  ClientDS := TClientDataSet.Create(nil);
  ShowSearchFact_ClientDSFields(ClientDS);

  SearchLibHandle := LoadLibrary('Search.dll');
  @FSearchFact := GetProcAddress(SearchLibHandle, 'CreateWndFactSearchBargainDlg');
  v := FSearchFact(Application.Handle, usr_pwd, cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger, ClientDS, GetStrId(cxGrid2DBBandedTableView1fact_id, ','));
  FreeLibrary(SearchLibHandle);

  if v[0] = True then begin
    for i:=0 to fmMain.MDIChildCount-1 Do
      if (fmMain.MDIChildren[i].ClassName = 'TfmFact') then begin
        fmMain.MDIChildren[i].Free;
        break;
      end;
    fmFact := TfmFact.Create(self, true);
    fmFact._SetSQLFilter := ClientDS;
  end;

  ClientDS.Free;
end;

procedure TfmAgree2.dxBarButton163Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  recXls              : integer;
  str_bargain_id      : string;

  str_expeditor       : array [1..2] of string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;

  // 285 = 'Акт расчета арендной платы (Транс Синергия)'
  // 418 = 'Акт расчета арендной платы (Транспорттыне Технологии)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['B2'].Value := 'Акт расчета арендной платы № #NUM# ' +
                             'по Договору аренды № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['J4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем «' + str_expeditor[1] + '», ' +
                             'в лице ' + VarToStr(retActSettings[4][2]) + ' с одной стороны, ' +
                             'и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем «' + str_expeditor[2] + '», ' +
                             'в лице ' + VarToStr(retActSettings[5][2]) + ', с другой стороны, ' +
                             'совместно именуемые в дальнейшем «Стороны», а каждая в отдельности «Сторона», ' +
                             'составили настоящий акт о нижеследующем:'#10;

  exWks.Range['B7'].Value := '1. За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. включительно ' +
                             'в рамках Договора аренды № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г. ' +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' ' +
                             ReplaceStr(str_expeditor[2] + 'у', 'ьу', 'ю') + ' ' +
                             'были оказаны услуги по предоставлению в аренду вагонов-цистерн надлежащим образом и в полном объеме.'#10;


  // Подписанты - собственная
  exWks.Range['C22'].Value := str_expeditor[1];
  if retActSettings[13][2] = True then begin
    exWks.Range['C24'].Value := retActSettings[14][1];
    exWks.Range['D26'].Value := retActSettings[13][1];
  end else begin
    exWks.Range['C24'].Value := Null;
    exWks.Range['D26'].Value := Null;
  end;

  // Подписанты - контрагент
  if cod_shablon = 285 then begin
    exWks.Range['I22'].Value := str_expeditor[2];
    if retActSettings[13][8] = True then begin
      exWks.Range['I24'].Value := retActSettings[14][7];
      exWks.Range['J26'].Value := retActSettings[13][7];
    end else begin
      exWks.Range['I24'].Value := Null;
      exWks.Range['J26'].Value := Null;
    end;
  end else begin // cod_shablon = 418
    exWks.Range['J22'].Value := str_expeditor[2];
    if retActSettings[13][8] = True then begin
      exWks.Range['J24'].Value := retActSettings[14][7];
      exWks.Range['K26'].Value := retActSettings[13][7];
    end else begin
      exWks.Range['J24'].Value := Null;
      exWks.Range['K26'].Value := Null;
    end;
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B6']);
  AutoFitMergeCell(exWks.Range['B7']);

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['24:24'].Copy;
    exWks.Rows['28:30'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['C28'].Value := 'Дата подписания';
    exWks.Range['C30'].Value := '"____" __________________ 201__';
    if cod_shablon = 285 then begin
      exWks.Range['I28'].Value := 'Дата подписания';
      exWks.Range['I30'].Value := '"____" __________________ 201__';
    end else begin // cod_shablon = 418
      exWks.Range['J28'].Value := 'Дата подписания';
      exWks.Range['J30'].Value := '"____" __________________ 201__';
    end;
  end;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recNo := 1;
  recXls := 11;
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

//    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := recNo;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('datpr').Value;
    if SP_Balans_Detail.FieldByName('quantity').IsNull then
      exWks.Range['I' + IntToStr(recXls)].Value := null
    else
      exWks.Range['I' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('quantity').AsFloat;

    if cod_shablon = 285 then
      exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('rate').AsFloat
    else // cod_shablon = 418
      exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('rate_without_nds').AsFloat;

    inc(recNo);
    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // удаляем одну запись и один блок
  exWks.Rows[IntToStr(recXls) + ':' + IntToStr(recXls)].Delete;
  if recNo = 1 then begin
    exWks.Rows[IntToStr(recXls) + ':' + IntToStr(recXls)].ClearContents;
    recXls := 12;
  end else begin
    exWks.Rows[IntToStr(recXls) + ':' + IntToStr(recXls)].Delete;
  end;

  SP_Balans_Detail.Free;

  // Сумма прописью
  exWks.Range['B8'].Value := '2. Стоимость оказанных услуг в период ' +
                             'с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. ' +
                             'по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. ' +
                             'составляет ' + VarToStr(exWks.Range['acts_sum'].Text) + ' ' +
                             '(' + GetSumScript_RUS(exWks.Range['acts_sum'].Value, retActSettings[7][0]) + ') ' +
                             'в том числе НДС (18%) - ' + VarToStr(exWks.Range['acts_sum_nds'].Text) + ' ' +
                             '(' + GetSumScript_RUS(exWks.Range['acts_sum_nds'].Value, retActSettings[7][0]) + ')';
  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B8']);

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton164Click(Sender: TObject);
var Q, Q1 : TADOQuery;
    i : integer;
    date_serv : TDateTime;
begin
  Screen.Cursor := crHourglass;
  // ----- users_group_id не используется
  // ----- малая вероятность отправки в период 2 дней одного и того же вагона от разных палтельщиков с одним номером накладной
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT TOP 1 date_serv FROM zfto_score_table WHERE (number_doc = :number_doc) AND (vagon_num = :vagon_num)');
  Q.SQL.Add('AND (date_dep BETWEEN :date1 AND :date2)');

  Q1 := TADOQuery.Create(nil);
  Q1.Connection := Fconnect;
  Q1.SQL.Add('UPDATE fact SET datpr = :datpr, date_delivery = :date_delivery  WHERE fact_id = :fact_id');

  for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
    ShowTextMessage('Осталось ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i) + ' записей...', False);
    Q.Close;
    Q.Parameters.ParamByName('number_doc').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1num_document.Index];
    Q.Parameters.ParamByName('vagon_num').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1num_vagon.Index];
    Q.Parameters.ParamByName('date1').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1date_from_to.Index] - 1;
    Q.Parameters.ParamByName('date2').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1date_from_to.Index] + 1;
    Q.Open;
    if Q.RecordCount > 0 then begin
      date_serv := Q.FieldByName('date_serv').AsDateTime;
      Q1.Close;
      Q1.Parameters.ParamByName('fact_id').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      Q1.Parameters.ParamByName('date_delivery').Value := date_serv;
      Q1.Parameters.ParamByName('datpr').Value := date_serv;
      Q1.ExecSQL;
    end;
  end;

  Q1.Free;
  Q.Free;
  RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id', cxGrid2DBBandedTableView1fact_id.DataBinding.Field.AsInteger);
  ShowTextMessage();

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton165Click(Sender: TObject);
var     i : integer;
       sp : TADOStoredProc;
  str_err : string;
begin
  str_err := '';
  sp := TADOStoredProc.Create(nil);
  sp.Connection := Fconnect;
  sp.ProcedureName := 'sp_bargain_change_set_bargain_weight';
  sp.Parameters.Refresh;

  Screen.Cursor := crHourglass;
  for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
    if cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1date_period_finance.Index] <> Null then
      str_err := str_err + ',' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  end;

  Delete(str_err, 1, 1);
  if str_err = '' then begin
    for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
      sp.Close;
      sp.Parameters.ParamByName('@bargain_id'        ).Value := cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index];
      sp.Parameters.ParamByName('@set_bargain_weight').Value := (TdxBarButton(Sender).Tag = 1);
      try
        sp.ExecProc;
      except
      end;
      ShowTextMessage('Осталось '+IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRowCount - i)+' строк...', False);
    end;
  end else begin
    Application.MessageBox(Pchar('У записи(-ей) №: ' + str_err + ' закрыт финансовый месяц (поле "Финанс.месяц").'
    + #10#13 + 'Изменение веса НЕВОЗМОЖНО!'),'Ошибка', MB_ICONERROR or MB_OK);
  end;

  ShowTextMessage();
  sp.Free;
  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton16Click(Sender: TObject);
var
  retActSettings      : Variant;

  str_bargain_id      : string;
  contract_agent_id   : integer;
  contract_agent_cod  : string;
  firm_agent_name     : string;
  firm_agent_name_eng : string;
  firm_self_name_eng  : string;
  contract_agent_date : TDate;
  currency_id         : integer;
  brief_name          : string;
  wide_name           : string;

  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query               : TADOQuery;
  Query_tmp           : TADOQuery;
  recNo_Score         : integer;
  recNo_Pays          : integer;
  recNo_FirstPart     : integer;

  str_expeditor       : array [1..4] of string;
  str_expeditor_eng   : array [1..4] of string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 199 = 'Акт сверки расчетов (подрядчик)'

  if SP_Agree.Eof then exit;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  // Выбор контракта подрядчика
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT DISTINCT contract_id = contract_agent_id, contract_cod = contract_agent_cod, firm_customer_name = firm_agent_name');
  Query.SQL.Add('FROM view_shaping_rate');
  Query.SQL.Add('WHERE bargain_id in (' + str_bargain_id + ')');
  Query.Open;

  contract_agent_id := -9;
  if Query.RecordCount = 1 then contract_agent_id  := Query.FieldByName('contract_id').AsInteger;
  if Query.RecordCount > 1 then begin
    fmFilter := TfmFilter.Create(0, Query, 'contract_id', 'contract_cod', 'firm_customer_name');
    fmFilter._SetContract4FactIncChoose := True;
    if fmFilter.ShowModal = mrOk then contract_agent_id := fmFilter.GetId;
    fmFilter.Free;
  end;
  Query.Free;

  if contract_agent_id = -9 then begin
    Screen.Cursor := crDefault;
    Application.MessageBox('Не выбран подрядчик', 'ВНИМАНИЕ', MB_OK);
    Exit;
  end;

  // --- данные контракта подрядчика -----
  // --- валюта договора по умолчанию для акта сверки -----
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT contract_cod, date_begin, firm_customer_name_full, currency_id, brief_name, wide_name, firm_self, firm_customer, ');
  Query.SQL.Add('type_firm_self_name, type_firm_customer_name, ');
  Query.SQL.Add('type_firm_self_name_translit, type_firm_customer_name_translit ');
  Query.SQL.Add('FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_id));
  Query.Open;

  str_expeditor[1] := Query.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query.FieldByName('type_firm_customer_name').AsString;
  str_expeditor[3] := 'задолженность ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е');
  str_expeditor[4] := 'задолженность ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е');

  str_expeditor_eng[1] := Query.FieldByName('type_firm_self_name_translit').AsString;
  str_expeditor_eng[2] := Query.FieldByName('type_firm_customer_name_translit').AsString;
  str_expeditor_eng[3] := 'total ' + str_expeditor_eng[2] + '''s debt to the ' + str_expeditor_eng[1];
  str_expeditor_eng[4] := 'total ' + str_expeditor_eng[1] + '''s debt to the ' + str_expeditor_eng[2];

  contract_agent_cod  := Query.FieldByName('contract_cod').AsString;
  contract_agent_date := Query.FieldByName('date_begin').AsDateTime;
  firm_agent_name     := Query.FieldByName('firm_customer_name_full').AsString;
  currency_id         := Query.FieldByName('currency_id').AsInteger;
  brief_name          := Query.FieldByName('brief_name').AsString;
  wide_name           := Query.FieldByName('wide_name').AsString;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT ISNULL(NULLIF(firm_name_eng, ''''), firm_name_short) as firm_name_eng FROM firm WHERE firm_id = :firm_id');
  Query_tmp.Close;
  Query_tmp.Parameters.ParamByName('firm_id').Value := Query.FieldByName('firm_self').AsInteger;
  Query_tmp.Open;
  firm_self_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
  Query_tmp.Close;
  Query_tmp.Parameters.ParamByName('firm_id').Value := Query.FieldByName('firm_customer').AsInteger;
  Query_tmp.Open;
  firm_agent_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
  Query_tmp.Close;

  Query_tmp.Free;
  Query.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией подрядчиком',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 3, 0, contract_agent_id);
  if retActSettings[0] = -9 then
    exit;
  // подменяем валюту, на валюту договора с подрядчиком
  retActSettings[7] := VarArrayOf([currency_id, brief_name]);


  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;
  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_agent;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := contract_agent_id;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := currency_id;
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];
  SP_Balance.ExecProc;

  if SP_Balance.Parameters.ParamByName('@contract_id').Value = -9 then begin
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Первичный платёж установлен позже указанного периода. Начальное сальдо не сформировано', 'Внимание', MB_OK);
    SP_Balance.Free;
    Exit;
  end;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon)); // 'Акт сверки расчетов (подрядчик).xls'
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Национальные даты и валюта
  exWks.Range['contract_date_rus'].Value := contract_agent_date;
  exWks.Range['date_from_rus'].Value     := retActSettings[3][1];
  exWks.Range['date_to_rus'].Value       := retActSettings[3][2];
  exWks.Range['exch1'].Value             := wide_name;
  exWks.Range['exch2'].Value             := brief_name;

  exWks.Columns['L:L'].Hidden := False;

  exWks.Range['B3'].Value := 'между ' + firm_agent_name +
                             ' и ' + VarToStr(retActSettings[12][1]) + #10 +
                             'Договор № ' + contract_agent_cod + ' от ' +
                             VarToStr(exWks.Range['contract_date_rus'].Text);
  exWks.Range['E8'].Value := 'за период c ' + VarToStr(exWks.Range['date_from_rus'].Text) + ' по ' + VarToStr(exWks.Range['date_to_rus'].Text);
  exWks.Range['B6'].Value := 'between ' + firm_agent_name_eng +
                             ' and ' + firm_self_name_eng + #10 +
                             'Agreement № ' + contract_agent_cod + ' d.d. ' +
                             VarToStr(exWks.Range['contract_date_eng'].Text);
  exWks.Range['E9'].Value := 'from ' + VarToStr(exWks.Range['date_from_eng'].Text) + ' till ' + VarToStr(exWks.Range['date_to_eng'].Text);
  exWks.Range['K10'].Value := retActSettings[3][0];

  exWks.Range['B12'].Value := VarToStr(retActSettings[12][1]) +
                             ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + firm_agent_name +
                             ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", ' +
                             'с другой стороны, составили настоящий Акт сверки расчетов:';
  AutoFitMergeCell(exWks.Range['B12']);
  exWks.Range['B13'].Value := firm_self_name_eng +
                             ' hereinafter referred to as ' + str_expeditor_eng[1] + ', through its ' + VarToStr(retActSettings[4][5]) +
                             ', on the one part and ' + firm_agent_name_eng + ', on the other part' +
                             ', hereinafter referred to as ' + str_expeditor_eng[2] + ', through its ' + VarToStr(retActSettings[5][5]) +
                             ', draw up the statement of account:';
  AutoFitMergeCell(exWks.Range['B13']);


  exWks.Range['B20'].Value := 'Оказаны услуги ' + firm_agent_name + ' / Provided services by ' + firm_agent_name_eng;
  exWks.Range['G20'].Value := 'Платежи ' + VarToStr(retActSettings[12][1]) + ' / Payments of ' + firm_self_name_eng;
  exWks.Range['B36'].Value := VarToStr(retActSettings[12][1]) + ' / ' + firm_self_name_eng;;
  exWks.Range['H36'].Value := firm_agent_name + ' / ' + firm_agent_name_eng;;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B38'].Value := VarToStr(retActSettings[14][1]) + #10 + VarToStr(retActSettings[14][2]);
    exWks.Range['E38'].Value := retActSettings[13][1];
  end else
    exWks.Range['B38:F38'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B40'].Value := VarToStr(retActSettings[14][4]) + #10 + VarToStr(retActSettings[14][5]);
    exWks.Range['E40'].Value := retActSettings[13][4];
  end else
    exWks.Range['B40:F40'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['H38'].Value := VarToStr(retActSettings[14][7]) + #10 + VarToStr(retActSettings[14][8]);
    exWks.Range['J38'].Value := retActSettings[13][7];
  end else
    exWks.Range['H38:K38'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['H40'].Value := VarToStr(retActSettings[14][10]) + #10 + VarToStr(retActSettings[14][11]);
    exWks.Range['J40'].Value := retActSettings[13][10];
  end else
    exWks.Range['H40:K40'].ClearContents;

  exWks.Range['L18'].Value := SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000));
  SP_Balance.Free;

  // Данные отчета (заполнение происходит снизу-вверх)
  // Счета (верхняя-левая часть)
  ShowTextMessage('Формирование отчета: Шаг 1 из 2', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice.invoice_id, invoice_cod, invoice_date, currency_id, subject_nds,');
  Query.SQL.Add('summa = ROUND(SUM(subject_sum) * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, null, null, null, invoice_date, 0), 2)');
  Query.SQL.Add('FROM invoice');
  Query.SQL.Add('JOIN invoice_table ON invoice.invoice_id = invoice_table.invoice_id');
  Query.SQL.Add('WHERE type_invoice = 1 AND contract_id = :contract_id');
  Query.SQL.Add('AND invoice_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice.invoice_id, invoice_cod, invoice_date, currency_id, subject_nds');
  Query.SQL.Add('ORDER BY invoice.invoice_id, subject_nds');
  Query.Parameters.ParamByName('contract_id').Value := contract_agent_id;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  recNo_Score := 1;
  while not Query.Eof do begin
    exWks.Rows[IntToStr(21 + recNo_Score)].ClearContents;
    exWks.Rows[IntToStr(22 + recNo_Score)].Insert;
    exWks.Rows[IntToStr(21 + recNo_Score)].Copy;
    exWks.Rows[IntToStr(22 + recNo_Score)].PasteSpecial(1);

    exWks.Range['B' + IntToStr(21 + recNo_Score)].Value := 'счет / invoice';
    exWks.Range['C' + IntToStr(21 + recNo_Score)].Value := Query.FieldByName('invoice_cod').AsString;
    exWks.Range['D' + IntToStr(21 + recNo_Score)].Value := Query.FieldByName('invoice_date').Value;
    if Query.FieldByName('subject_nds').IsNull then
      exWks.Range['E' + IntToStr(21 + recNo_Score)].Value := 'Без НДС / without VAT'
    else
      exWks.Range['E' + IntToStr(21 + recNo_Score)].Value := Query.FieldByName('subject_nds').AsString + '%';
    exWks.Range['F' + IntToStr(21 + recNo_Score)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo_Score);
  end;
  Query.Free;

  // Платежи (обычные) (верхняя-правая часть)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 2 из 2', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, type_nds_name_eng, incomming_cod, ');
  Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 1');
  Query.SQL.Add('AND (set_return = 0)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := contract_agent_id;
  Query.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query.Open;

  recNo_Pays := 1;
  while not Query.Eof do begin
    if (recNo_Pays >= recNo_Score) then begin
      exWks.Rows[IntToStr(21 + recNo_Pays)].ClearContents;
      exWks.Rows[IntToStr(22 + recNo_Pays)].Insert;
      exWks.Rows[IntToStr(21 + recNo_Pays)].Copy;
      exWks.Rows[IntToStr(22 + recNo_Pays)].PasteSpecial(1);
    end;

    exWks.Range['G' + IntToStr(21 + recNo_Pays)].Value := 'п/п / Pay';
    exWks.Range['H' + IntToStr(21 + recNo_Pays)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['I' + IntToStr(21 + recNo_Pays)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['J' + IntToStr(21 + recNo_Pays)].Value := Query.FieldByName('type_nds_name').AsString;
    if Query.FieldByName('type_nds_name').AsString <> Query.FieldByName('type_nds_name_eng').AsString then
      exWks.Range['J' + IntToStr(21 + recNo_Pays)].Value := Query.FieldByName('type_nds_name').AsString + ' / ' + Query.FieldByName('type_nds_name_eng').AsString;
    exWks.Range['K' + IntToStr(21 + recNo_Pays)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo_Pays);
  end;
  Query.Free;

  if (recNo_Pays > recNo_Score) then recNo_FirstPart := recNo_Pays else recNo_FirstPart := recNo_Score;

  if (recNo_FirstPart <> 1) then exWks.Rows[IntToStr(21 + recNo_FirstPart)].Delete
  else recNo_FirstPart := recNo_FirstPart + 1;
  exWks.Rows[IntToStr(21 + recNo_FirstPart)].Delete;

  // Пункты акта
  exWks.Range['B15'].Value := '1. По Договору № ' + contract_agent_cod + ', ' +
                             VarToStr(iif(exWks.Range['L18'].Value <= 0,  str_expeditor[3], str_expeditor[4])) + ' ' +
                             'по состоянию на ' + VarToStr(exWks.Range['date_from_rus'].Text) + ' составляет:';
  AutoFitMergeCell(exWks.Range['B15']);
  exWks.Range['B16'].Value := '1. According to the Agreement No ' + contract_agent_cod + ' ' +
                             VarToStr(iif(exWks.Range['L18'].Value <= 0,  str_expeditor_eng[3], str_expeditor_eng[4])) + ' ' +
                             'as of the ' + VarToStr(exWks.Range['date_from_eng'].Text) + ' is the following:';
  AutoFitMergeCell(exWks.Range['B16']);

  if recNo_FirstPart = 1 then exWks.Range['L' + IntToStr(32 + recNo_FirstPart)].Value := '=L18';
  exWks.Range['B' + IntToStr(27 + recNo_FirstPart)].Value :=
                             '2. По Договору № ' + contract_agent_cod + ', ' +
                             VarToStr(iif(exWks.Range['L' + IntToStr(30 + recNo_FirstPart)].Value <= 0,  str_expeditor[3], str_expeditor[4])) + ' ' +
                             'по состоянию на ' + VarToStr(exWks.Range['date_to_rus'].Text) + ' составляет:';
  AutoFitMergeCell(exWks.Range['B' + IntToStr(27 + recNo_FirstPart)]);
  exWks.Range['B' + IntToStr(28 + recNo_FirstPart)].Value :=
                             '2. According to the Agreement No ' + contract_agent_cod + ' ' +
                             VarToStr(iif(exWks.Range['L' + IntToStr(30 + recNo_FirstPart)].Value <= 0,  str_expeditor_eng[3], str_expeditor_eng[4])) + ' ' +
                             'as of the ' + VarToStr(exWks.Range['date_to_eng'].Text) + ' is the following:';
  AutoFitMergeCell(exWks.Range['B' + IntToStr(28 + recNo_FirstPart)]);

  exWks.Columns['L:L'].Hidden := True;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton170Click(Sender: TObject);
var
  retActSettings    : Variant;

  exApp, exWkb      : Variant;
  exWks_rep         : Variant;
  exWks_pril        : Variant;
  SP_Balans_Detail  : TADOStoredProc;
  Query_tmp         : TADOQuery;
  recRep            : integer;
  recPril           : integer;
  bargain_id        : integer;
  str_bargain_id    : string;
  str_expeditor     : array [1..2] of string;
  PrintArea           : string;
  cod_shablon       : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 323 = 'Акт оказанных услуг + Вагон (СФХ-Приволжск, НДС от общей суммы)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;
  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks_rep := exWkb.WorkSheets[1];
  exWks_pril := exWkb.WorkSheets[2];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks_rep.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks_rep.Range['title_str'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                           'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                           'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  exWks_rep.Range['acts_date'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks_rep.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                           ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                           ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, совместно именуемые в дальнейшем "Стороны", составили настоящий Акт о нижеследующем:';

  exWks_rep.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks_rep.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks_rep.Range['self_firm_name'].Value := VarToStr(retActSettings[12][1]);
  exWks_rep.Range['customer_firm_name'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks_rep.Range['B20'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks_rep.Range['B20'].Value := Null;
  if retActSettings[13][5] = True then
    exWks_rep.Range['B22'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks_rep.Range['B22'].Value := Null;
  if retActSettings[13][8] = True then
    exWks_rep.Range['I20'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks_rep.Range['I20'].Value := Null;
  if retActSettings[13][11] = True then
    exWks_rep.Range['I22'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
  else
    exWks_rep.Range['I22'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks_rep.PageSetup.PrintArea;
    PrintArea := exWks_rep.Range[PrintArea].Resize[exWks_rep.Range[PrintArea].Rows.Count + 4, exWks_rep.Range[PrintArea].Columns.Count].Address;
    exWks_rep.PageSetup.PrintArea := WideString(PrintArea);
    // 2. Копируем формат
    exWks_rep.Rows['20:20'].Copy;
    exWks_rep.Rows['24:26'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks_rep.Range['B24'].Value := 'Дата подписания';
    exWks_rep.Range['B26'].Value := '"____" __________________ 201__';
    exWks_rep.Range['L24'].Value := 'Дата подписания';
    exWks_rep.Range['L26'].Value := '"____" __________________ 201__';
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks_rep.Range['K10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_rep.Range['L10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_rep.Range['M10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);

    exWks_pril.Range['L4'].Value := 'Ставка без НДС, ' + VarToStr(retActSettings[7][1]) + '/' + SP_Agree.FieldByName('ed_izm_name').AsString;
    exWks_pril.Range['M4'].Value := 'Ставка c НДС, ' + VarToStr(retActSettings[7][1]) + '/' + SP_Agree.FieldByName('ed_izm_name').AsString;
    exWks_pril.Range['N4'].Value := 'Стоимость услуг без НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks_rep.Range['B5']);
  AutoFitMergeCell(exWks_rep.Range['B7']);
  AutoFitMergeCell(exWks_rep.Range['B16']);

  AutoFitMergeCell(exWks_rep.Range['B20']);
  AutoFitMergeCell(exWks_rep.Range['B22']);
  AutoFitMergeCell(exWks_rep.Range['I20']);
  AutoFitMergeCell(exWks_rep.Range['I22']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Заполняем
  recRep := 1; recPril := 1; bargain_id := -9;
  while not SP_Balans_Detail.Eof do begin
    if (bargain_id <> SP_Balans_Detail.FieldByName('bargain_id').AsInteger) then begin
      // Строка в Акт
      exWks_rep.Rows[IntToStr(recRep + 11)].Insert;
      exWks_rep.Rows[IntToStr(recRep + 10)].Copy;
      exWks_rep.Rows[IntToStr(recRep + 11)].PasteSpecial(1);

      exWks_rep.Range['A' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks_rep.Range['B' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks_rep.Range['C' + IntToStr(10 + recRep)].Value := recRep;
      exWks_rep.Range['D' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;

      if (SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString = '') then
        exWks_rep.Range['E' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString + SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString
      else
        exWks_rep.Range['E' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;

      exWks_rep.Range['F' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks_rep.Range['G' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks_rep.Range['J' + IntToStr(10 + recRep)].Value := Query_NDS.FieldByName('nds_name').AsString;

      bargain_id := SP_Balans_Detail.FieldByName('bargain_id').AsInteger;
      Inc(recRep);
    end;

    // Строка в "Отчет к акту"
    exWks_pril.Rows[IntToStr(recPril + 5)].Insert;
    exWks_pril.Rows[IntToStr(recPril + 4)].Copy;
    exWks_pril.Rows[IntToStr(recPril + 5)].PasteSpecial(1);

    exWks_pril.Range['A' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks_pril.Range['B' + IntToStr(recPril + 4)].Value := recPril;
    exWks_pril.Range['C' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks_pril.Range['D' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks_pril.Range['E' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('datpr').Value;
    exWks_pril.Range['F' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks_pril.Range['G' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('fact_node_begin_name').AsString;
    exWks_pril.Range['H' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('fact_node_end_name').AsString;
    exWks_pril.Range['I' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('fact_kargoETSNG_name').AsString;
    if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
      exWks_pril.Range['J' + IntToStr(recPril + 4)].Value := null
    else
      exWks_pril.Range['J' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;
    exWks_pril.Range['K' + IntToStr(recPril + 4)].Value := Query_NDS.FieldByName('nds_name').AsString;

    exWks_pril.Range['M' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('rate').Value;
    exWks_pril.Range['O' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('summa').Value;

    inc(recPril);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // удаляем лишниие
  if bargain_id = -9 then begin
    exWks_rep.Rows['12:12'].Delete;
    exWks_rep.Rows['11:11'].ClearContents;

    exWks_pril.Rows['6:6'].Delete;
    exWks_pril.Rows['5:5'].ClearContents;

    recRep := 2;
  end else begin
    exWks_rep.Rows[IntToStr(recRep + 10) + ':' + IntToStr(recRep + 11)].Delete;

    exWks_pril.Rows[IntToStr(recPril + 4) + ':' + IntToStr(recPril + 5)].Delete;
  end;

  SP_Balans_Detail.Free;

  exWks_pril.Select;
  exWks_pril.Range['A1'].Select;
  exWks_rep.Select;
  exWks_rep.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks_rep, retActSettings, str_bargain_id, exWks_rep.Range['M' + IntToStr(10 + recRep)].Value);
  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks_rep); VarClear(exWks_pril); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton171Click(Sender: TObject);
type
  TFunc = function(AppHand : THandle; str_vagon_num : string) : Variant;
var
  FDic   : TFunc;
  handle : THandle;
  v      : Variant;
begin
  handle := LoadLibrary('dictionary.dll');
  @FDic := GetProcAddress(handle, 'CreateWndChoose_Ext');
  v := FDic(Application.Handle, str_vagon_num);
  FreeLibrary(handle);

  cxGrid2DBBandedTableView1.DataController.DataSet.DisableControls;
  if v[1] = True then begin
    str_vagon_num := v[0];
    FiltercxGrid4ListID(cxGrid2DBBandedTableView1, 'num_vagon', AnsiReplaceStr(str_vagon_num, #13#10, ','));
  end else begin
    cxGrid2DBBandedTableView1.DataController.Filter.Clear;
  end;
  cxGrid2DBBandedTableView1.DataController.DataSet.EnableControls;

  VarClear(v);

end;

procedure TfmAgree2.dxBarButton173Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recXls              : integer;
  i, j                : integer;
  str_bargain_id      : string;

  ClientDS_distance   : TClientDataSet;
  str_expeditor       : array [1..2] of string;
  nds_rate            : Currency;
  cod_shablon         : Integer;
  type_shablon        : String;

  old_bargain_id      : Integer;
  old_rate            : Currency;
  old_node_begin_cod  : String;
  old_node_end_cod    : String;

  fld_node            : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  type_shablon := 'Акт';
  if cod_shablon = 334 then
    type_shablon := 'Расчет';

  // 331 = 'Акт оказанных услуг (НХС)'
  // 334 = 'Расчет стоимости  оказанных  услуг (НХС)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ALLPARAMFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  // Валюта всегда рубли
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;
  // Пересчет номеров колонок
  i := 1;
  for j := 2 to 18 do begin
    if not exWks.Columns[j].EntireColumn.Hidden then begin
      exWks.Cells[14, j].Value := i;
      inc(i);
    end;
  end;

  // Заполняем шапку и подписи
  exWks.Range['B3'].Value := 'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B4'].Value := 'к Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['B5'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  exWks.Range['Q6'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B9'].Value := '    Мы, нижеподписавшиеся, представитель ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', в лице ' + VarToStr(retActSettings[4][2]) + ', с одной стороны' +
                             ', и представитель ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ', в лице ' + VarToStr(retActSettings[5][2]) + ', с другой стороны' +
                             ', составили настоящий ' + type_shablon + ' о нижеследующем:';

  exWks.Range['B11'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                              'указанные ниже, ' +
                              'в соответствии с Договором № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B27'].Value := 'Настоящий ' + type_shablon + ' составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B9']);
  AutoFitMergeCell(exWks.Range['B11']);

  exWks.Range['B29'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['L29'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B31'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E31'].Value := retActSettings[13][1];
  end else
    exWks.Range['B31:G31'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B33'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E33'].Value := retActSettings[13][4];
  end else
    exWks.Range['B33:G33'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['L31'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['O31'].Value := retActSettings[13][7];
  end else
    exWks.Range['L31:Q31'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['L33'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['O33'].Value := retActSettings[13][10];
  end else
    exWks.Range['L33:Q33'].ClearContents;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recXls := 15;
  old_bargain_id := -9; old_rate := -9;
  old_node_begin_cod  := ''; old_node_end_cod    := '';
  while not SP_Balans_Detail.Eof do begin
    if (old_bargain_id <> SP_Balans_Detail.FieldByName('bargain_id').AsInteger) or
       (old_rate <> SP_Balans_Detail.FieldByName('rate').AsCurrency) or
       (old_node_begin_cod <> SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString) or
       (old_node_end_cod <> SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString)
    then begin
      // новая группа
      if old_bargain_id <> -9 then begin
        // не первая группа, сначала закроем предыдущую
        exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].Delete;
        inc(recXls);
      end;

      // Копируем группу
      exWks.Rows[IntToStr(recXls + 3) + ':' + IntToStr(recXls + 5)].Insert;
      exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 2)].Copy;
      exWks.Rows[IntToStr(recXls + 3) + ':' + IntToStr(recXls + 5)].PasteSpecial(1);

      // Запоминаем значения для проверки группы
      old_bargain_id     := SP_Balans_Detail.FieldByName('bargain_id').AsInteger;
      old_rate           := SP_Balans_Detail.FieldByName('rate').AsCurrency;
      old_node_begin_cod := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
      old_node_end_cod   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
    end;

    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := SP_Balans_Detail.recNo;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
    exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks.Range['G' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['I' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;

    if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
      exWks.Range['K' + IntToStr(recXls)].Value := null
    else
      exWks.Range['K' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

    exWks.Range['L' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;

    if exWks.Range['M:M'].EntireColumn.Hidden = False then begin
      // Заполняем, если колонка не спрятана
      if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
        ClientDS_distance.Append;
        ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
        ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
        ClientDS_distance.FieldByName('distance').Value      := null;
        ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
        ClientDS_distance.Post;
      end;
      exWks.Range['M' + IntToStr(recXls)].Value := ClientDS_distance.FieldByName('distance').Value;
    end;

    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
    exWks.Range['N' + IntToStr(recXls)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsFloat * 100) / (100 + nds_rate), -2);

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['O' + IntToStr(recXls)].Value := Query_NDS.FieldByName('nds_name').AsString;

    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // Удаляем лишние
  if old_bargain_id <> -9 then begin
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].Delete;
    exWks.Rows[IntToStr(recXls + 1) + ':' + IntToStr(recXls + 6)].Delete;
  end else begin
    exWks.Rows[IntToStr(recXls + 0)].ClearContents;
    exWks.Rows[IntToStr(recXls + 1)].Delete;
    exWks.Rows[IntToStr(recXls + 2) + ':' + IntToStr(recXls + 4)].Delete;
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  // Сумма прописью
  exWks.Range['str_sum_act'].Value := '(' + GetSumScript_RUS(exWks.Range['sum_act'].Value, 3) + ')';
  exWks.Range['str_sum_nds'].Value := '(' + GetSumScript_RUS(exWks.Range['sum_nds'].Value, 3) + ')';

  exApp.CutCopyMode := False;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['sum_act'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton174Click(Sender: TObject);
var
  retActSettings    : Variant;

  exApp, exWkb      : Variant;
  exWks_rep         : Variant;
  exWks_pril        : Variant;
  SP_Balans_Detail  : TADOStoredProc;
  Query_tmp         : TADOQuery;
  recRep            : integer;
  recPril           : integer;
  bargain_id        : integer;
  rate_val          : Currency;
  doc_cod           : string;
  fact_weight       : Double;
  str_bargain_id    : string;
  str_expeditor     : array [1..2] of string;
  PrintArea           : string;
  cod_shablon       : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 332 = 'Акт приема-передачи (ГазпромНефть к ДС-3)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, 0);
  if retActSettings[0] = -9 then
    exit;
  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  // Валюта всегда рубли
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks_rep := exWkb.WorkSheets[1];
  exWks_pril := exWkb.WorkSheets[2];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks_rep.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks_rep.Range['contract_cod'].Value := SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks_rep.Range['acts_date'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks_rep.Range['B10'].Value := 'Представителями ' + VarToStr(retActSettings[12][1]) + ' в лице ' + VarToStr(retActSettings[4][2]) +
                           ', и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ' в лице ' + VarToStr(retActSettings[5][2]) +
                           ' составлен настоящий Акт о том, что за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' +
                           ' оказало услуги  по предоставлению железнодорожного подвижного состава' +
                           ' в соответствии с Договором № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.:';

  exWks_pril.Range['B11'].Value := 'Исполнитель: ' + VarToStr(retActSettings[12][1]);
  exWks_pril.Range['B12'].Value := 'Заказчик: ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks_pril.Range['C13'].Value := 'с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  // Подписанты
  if retActSettings[13][2] = True then
    exWks_rep.Range['self_dir'].Value := '/ ' + VarToStr(retActSettings[13][1]) + ' /'
  else
    exWks_rep.Range['self_dir'].Value := '/__________________/';

  if retActSettings[13][8] = True then
    exWks_rep.Range['customer_dir'].Value := '/ ' + VarToStr(retActSettings[13][7]) + ' /'
  else
    exWks_rep.Range['customer_dir'].Value := '/__________________/';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks_rep.Range['B10']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Заполняем
  recRep := 15; recPril := 17; bargain_id := -9; rate_val := -9; doc_cod := ''; fact_weight := 0;
  while not SP_Balans_Detail.Eof do begin

    if (bargain_id <> SP_Balans_Detail.FieldByName('bargain_id').AsInteger)
    or (rate_val <> SP_Balans_Detail.FieldByName('rate_without_nds').AsCurrency)
    or (doc_cod <> SP_Balans_Detail.FieldByName('num_document').AsString) then begin
      // Строка в Акт
      exWks_rep.Rows[IntToStr(recRep + 1)].Insert;
      exWks_rep.Rows[IntToStr(recRep + 0)].Copy;
      exWks_rep.Rows[IntToStr(recRep + 1)].PasteSpecial(1);

      exWks_rep.Range['A' + IntToStr(recRep)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks_rep.Range['B' + IntToStr(recRep)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
      exWks_rep.Range['E' + IntToStr(recRep)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
      exWks_rep.Range['I' + IntToStr(recRep)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
      exWks_rep.Range['L' + IntToStr(recRep)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
      if (SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString = '') then
        exWks_rep.Range['M' + IntToStr(recRep)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString + SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString
      else
        exWks_rep.Range['M' + IntToStr(recRep)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;

      exWks_rep.Range['O' + IntToStr(recRep)].Value := 0;
      exWks_rep.Range['P' + IntToStr(recRep)].Value := SP_Balans_Detail.FieldByName('rate_without_nds').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks_rep.Range['AE' + IntToStr(recRep)].Value := Query_NDS.FieldByName('nds_name').AsString;

      bargain_id := SP_Balans_Detail.FieldByName('bargain_id').AsInteger;
      rate_val := SP_Balans_Detail.FieldByName('rate_without_nds').AsCurrency;
      doc_cod := SP_Balans_Detail.FieldByName('num_document').AsString;

      fact_weight := 0;
      Inc(recRep);
    end;

    // Строка в "Отчет к акту"
    exWks_pril.Rows[IntToStr(recPril + 1)].Insert;
    exWks_pril.Rows[IntToStr(recPril + 0)].Copy;
    exWks_pril.Rows[IntToStr(recPril + 1)].PasteSpecial(1);

    exWks_pril.Range['A' + IntToStr(recPril)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks_pril.Range['B' + IntToStr(recPril)].Value := SP_Balans_Detail.RecNo;
    exWks_pril.Range['C' + IntToStr(recPril)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks_pril.Range['D' + IntToStr(recPril)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    exWks_pril.Range['E' + IntToStr(recPril)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks_pril.Range['F' + IntToStr(recPril)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks_pril.Range['G' + IntToStr(recPril)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;
    exWks_pril.Range['H' + IntToStr(recPril)].Value := SP_Balans_Detail.FieldByName('rate_without_nds').AsFloat;

//    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    // НДС один для группы - каждый раз его дергать смысла нет
    exWks_pril.Range['L' + IntToStr(recPril)].Value := Query_NDS.FieldByName('nds_name').AsString;

    fact_weight := fact_weight + exWks_pril.Range['G' + IntToStr(recPril)].Value;
    exWks_rep.Range['O' + IntToStr(recRep - 1)].Value := fact_weight;

    inc(recPril);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // удаляем лишниие
  if bargain_id = -9 then begin
    exWks_rep.Rows['15:15'].Delete;

    exWks_pril.Rows['18:18'].Delete;
    exWks_pril.Rows['17:17'].ClearContents;
  end else begin
    exWks_rep.Rows[IntToStr(recRep) + ':' + IntToStr(recRep + 1)].Delete;

    exWks_pril.Rows[IntToStr(recPril) + ':' + IntToStr(recPril + 1)].Delete;
  end;

  SP_Balans_Detail.Free;

  // Суммы прописью
  exWks_rep.Range['str_sum_no_nds'].Value := 'ИТОГО  ПО  АКТУ  БЕЗ  УЧЕТА  НДС: ' +
        FormatFloat('#,##0.00', exWks_rep.Range['acts_sum_no_nds'].Value) +
        ' (' + GetSumScript_RUS(exWks_rep.Range['acts_sum_no_nds'].Value, 3) + ')';
  exWks_rep.Range['str_sum_nds'   ].Value := 'СУММА  НДС: ' +
        FormatFloat('#,##0.00', exWks_rep.Range['acts_sum_nds'].Value) +
        ' (' + GetSumScript_RUS(exWks_rep.Range['acts_sum_nds'].Value, 3) + ')';
  exWks_rep.Range['str_sum'       ].Value := 'ВСЕГО: ' +
        FormatFloat('#,##0.00', exWks_rep.Range['acts_sum'].Value) +
        ' (' + GetSumScript_RUS(exWks_rep.Range['acts_sum'].Value, 3) + ')';

  AutoFitMergeCell(exWks_rep.Range['str_sum_no_nds']);
  AutoFitMergeCell(exWks_rep.Range['str_sum_nds']);
  AutoFitMergeCell(exWks_rep.Range['str_sum']);
  // Суммы прописью

  exWks_pril.Select;
  exWks_pril.Range['A1'].Select;
  exWks_rep.Select;
  exWks_rep.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks_rep, retActSettings, str_bargain_id, exWks_rep.Range['acts_sum'].Value);
  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks_rep); VarClear(exWks_pril); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton175Click(Sender: TObject);
var
  retActSettings      : Variant;
  str_bargain_id      : string;

  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query               : TADOQuery;
  recNo               : integer;

  str_expeditor       : array [1..4] of string;
  sum_balance_begin   : array [1..3] of Double;

  PrintArea           : string;
  cod_shablon         : integer;

  str_customer        : string;
  str_contract        : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 333 = 'Акт сверки расчетов (консолидированный)'
  // Данный акт строится на основание заранее определенных Договоров (2196005+2196600 и 2315033+2316453)

  if SP_Agree.Eof then exit;

  if (SP_Agree.FieldByName('contract_id').AsInteger <> 2196005)
    and (SP_Agree.FieldByName('contract_id').AsInteger <> 2196600) then
  begin
    Application.MessageBox('Акт строится на основании данных по Клиенту "РН-Транс" (филиал г. Ачинск и филиал г. Комсомольск-на-Амуре)'#10 +
                           'Для построения акта необходимо выбрать Перевозку по одному из этих договоров',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  // --- валюта договора по умолчанию для акта сверки -----
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query.Open;
//  firm_property_cod:= Query.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query.FieldByName('type_firm_customer_name').AsString;
  Query.Free;
  str_expeditor[3] := 'задолженность ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е');
  str_expeditor[4] := 'задолженность ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ' перед ' + ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е');

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := SP_Agree.FieldByName('bargain_id').AsString;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  // Посчитаем начальные балансы
  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;
  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_new;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];

  SP_Balance.Close;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := 2196005;
  SP_Balance.ExecProc;
  sum_balance_begin[1] := iif(SP_Balance.Parameters.ParamByName('@out_balance_begin').Value = null, 0, SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000)));
  sum_balance_begin[2] := iif(SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value = null, 0, SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value);
  SP_Balance.Close;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := 2196600;
  SP_Balance.ExecProc;
  sum_balance_begin[1] := sum_balance_begin[1] + iif(SP_Balance.Parameters.ParamByName('@out_balance_begin').Value = null, 0, SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000)));
  sum_balance_begin[2] := sum_balance_begin[2] + iif(SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value = null, 0, SP_Balance.Parameters.ParamByName('@out_balance_return_begin').Value);

  SP_Balance.Close;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := 2315033;
  SP_Balance.ExecProc;
  sum_balance_begin[3] := iif(SP_Balance.Parameters.ParamByName('@out_balance_begin').Value = null, 0, SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000)));
  SP_Balance.Close;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := 2316453;
  SP_Balance.ExecProc;
  sum_balance_begin[3] := sum_balance_begin[3] + iif(SP_Balance.Parameters.ParamByName('@out_balance_begin').Value = null, 0, SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000)));
  SP_Balance.Free;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Начальное сальжо
  exWks.Range['sum_part1'].Value := sum_balance_begin[1];
  exWks.Range['sum_part4'].Value := -sum_balance_begin[2]; // Возмещение с обратным знаком
  exWks.Range['sum_part7'].Value := sum_balance_begin[3];

  // Заполняем шапку и подписи
  case cod_shablon of
    333 : str_customer := 'АО «РН-Транс»';
    else  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  end;
  exWks.Range['B2'].Value := 'между ' + str_customer +
                             ' и ' + VarToStr(retActSettings[12][1]) + #10 +
                             'Договор № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' +
                             FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['M3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  case cod_shablon of
    333 : str_customer := 'АО «РН-Транс»';
    else  str_customer := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  end;
  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) +
                             ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + str_customer +
                             ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", ' +
                             'с другой стороны, составили настоящий Акт сверки расчетов ' +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  AutoFitMergeCell(exWks.Range['B5']);


  exWks.Range['B8'].Value := 'По данным ' + VarToStr(retActSettings[12][1]);
  exWks.Range['B84'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['H8'].Value := 'По данным ' + str_customer;
  exWks.Range['H84'].Value := str_customer;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks.Range['B86'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks.Range['B86'].Value := Null;
  if retActSettings[13][5] = True then
    exWks.Range['B88'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks.Range['B88'].Value := Null;
  if retActSettings[13][8] = True then
    exWks.Range['H86'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks.Range['H86'].Value := Null;
  if retActSettings[13][11] = True then
    exWks.Range['H88'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
  else
    exWks.Range['H88'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['86:88'].Copy;
    exWks.Rows['90:92'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B90'].Value := 'Дата подписания';
    exWks.Range['B92'].Value := '"____" __________________ 201__';
    exWks.Range['H90'].Value := 'Дата подписания';
    exWks.Range['H92'].Value := '"____" __________________ 201__';

    // Спрячем лишние колонки и строки (НДС), для иностранцев они не отображаются
    exWks.Rows['19:23'].Hidden := True;
    exWks.Rows['42:46'].Hidden := True;

    exWks.Columns['E:E'].Hidden := True;
    exWks.Columns['K:K'].Hidden := True;
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['G8'].Value := VarToStr(retActSettings[7][1]);
  end;

  // Данные отчета (заполнение происходит снизу-вверх)
  // Нижняя часть = штрафы по доп. договорам
  recNo := 1;
  // С-ф (обычные)
  ShowTextMessage('Формирование отчета: Шаг 1 из 8', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 0 AND set_clearing = 0 AND set_avance = 0');
  Query.SQL.Add('AND contract_id IN (2315033, 2316453)');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('currency_id').Value := retActSettings[7][0];
  Query.Parameters.ParamByName('date_begin').Value  := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value    := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(61 + recNo)].ClearContents;
    exWks.Rows[IntToStr(62 + recNo)].Insert;
    exWks.Rows[IntToStr(61 + recNo)].Copy;
    exWks.Rows[IntToStr(62 + recNo)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(61 + recNo)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(61 + recNo)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(61 + recNo)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(61 + recNo)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(61 + recNo)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['F' + IntToStr(61 + recNo)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  // Платежи (обычные)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 2 из 8', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(:currency_id, currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (set_return = 0)');
  Query.SQL.Add('AND contract_id IN (2315033, 2316453)');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('currency_id').Value := retActSettings[7][0];
  Query.Parameters.ParamByName('date_begin').Value  := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value    := retActSettings[3][2];
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(61 + recNo)].ClearContents;
    exWks.Rows[IntToStr(62 + recNo)].Insert;
    exWks.Rows[IntToStr(61 + recNo)].Copy;
    exWks.Rows[IntToStr(62 + recNo)].PasteSpecial(1);

    if Query.FieldByName('pay_sum').AsCurrency >= 0  then
      exWks.Range['B' + IntToStr(61 + recNo)].Value := 'платежное поручение'
    else
      exWks.Range['B' + IntToStr(61 + recNo)].Value := 'платежное поручение на возврат денежных средств';
    exWks.Range['C' + IntToStr(61 + recNo)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['D' + IntToStr(61 + recNo)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['E' + IntToStr(61 + recNo)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['G' + IntToStr(61 + recNo)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  // С-ф (взаимозачёт)  (верхняя-правая часть; вместе с обычными платежами)
  ShowTextMessage('Формирование отчета: Шаг 3 из 8', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_clearing = 1 AND set_avance = 0');
  Query.SQL.Add('AND contract_id IN (2315033, 2316453)');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('currency_id').Value := retActSettings[7][0];
  Query.Parameters.ParamByName('date_begin').Value  := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value    := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(61 + recNo)].ClearContents;
    exWks.Rows[IntToStr(62 + recNo)].Insert;
    exWks.Rows[IntToStr(61 + recNo)].Copy;
    exWks.Rows[IntToStr(62 + recNo)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(61 + recNo)].Value := 'счет-фактура (возмещение расходов)'
    else
      exWks.Range['B' + IntToStr(61 + recNo)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(61 + recNo)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(61 + recNo)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(61 + recNo)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['G' + IntToStr(61 + recNo)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  if recNo = 1 then begin
    exWks.Rows[IntToStr(61 + recNo)].Delete;
    recNo := 2;
  end else begin
    exWks.Rows[IntToStr(61 + recNo)].Delete;
    exWks.Rows[IntToStr(61 + recNo)].Delete;
  end;

  // Средняя часть = возврат по основным договорам
  recNo := 1;
  // С-ф (возврат)
  ShowTextMessage('Формирование отчета: Шаг 4 из 8', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 1 AND set_avance = 0');
  Query.SQL.Add('AND contract_id IN (2196005, 2196600)');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('currency_id').Value := retActSettings[7][0];
  Query.Parameters.ParamByName('date_begin').Value  := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value    := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(38 + recNo)].ClearContents;
    exWks.Rows[IntToStr(39 + recNo)].Insert;
    exWks.Rows[IntToStr(38 + recNo)].Copy;
    exWks.Rows[IntToStr(39 + recNo)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(38 + recNo)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(38 + recNo)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(38 + recNo)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(38 + recNo)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(38 + recNo)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['G' + IntToStr(38 + recNo)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  // Платежи (возврат)
  ShowTextMessage('Формирование отчета: Шаг 5 из 8', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(-pay_sum * dbo.func_GetExchangeNew(:currency_id, currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (set_return = 1)');
  Query.SQL.Add('AND contract_id IN (2196005, 2196600)');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('currency_id').Value := retActSettings[7][0];
  Query.Parameters.ParamByName('date_begin').Value  := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value    := retActSettings[3][2];
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(38 + recNo)].ClearContents;
    exWks.Rows[IntToStr(39 + recNo)].Insert;
    exWks.Rows[IntToStr(38 + recNo)].Copy;
    exWks.Rows[IntToStr(39 + recNo)].PasteSpecial(1);

    exWks.Range['B' + IntToStr(38 + recNo)].Value := 'платежное поручение';
    exWks.Range['C' + IntToStr(38 + recNo)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['D' + IntToStr(38 + recNo)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['E' + IntToStr(38 + recNo)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['F' + IntToStr(38 + recNo)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  if recNo = 1 then begin
    exWks.Rows[IntToStr(38 + recNo)].Delete;
    recNo := 2;
  end else begin
    exWks.Rows[IntToStr(38 + recNo)].Delete;
    exWks.Rows[IntToStr(38 + recNo)].Delete;
  end;

  // Верхняя часть = услуги и платежи по основным договорам
  recNo := 1;
  // С-ф (обычные)
  ShowTextMessage('Формирование отчета: Шаг 6 из 8', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 0 AND set_clearing = 0 AND set_avance = 0');
  Query.SQL.Add('AND contract_id IN (2196005, 2196600)');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('currency_id').Value := retActSettings[7][0];
  Query.Parameters.ParamByName('date_begin').Value  := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value    := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(15 + recNo)].ClearContents;
    exWks.Rows[IntToStr(16 + recNo)].Insert;
    exWks.Rows[IntToStr(15 + recNo)].Copy;
    exWks.Rows[IntToStr(16 + recNo)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(15 + recNo)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(15 + recNo)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(15 + recNo)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(15 + recNo)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(15 + recNo)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['F' + IntToStr(15 + recNo)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  // Платежи (обычные)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 7 из 8', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(:currency_id, currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (set_return = 0)');
  Query.SQL.Add('AND contract_id IN (2196005, 2196600)');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('currency_id').Value := retActSettings[7][0];
  Query.Parameters.ParamByName('date_begin').Value  := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value    := retActSettings[3][2];
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(15 + recNo)].ClearContents;
    exWks.Rows[IntToStr(16 + recNo)].Insert;
    exWks.Rows[IntToStr(15 + recNo)].Copy;
    exWks.Rows[IntToStr(16 + recNo)].PasteSpecial(1);

    if Query.FieldByName('pay_sum').AsCurrency >= 0  then
      exWks.Range['B' + IntToStr(15 + recNo)].Value := 'платежное поручение'
    else
      exWks.Range['B' + IntToStr(15 + recNo)].Value := 'платежное поручение на возврат денежных средств';
    exWks.Range['C' + IntToStr(15 + recNo)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['D' + IntToStr(15 + recNo)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['E' + IntToStr(15 + recNo)].Value := Query.FieldByName('type_nds_name').AsString;
    exWks.Range['G' + IntToStr(15 + recNo)].Value := Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  // С-ф (взаимозачёт)  (верхняя-правая часть; вместе с обычными платежами)
  ShowTextMessage('Формирование отчета: Шаг 8 из 8', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(:currency_id, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_clearing = 1 AND set_avance = 0');
  Query.SQL.Add('AND contract_id IN (2196005, 2196600)');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('currency_id').Value := retActSettings[7][0];
  Query.Parameters.ParamByName('date_begin').Value  := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value    := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(15 + recNo)].ClearContents;
    exWks.Rows[IntToStr(16 + recNo)].Insert;
    exWks.Rows[IntToStr(15 + recNo)].Copy;
    exWks.Rows[IntToStr(16 + recNo)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(15 + recNo)].Value := 'счет-фактура (возмещение расходов)'
    else
      exWks.Range['B' + IntToStr(15 + recNo)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(15 + recNo)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(15 + recNo)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['E' + IntToStr(15 + recNo)].Value := Query.FieldByName('inf_obj_name').AsString;
    exWks.Range['G' + IntToStr(15 + recNo)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  if recNo = 1 then begin
    exWks.Rows[IntToStr(15 + recNo)].Delete;
    recNo := 2;
  end else begin
    exWks.Rows[IntToStr(15 + recNo)].Delete;
    exWks.Rows[IntToStr(15 + recNo)].Delete;
  end;

  // Пункты акта
  case cod_shablon of
    333 : str_customer := 'в адрес АО «РН-Транс» ';
    else  str_customer := 'в адрес ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ' ';
  end;
  str_contract :=
   ' По Договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
   ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.., ';

  // 1. Задолженность (основная) на начало периода
  exWks.Range['str_part1'].Value :=
                             '1.' + str_contract +
                             VarToStr(iif(exWks.Range['sum_part1'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части оказанных услуг ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['str_part1']);

  // 2. Оказаны услуги
  exWks.Range['str_part2'].Value :=
                             '2.' + str_contract +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' оказаны услуги, а ' +
                             ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е') + ' произведены оплаты в следующем размере:';
  AutoFitMergeCell(exWks.Range['str_part2']);

  // 3. Задолженность (основная) на конец периода
  exWks.Range['str_part3'].Value :=
                             '3.' + str_contract +
                             VarToStr(iif(exWks.Range['sum_part3'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части оказанных услуг ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['str_part3']);

  // 4. Задолженность (возврат) на начало периода
  exWks.Range['str_part4'].Value :=
                           '4.' + str_contract +
                           VarToStr(iif(exWks.Range['sum_part4'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части расходов, подлежащих возмещению ' +
                           str_customer +
                           'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['str_part4']);

  // 5. Возмещаемые услуги
  exWks.Range['str_part5'].Value :=
                           '5.' + str_contract +
                           ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е') + ' предъявлены расходы, подлежащие возмещению, а ' +
                           ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' оплачено:';
  AutoFitMergeCell(exWks.Range['str_part5']);

  // 6. Задолженность (возврат) на конец периода
  exWks.Range['str_part6'].Value :=
                           '6.' + str_contract +
                           VarToStr(iif(exWks.Range['sum_part6'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части расходов, подлежащих возмещению ' +
                           str_customer +
                           'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['str_part6']);

  // 7. Задолженность (штрафы) на начало периода
  exWks.Range['str_part7'].Value :=
                             '7.' + str_contract +
                             VarToStr(iif(exWks.Range['sum_part7'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части заявленных претензий и штрафов ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['str_part7']);

  // 8. Выставлены штрафы
  exWks.Range['str_part8'].Value :=
                             '8.' + str_contract +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' выставленны штрафы за сверхнормативный простой вагонов, а ' +
                             ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е') + ' произведены оплаты в следующем размере:';
  AutoFitMergeCell(exWks.Range['str_part8']);

  // 9. Задолженность (штрафы) на конец периода
  exWks.Range['str_part9'].Value :=
                             '9.' + str_contract +
                             VarToStr(iif(exWks.Range['sum_part9'].Value < 0,  str_expeditor[3], str_expeditor[4])) + ' в части заявленных претензий и штрафов ' +
                             str_customer +
                             'по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['str_part9']);

  // 10. ИТОГО на конец периода
  exWks.Range['str_part10'].Value :=
                           '10.' + str_contract +
                           VarToStr(iif(exWks.Range['sum_part10'].Value < 0,  str_expeditor[3], str_expeditor[4])) +
                           ' по состоянию на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. составляет:';
  AutoFitMergeCell(exWks.Range['str_part10']);

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton176Click(Sender: TObject);
type
  TFunc = function(AppHand: THandle; connect: TADOConnection; str_form, str_global_id: string): variant;
var            Q : TADOQuery;
               v : Variant;
            FDic : TFunc;
          handle : THandle;
  str_global_id : string;
begin
  str_global_id := '';
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT bargain_id, shaping_rate_id, list_rate_id INTO #res FROM shaping_rate ');
  Q.SQL.Add('JOIN (SELECT cod FROM StrToTbl(''' + GetStrId(cxGrid1DBBandedTableView1bargain_id, ',') + ''', '','')) g ON g.cod = bargain_id ');
	Q.SQL.Add('LEFT JOIN bargain_list_rate ON rate_id = shaping_rate_id ');
	Q.SQL.Add('SELECT DISTINCT bargain_id AS global_id FROM #res WHERE bargain_id IS NOT NULL UNION ');
	Q.SQL.Add('SELECT DISTINCT shaping_rate_id FROM #res WHERE shaping_rate_id IS NOT NULL UNION ');
	Q.SQL.Add('SELECT DISTINCT list_rate_id FROM #res WHERE list_rate_id IS NOT NULL DROP TABLE #res');
  Q.Open;
  Q.First;
  while not Q.Eof do begin
    str_global_id := str_global_id + ',' + Q.FieldByName('global_id').AsString;
    Q.Next;
  end;
  Q.Free;

  Delete(str_global_id, 1, 1);
  handle := LoadLibrary('reports.dll');
  @FDic := GetProcAddress(handle, 'CreateWndMonitorEvent');
  v := FDic(Application.Handle, Fconnect, 'ПЕРЕВОЗОК, УСЛУГ, СТАВОК:', str_global_id);
  FreeLibrary(handle);
end;

procedure TfmAgree2.dxBarButton179Click(Sender: TObject);
type
  TFunc = function(AppHand: THandle; connect: TADOConnection; str_form, str_global_id: string): variant;
var            Q : TADOQuery;
               v : Variant;
            FDic : TFunc;
          handle : THandle;
  str_global_id : string;
begin
  str_global_id := '';
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT bargain_id, shaping_rate_id, list_rate_id INTO #res FROM shaping_rate ');
  if TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag = 0 then
    Q.SQL.Add('JOIN (SELECT cod FROM StrToTbl(''' + GetStrId(cxGrid3DBBandedTableView1bargain_id, ',') + ''', '','')) g ON g.cod = bargain_id ')
  else
    Q.SQL.Add('JOIN (SELECT cod FROM StrToTbl(''' + GetStrId(cxGrid7DBBandedTableView1bargain_id, ',') + ''', '','')) g ON g.cod = bargain_id ');
  Q.SQL.Add('LEFT JOIN bargain_list_rate ON rate_id = shaping_rate_id ');
	Q.SQL.Add('SELECT DISTINCT bargain_id AS global_id FROM #res WHERE bargain_id IS NOT NULL UNION ');
	Q.SQL.Add('SELECT DISTINCT shaping_rate_id FROM #res WHERE shaping_rate_id IS NOT NULL UNION ');
	Q.SQL.Add('SELECT DISTINCT list_rate_id FROM #res WHERE list_rate_id IS NOT NULL DROP TABLE #res');
  Q.Open;
  Q.First;
  while not Q.Eof do begin
    str_global_id := str_global_id + ',' + Q.FieldByName('global_id').AsString;
    Q.Next;
  end;
  Q.Free;

  Delete(str_global_id, 1, 1);

  handle := LoadLibrary('reports.dll');
  @FDic := GetProcAddress(handle, 'CreateWndMonitorEvent');
  v := FDic(Application.Handle, Fconnect, 'ПЕРЕВОЗОК, УСЛУГ, СТАВОК:', str_global_id);
  FreeLibrary(handle);
end;

procedure TfmAgree2.dxBarButton177Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks, exWks2    : Variant;
  sp_Report_return_tarif : TADOStoredProc;
  Query_tmp, Q           : TADOQuery;
  recNo, i               : integer;
  contract_agent_id      : integer;

  fact_no                : integer;
  // поля для формирования групп
	num_document			: string;
	num_vagon				  : string;
	num_konten				: string;

  str_bargain_id         : string;
  str_expeditor          : array [1..2] of string;
  zfto_score_id          : integer;
  rec_begin              : integer;
  sum_str, nds_str       : string;

  sum_rep                : Variant;
  currency_id            : integer; // Валюта отчета (Валюта подрядчика)
  brief_name             : string;
  client_currency_id     : integer; // Валюта эквивалента (Валюта договора клиента)
  client_brief_name      : string;
  ClientDS_distance   : TClientDataSet;

  cod_shablon            : integer;
  sp_name                : string;
  PrintArea              : string;
begin
  // 335 - Корр. Отчет по возмещению тарифа

  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Close;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  // Имя ХП
  sp_name := 'sp_Report_return_tarif_correct';

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1,
                      ACT_SET_EXCHANGE or ACT_SET_ADDSIGN or ACT_SET_RECALC_DISTANCE,
                      -9, -9, True);
  if retActSettings[0] = -9 then
    exit;

  // Запомним валюту договора клиента (она возвращается из процедуры SaveActsBegin)
  client_currency_id := retActSettings[7][0];
  client_brief_name  := retActSettings[7][1];
  // В качестве валюты отчета будем использовать валюту из пред отчета
  Query_tmp.SQL.Clear;
  Query_tmp.SQL.Add('SELECT * FROM view_acts WHERE acts_id = ' + VarToStr(retActSettings[1][1]));
  Query_tmp.Open;
  currency_id := Query_tmp.FieldByName('acts_currency_id').Value;
  brief_name := Query_tmp.FieldByName('brief_name').AsString;
  Query_tmp.Close;
  // В качестве валюты отчета запишем валюту подрядчика (ибо отчет формируется по этой валюте)
  retActSettings[7]  := VarArrayOf([currency_id, brief_name]);

  Screen.Cursor := crHourglass;
  // Получение данных
  ShowTextMessage('Подготовка данных ...', False);

  sp_Report_return_tarif := TADOStoredProc.Create(nil);
  sp_Report_return_tarif.Connection := Fconnect;
  sp_Report_return_tarif.ProcedureName := sp_name;
  sp_Report_return_tarif.Parameters.Refresh;
  sp_Report_return_tarif.Parameters.ParamByName('@str_bargain_id' ).Value := str_bargain_id;
  sp_Report_return_tarif.Parameters.ParamByName('@parent_acts_id' ).Value := retActSettings[1][1];
  sp_Report_return_tarif.CommandTimeout := 100;

  try
    sp_Report_return_tarif.Open;
  except
    exit;
  end;

  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
  exWks2 := exWkb.WorkSheets[2];
  //exApp.Visible := True;
  // для ускорения - отключимся от принтера
  try
    exWks2.Select;
    exApp.ActiveWindow.View := 1;
    exWks.Select;
    exApp.PrintCommunication := False;
  except
  end;

  // Для всех отчетов делаем видимыми, а затем закрываем по данным с формы настройки
  // В шаблоне колонки спрятаны (так было раньше)
  exWks.Columns['F:G'].Hidden := False;
  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи

  exWks.Range['B2'].Value := 'о произведенных расходах, подлежащих возмещению, по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['V3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                             ', с другой стороны, составили настоящий Отчет о нижеследующем :';

  exWks.Range['B6'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.: ' +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьом', 'ем') + ' была произведена корректировка суммы расходов, подлежащих возмещению, в соответствии с Договором' +
                             ' № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := '1. ' + str_expeditor[1] + ' во исполнение обязательств по договору № ' + SP_Agree.FieldByName('contract_cod').AsString +
                              ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' +
                              ' понес следующие расходы, подлежащие возмещению:';

  exWks.Range['B43'].Value := 'Настоящий Отчет составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                              SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';


  exWks.Range['B12'].Value := 'ВСЕГО подлежит возмещению в адрес ' + VarToStr(retActSettings[12][1]);
  exWks.Range['B46'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['Q46'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B48'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E48'].Value := retActSettings[13][1];
  end else
    exWks.Range['B48:J48'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B50'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E50'].Value := retActSettings[13][4];
  end else
    exWks.Range['B50:J50'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['Q48'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['T48'].Value := retActSettings[13][7];
  end else
    exWks.Range['Q48:U48'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['Q50'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['T50'].Value := retActSettings[13][10];
  end else
    exWks.Range['Q50:U50'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['48:50'].Copy;
    exWks.Rows['52:54'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B52'].Value := 'Дата подписания';
    exWks.Range['B54'].Value := '"____" __________________ 201__';
    exWks.Range['Q52'].Value := 'Дата подписания';
    exWks.Range['Q54'].Value := '"____" __________________ 201__';
  end;

  // Наименование валюты
  if (currency_id <> 3) then begin
    exWks.Range['P9'].Value := 'Сумма без НДС, ' + brief_name;
    exWks.Range['Q9'].Value := 'Сумма НДС, ' + brief_name;
    exWks.Range['R9'].Value := 'Сумма с НДС, ' + brief_name;
  end;
  // Валюта подрядчика
  exWks.Range['W8'].Value := 'Курс ' + brief_name;
  if currency_id = 3 then exWks.Columns['W:W'].Hidden := True; // Если рубли, то скрываем столбец
  // Валюта клиента
  exWks.Range['X8'].Value := 'Курс ' + client_brief_name;
  if client_currency_id = 3 then exWks.Columns['X:X'].Hidden := True; // Если рубли, то скрываем столбец
  if client_currency_id <> 3 then exWks.Range['Y8'].Value := 'Итого подлежит возмещению в ' + client_brief_name;

  // Нижня таблица - отсутсвует в нашем отчете
  exWks.Rows['27:41'].Delete;

  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  // Верхня таблица - изменения
  recNo       := 10;
  fact_no     := 1;

  // первый RS - удаленные данные
	num_document			:= '';
	num_vagon				  := '';
	num_konten				:= '';

  Q := TADOQuery.Create(nil);
  Q.Recordset := sp_Report_return_tarif.Recordset;
  Q.Open;

  while not Q.Eof do begin
    if (num_document <> Q.FieldByName('num_document').AsString)
    or (num_vagon <> Q.FieldByName('num_vagon').AsString)
    or (num_konten <> Q.FieldByName('num_konten').AsString) then
    begin
      num_document := Q.FieldByName('num_document').AsString;
      num_vagon := Q.FieldByName('num_vagon').AsString;
      num_konten := Q.FieldByName('num_konten').AsString;

      exWks.Rows[IntToStr(1 + recNo)].Insert;
      exWks.Rows[IntToStr(0 + recNo)].Copy;
      exWks.Rows[IntToStr(1 + recNo)].PasteSpecial(1);

      // Формулы
      exWks.Range['Q' + IntToStr(recNo)].Value := '=RC[1]*SUM(RC[-2])/(SUM(RC[-2])+100)';
      exWks.Range['P' + IntToStr(recNo)].Value := '=RC[2]-RC[1]';

      exWks.Range['A' + IntToStr(recNo)].Value := Q.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(recNo)].Value := fact_no;
      exWks.Range['C' + IntToStr(recNo)].Value := Q.FieldByName('agreement_describe').AsString;
      exWks.Range['D' + IntToStr(recNo)].Value := Q.FieldByName('route_name').AsString;
      exWks.Range['E' + IntToStr(recNo)].Value := Q.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['F' + IntToStr(recNo)].Value := Q.FieldByName('kargoETSNG_cod').AsString;
      exWks.Range['G' + IntToStr(recNo)].Value := Q.FieldByName('kargoGNG_cod').AsString;

      exWks.Range['H' + IntToStr(recNo)].Value := null;
      if exWks.Range['H:H'].EntireColumn.Hidden = False then begin
        // Заполняем, если колонка не спрятана
        // Расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([Q.FieldByName('node_begin_cod').AsString, Q.FieldByName('node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := Q.FieldByName('node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := Q.FieldByName('node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], Q.FieldByName('date_from_to').Value);
          ClientDS_distance.Post;
        end;
        exWks.Range['H' + IntToStr(recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
      end;

      exWks.Range['I' + IntToStr(recNo)].Value := Q.FieldByName('num_document').AsString;
      if Q.FieldByName('vid_send').Value = 1 then // ВИД ОТПРАВКИ = Контейнерная (по версии Подрядчика)
        exWks.Range['J' + IntToStr(recNo)].Value := Q.FieldByName('num_konten').AsString
      else
        exWks.Range['J' + IntToStr(recNo)].Value := Q.FieldByName('num_vagon').Value;
      exWks.Range['K' + IntToStr(recNo)].Value := -Q.FieldByName('fact_weight').AsFloat;
      exWks.Range['L' + IntToStr(recNo)].Value := -Q.FieldByName('calc_weight').AsFloat;
      exWks.Range['M' + IntToStr(recNo)].Value := Q.FieldByName('date_from_to').Value;
      exWks.Range['N' + IntToStr(recNo)].Value := Q.FieldByName('date_delivery').Value;
      if Q.FieldByName('date_delivery').IsNull then exWks.Range['N' + IntToStr(recNo)].Value := '---';

      Query_NDS.Locate('nds_id', Q.FieldByName('shaping_rate_nds_id').Value, []);
      exWks.Range['O' + IntToStr(recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      exWks.Range['R' + IntToStr(recNo)].Value := -Q.FieldByName('precalc_sum').Value; // удаляющие с минусом
      exWks.Range['S' + IntToStr(recNo)].Value := Q.FieldByName('firm_agent_name_full').AsString; //'ЦФТО ОАО "РЖД"';
      exWks.Range['T' + IntToStr(recNo)].Value := Q.FieldByName('fact_num').AsString;
      exWks.Range['U' + IntToStr(recNo)].Value := Q.FieldByName('ktgrm_text').AsString;
      if Q.FieldByName('fact_date').IsNull = False then
        exWks.Range['V' + IntToStr(recNo)].Value := FormatDateTime('dd.mm.yyyy',Q.FieldByName('fact_date').Value)
      else
        exWks.Range['V' + IntToStr(recNo)].Value := '';

      // Рублевый эквивалент
      if retActSettings[6][1] = True then begin
        exWks.Range['W' + IntToStr(recNo)].Value := Q.FieldByName('exchange_RUB_agent').Value;
        exWks.Range['X' + IntToStr(recNo)].Value := Q.FieldByName('exchange_RUB_client').Value;
      end;

      exWks.Range['Z' + IntToStr(recNo)].Value := Q.FieldByName('firm_customer_name').AsString;
      exWks.Range['Z' + IntToStr(recNo)].Font.ColorIndex := 2;

      recNo := recNo + 1;
      fact_no := fact_no + 1;
    end else begin
      exWks.Range['T' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['T' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('fact_num').AsString;
      exWks.Range['U' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['U' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('ktgrm_text').AsString;
      if Q.FieldByName('fact_date').IsNull = False then
        exWks.Range['V' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['V' + IntToStr(recNo - 1)].Value) + #10 + FormatDateTime('dd.mm.yyyy',Q.FieldByName('fact_date').Value);
      exWks.Range['Z' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['Z' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('firm_customer_name').AsString;
    end;

    ShowTextMessage('Осталось ' + IntToStr(Q.RecordCount - Q.RecNo), False);
    Q.Next;
  end;
  Q.Free;

  // второй RS - добавленные данные (нумерация продолжается)
	num_document			:= '';
	num_vagon				  := '';
	num_konten				:= '';

  Q := TADOQuery.Create(nil);
  Q.Recordset := sp_Report_return_tarif.NextRecordset(i);
  Q.Open;

  while not Q.Eof do begin
    if (num_document <> Q.FieldByName('num_document').AsString)
    or (num_vagon <> Q.FieldByName('num_vagon').AsString)
    or (num_konten <> Q.FieldByName('num_konten').AsString) then
    begin
      num_document := Q.FieldByName('num_document').AsString;
      num_vagon := Q.FieldByName('num_vagon').AsString;
      num_konten := Q.FieldByName('num_konten').AsString;

      exWks.Rows[IntToStr(1 + recNo)].Insert;
      exWks.Rows[IntToStr(0 + recNo)].Copy;
      exWks.Rows[IntToStr(1 + recNo)].PasteSpecial(1);

      // Формулы
      exWks.Range['Q' + IntToStr(recNo)].Value := '=RC[1]*SUM(RC[-2])/(SUM(RC[-2])+100)';
      exWks.Range['P' + IntToStr(recNo)].Value := '=RC[2]-RC[1]';

      exWks.Range['A' + IntToStr(recNo)].Value := Q.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(recNo)].Value := fact_no;
      exWks.Range['C' + IntToStr(recNo)].Value := Q.FieldByName('agreement_describe').AsString;
      exWks.Range['D' + IntToStr(recNo)].Value := Q.FieldByName('route_name').AsString;
      exWks.Range['E' + IntToStr(recNo)].Value := Q.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['F' + IntToStr(recNo)].Value := Q.FieldByName('kargoETSNG_cod').AsString;
      exWks.Range['G' + IntToStr(recNo)].Value := Q.FieldByName('kargoGNG_cod').AsString;

      exWks.Range['H' + IntToStr(recNo)].Value := null;
      if exWks.Range['H:H'].EntireColumn.Hidden = False then begin
        // Заполняем, если колонка не спрятана
        // Расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([Q.FieldByName('node_begin_cod').AsString, Q.FieldByName('node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := Q.FieldByName('node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := Q.FieldByName('node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], Q.FieldByName('date_from_to').Value);
          ClientDS_distance.Post;
        end;
        exWks.Range['H' + IntToStr(recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
      end;

      exWks.Range['I' + IntToStr(recNo)].Value := Q.FieldByName('num_document').AsString;
      if Q.FieldByName('vid_send').Value = 1 then // ВИД ОТПРАВКИ = Контейнерная (по версии Подрядчика)
        exWks.Range['J' + IntToStr(recNo)].Value := Q.FieldByName('num_konten').AsString
      else
        exWks.Range['J' + IntToStr(recNo)].Value := Q.FieldByName('num_vagon').Value;
      exWks.Range['K' + IntToStr(recNo)].Value := Q.FieldByName('fact_weight').AsFloat;
      exWks.Range['L' + IntToStr(recNo)].Value := Q.FieldByName('calc_weight').AsFloat;
      exWks.Range['M' + IntToStr(recNo)].Value := Q.FieldByName('date_from_to').Value;
      exWks.Range['N' + IntToStr(recNo)].Value := Q.FieldByName('date_delivery').Value;
      if Q.FieldByName('date_delivery').IsNull then exWks.Range['N' + IntToStr(recNo)].Value := '---';

      Query_NDS.Locate('nds_id', Q.FieldByName('shaping_rate_nds_id').Value, []);
      exWks.Range['O' + IntToStr(recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      exWks.Range['R' + IntToStr(recNo)].Value := Q.FieldByName('precalc_sum').Value; // добавленные с плюсом
      exWks.Range['S' + IntToStr(recNo)].Value := Q.FieldByName('firm_agent_name_full').AsString; //'ЦФТО ОАО "РЖД"';
      exWks.Range['T' + IntToStr(recNo)].Value := Q.FieldByName('fact_num').AsString;
      exWks.Range['U' + IntToStr(recNo)].Value := Q.FieldByName('ktgrm_text').AsString;
      if Q.FieldByName('fact_date').IsNull = False then
        exWks.Range['V' + IntToStr(recNo)].Value := FormatDateTime('dd.mm.yyyy',Q.FieldByName('fact_date').Value)
      else
        exWks.Range['V' + IntToStr(recNo)].Value := '';

      // Рублевый эквивалент
      if retActSettings[6][1] = True then begin
        exWks.Range['W' + IntToStr(recNo)].Value := Q.FieldByName('exchange_RUB_agent').Value;
        exWks.Range['X' + IntToStr(recNo)].Value := Q.FieldByName('exchange_RUB_client').Value;
      end;

      exWks.Range['Z' + IntToStr(recNo)].Value := Q.FieldByName('firm_customer_name').AsString;
      exWks.Range['Z' + IntToStr(recNo)].Font.ColorIndex := 2;

      recNo := recNo + 1;
      fact_no := fact_no + 1;
    end else begin
      exWks.Range['T' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['T' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('fact_num').AsString;
      exWks.Range['U' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['U' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('ktgrm_text').AsString;
      if Q.FieldByName('fact_date').IsNull = False then
        exWks.Range['V' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['V' + IntToStr(recNo - 1)].Value) + #10 + FormatDateTime('dd.mm.yyyy',Q.FieldByName('fact_date').Value);
      exWks.Range['Z' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['Z' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('firm_customer_name').AsString;
    end;

    ShowTextMessage('Осталось ' + IntToStr(Q.RecordCount - Q.RecNo), False);
    Q.Next;
  end;
  Q.Free;

  exWks.Rows[IntToStr(recNo)].Delete;
  if fact_no = 1 then begin
    exWks.Rows[IntToStr(recNo)].ClearContents;
    recNo := recNo + 1;
    fact_no := fact_no + 1;
  end else begin
   exWks.Rows[IntToStr(recNo)].Delete;
  end;

  // третий RS - новый акт (вторая таблица)
  recNo       := recNo + 10;
  fact_no     := 1;

	num_document			:= '';
	num_vagon				  := '';
	num_konten				:= '';

  Q := TADOQuery.Create(nil);
  Q.Recordset := sp_Report_return_tarif.NextRecordset(i);
  Q.Open;

  while not Q.Eof do begin
    if (num_document <> Q.FieldByName('num_document').AsString)
    or (num_vagon <> Q.FieldByName('num_vagon').AsString)
    or (num_konten <> Q.FieldByName('num_konten').AsString) then
    begin
      num_document := Q.FieldByName('num_document').AsString;
      num_vagon := Q.FieldByName('num_vagon').AsString;
      num_konten := Q.FieldByName('num_konten').AsString;

      exWks.Rows[IntToStr(1 + recNo)].Insert;
      exWks.Rows[IntToStr(0 + recNo)].Copy;
      exWks.Rows[IntToStr(1 + recNo)].PasteSpecial(1);

      // Формулы
      exWks.Range['Q' + IntToStr(recNo)].Value := '=RC[1]*SUM(RC[-2])/(SUM(RC[-2])+100)';
      exWks.Range['P' + IntToStr(recNo)].Value := '=RC[2]-RC[1]';

      exWks.Range['A' + IntToStr(recNo)].Value := Q.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(recNo)].Value := fact_no;
      exWks.Range['C' + IntToStr(recNo)].Value := Q.FieldByName('agreement_describe').AsString;
      exWks.Range['D' + IntToStr(recNo)].Value := Q.FieldByName('route_name').AsString;
      exWks.Range['E' + IntToStr(recNo)].Value := Q.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['F' + IntToStr(recNo)].Value := Q.FieldByName('kargoETSNG_cod').AsString;
      exWks.Range['G' + IntToStr(recNo)].Value := Q.FieldByName('kargoGNG_cod').AsString;

      exWks.Range['H' + IntToStr(recNo)].Value := null;
      if exWks.Range['H:H'].EntireColumn.Hidden = False then begin
        // Заполняем, если колонка не спрятана
        // Расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([Q.FieldByName('node_begin_cod').AsString, Q.FieldByName('node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := Q.FieldByName('node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := Q.FieldByName('node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], Q.FieldByName('date_from_to').Value);
          ClientDS_distance.Post;
        end;
        exWks.Range['H' + IntToStr(recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
      end;

      exWks.Range['I' + IntToStr(recNo)].Value := Q.FieldByName('num_document').AsString;
      if Q.FieldByName('vid_send').Value = 1 then // ВИД ОТПРАВКИ = Контейнерная (по версии Подрядчика)
        exWks.Range['J' + IntToStr(recNo)].Value := Q.FieldByName('num_konten').AsString
      else
        exWks.Range['J' + IntToStr(recNo)].Value := Q.FieldByName('num_vagon').Value;
      exWks.Range['K' + IntToStr(recNo)].Value := Q.FieldByName('fact_weight').AsFloat;
      exWks.Range['L' + IntToStr(recNo)].Value := Q.FieldByName('calc_weight').AsFloat;
      exWks.Range['M' + IntToStr(recNo)].Value := Q.FieldByName('date_from_to').Value;
      exWks.Range['N' + IntToStr(recNo)].Value := Q.FieldByName('date_delivery').Value;
      if Q.FieldByName('date_delivery').IsNull then exWks.Range['N' + IntToStr(recNo)].Value := '---';

      Query_NDS.Locate('nds_id', Q.FieldByName('shaping_rate_nds_id').Value, []);
      exWks.Range['O' + IntToStr(recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      exWks.Range['R' + IntToStr(recNo)].Value := Q.FieldByName('precalc_sum').Value; // добавленные с плюсом
      exWks.Range['S' + IntToStr(recNo)].Value := Q.FieldByName('firm_agent_name_full').AsString; //'ЦФТО ОАО "РЖД"';
      exWks.Range['T' + IntToStr(recNo)].Value := Q.FieldByName('fact_num').AsString;
      exWks.Range['U' + IntToStr(recNo)].Value := Q.FieldByName('ktgrm_text').AsString;
      if Q.FieldByName('fact_date').IsNull = False then
        exWks.Range['V' + IntToStr(recNo)].Value := FormatDateTime('dd.mm.yyyy',Q.FieldByName('fact_date').Value)
      else
        exWks.Range['V' + IntToStr(recNo)].Value := '';

      // Рублевый эквивалент
      if retActSettings[6][1] = True then begin
        exWks.Range['W' + IntToStr(recNo)].Value := Q.FieldByName('exchange_RUB_agent').Value;
        exWks.Range['X' + IntToStr(recNo)].Value := Q.FieldByName('exchange_RUB_client').Value;
      end;

      exWks.Range['Z' + IntToStr(recNo)].Value := Q.FieldByName('firm_customer_name').AsString;
      exWks.Range['Z' + IntToStr(recNo)].Font.ColorIndex := 2;

      recNo := recNo + 1;
      fact_no := fact_no + 1;
    end else begin
      exWks.Range['T' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['T' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('fact_num').AsString;
      exWks.Range['U' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['U' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('ktgrm_text').AsString;
      if Q.FieldByName('fact_date').IsNull = False then
        exWks.Range['V' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['V' + IntToStr(recNo - 1)].Value) + #10 + FormatDateTime('dd.mm.yyyy',Q.FieldByName('fact_date').Value);
      exWks.Range['Z' + IntToStr(recNo - 1)].Value := VarToStr(exWks.Range['Z' + IntToStr(recNo - 1)].Value) + #10 + Q.FieldByName('firm_customer_name').AsString;
    end;

    ShowTextMessage('Осталось ' + IntToStr(Q.RecordCount - Q.RecNo), False);
    Q.Next;
  end;
  Q.Free;

  exWks.Rows[IntToStr(recNo)].Delete;
  if fact_no = 1 then begin
    exWks.Rows[IntToStr(recNo)].ClearContents;
    recNo := recNo + 1;
    fact_no := fact_no + 1;
  end else begin
   exWks.Rows[IntToStr(recNo)].Delete;
  end;

  exWks.Range[IntToStr(10) + ':' + IntToStr(recNo)].EntireRow.AutoFit;
  exWks.Columns['C:C'].EntireColumn.AutoFit;

  // Рублевый эквивалент
  if retActSettings[6][1] = False then
    exWks.Columns['W:Y'].Delete;

  sum_rep := 0;
  try
    sum_rep := exWks.Range['sum_rep'].Value;
    if TVarData(sum_rep).VType = varError then
      sum_rep := 0;
  except
  end;

  // Второй лист - вторая таблица = копия первого листа (новый акт)
  exWks2 := exWkb.WorkSheets[2];
  exWks2.Outline.SummaryRow := 0;
  exWks2.Rows['4:7'].Copy;
  exWks2.Rows['11:14'].PasteSpecial(1);

  exWks2.Range['F14'].Value := fact_no - 1;
  exWks2.Range['G14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
  exWks2.Range['H14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
  // Добавим нужное кол-во строк
  fact_no := fact_no - 1;
  if fact_no > 0 then
    exWks2.Rows['13:' + IntToStr(12 + fact_no)].Insert;
  exWks2.Rows['12'].Delete;
  exWks2.Rows['12'].Delete;
  // копируем колонки
  if fact_no > 0 then begin
    exWks.Range['T' + IntToStr(recNo - fact_no) + ':T' + IntToStr(recNo - 1)].Copy;
    exWks2.Range['B12:B' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    exWks.Range['V' + IntToStr(recNo - fact_no) + ':V' + IntToStr(recNo - 1)].Copy;
    exWks2.Range['C12:C' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    exWks.Range['U' + IntToStr(recNo - fact_no) + ':U' + IntToStr(recNo - 1)].Copy;
    exWks2.Range['D12:D' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    exWks.Range['I' + IntToStr(recNo - fact_no) + ':I' + IntToStr(recNo - 1)].Copy;
    exWks2.Range['E12:E' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    exWks.Range['J' + IntToStr(recNo - fact_no) + ':J' + IntToStr(recNo - 1)].Copy;
    exWks2.Range['F12:F' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    exWks.Range['Q' + IntToStr(recNo - fact_no) + ':Q' + IntToStr(recNo - 1)].Copy;
    exWks2.Range['G12:G' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    exWks.Range['R' + IntToStr(recNo - fact_no) + ':R' + IntToStr(recNo - 1)].Copy;
    exWks2.Range['H12:H' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
  end;
  exWks2.Columns['B:D'].WrapText := True;
  exWks2.Rows['11:' + IntToStr(11 + fact_no)].EntireRow.AutoFit;
  // сортировка
  exWks2.Range['B11:H' + IntToStr(11 + fact_no)].Sort(Key1 := exWks2.Range['B12'], Key2 := exWks2.Range['F12'], Header := 1);
  // разделяем на группы
  recNo := 1; rec_begin := 1;
  while recNo <= fact_no + 1 do begin
    if (exWks2.Range['B' + IntToStr(11 + recNo)].Value <> exWks2.Range['B' + IntToStr(11 + rec_begin)].Value)
    or (recNo = (fact_no + 1)) then begin
      exWks2.Rows[IntToStr(11 + rec_begin)].Insert;
      exWks2.Rows[IntToStr(12 + rec_begin)].Copy;
      exWks2.Rows[IntToStr(11 + rec_begin)].PasteSpecial(1);

      exWks2.Rows[IntToStr(12 + rec_begin) + ':' + IntToStr(11 + recNo)].Group;
      exWks2.Range['B' + IntToStr(11 + rec_begin)].Value := exWks2.Range['B' + IntToStr(12 + rec_begin)].Value;
      exWks2.Range['C' + IntToStr(11 + rec_begin)].Value := exWks2.Range['C' + IntToStr(12 + rec_begin)].Value;
      exWks2.Range['D' + IntToStr(11 + rec_begin)].Value := exWks2.Range['D' + IntToStr(12 + rec_begin)].Value;
      exWks2.Range['E' + IntToStr(11 + rec_begin)].Value := null;
      exWks2.Range['F' + IntToStr(11 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
      exWks2.Range['G' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
      exWks2.Range['H' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';

      inc(recNo);
      inc(fact_no);
      rec_begin := recNo;
    end;
    inc(recNo);
  end;

  // Второй лист - с-ф ЦФТО
  // четвертый и последний RS
  exWks2 := exWkb.WorkSheets[2];
  exWks2.Outline.SummaryRow := 0;

  Q := TADOQuery.Create(nil);
  Q.Recordset := sp_Report_return_tarif.NextRecordset(i);
  Q.Open;

  recNo := 1;

  zfto_score_id := -9;
  rec_begin     := 0;
  sum_str := '';
  nds_str := '';
  while not Q.Eof do begin
    exWks2.Rows[IntToStr(5 + recNo)].Insert;
    exWks2.Rows[IntToStr(4 + recNo)].Copy;
    exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);

    if zfto_score_id <> Q.FieldByName('zfto_score_id').Value then begin

      if rec_begin <> 0 then begin
        exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
        exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
        exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
        exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
        if sum_str = '' then
          sum_str := '=G' + IntToStr(4 + rec_begin)
        else
          sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
      end;

      rec_begin := recNo;
      zfto_score_id := Q.FieldByName('zfto_score_id').Value;
      exWks2.Range['A' + IntToStr(4 + recNo)].Value := Q.FieldByName('zfto_score_id').Value;
      exWks2.Range['B' + IntToStr(4 + recNo)].Value := Q.FieldByName('fact_num').AsString;
      exWks2.Range['C' + IntToStr(4 + recNo)].Value := Q.FieldByName('fact_date').Value;
      exWks2.Range['D' + IntToStr(4 + recNo)].Value := Q.FieldByName('ktgrm_text').AsString;
      recNo := recNo + 1;

      exWks2.Rows[IntToStr(5 + recNo)].Insert;
      exWks2.Rows[IntToStr(4 + recNo)].Copy;
      exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);
    end;

    exWks2.Range['A' + IntToStr(4 + recNo)].Value := Q.FieldByName('zfto_score_id').Value;
    exWks2.Range['B' + IntToStr(4 + recNo)].Value := Q.FieldByName('fact_num').AsString;
    exWks2.Range['C' + IntToStr(4 + recNo)].Value := Q.FieldByName('fact_date').Value;
    exWks2.Range['D' + IntToStr(4 + recNo)].Value := Q.FieldByName('ktgrm_text').AsString;
    exWks2.Range['E' + IntToStr(4 + recNo)].Value := Q.FieldByName('number_doc').AsString;
    exWks2.Range['F' + IntToStr(4 + recNo)].Value := Q.FieldByName('vagon_num').AsString;
    exWks2.Range['G' + IntToStr(4 + recNo)].Value := Q.FieldByName('nds_rub').Value;
    exWks2.Range['H' + IntToStr(4 + recNo)].Value := Q.FieldByName('sum_rub').Value;

    recNo := recNo + 1;
    ShowTextMessage('Осталось ' + IntToStr(Q.RecordCount - Q.RecNo), False);
    Q.Next;
  end;

  Q.Free;

  if rec_begin <> 0 then begin
    exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
    exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
    exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
    exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
    if sum_str = '' then
      sum_str := '=G' + IntToStr(4 + rec_begin)
    else
      sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
  end;

  exWks2.Outline.ShowLevels(1);
  exWks2.Rows[IntToStr(4 + recNo)].Delete;
  exWks2.Rows[IntToStr(4 + recNo)].Delete;
  exWks2.Range['G' + IntToStr(4 + recNo)].Value := sum_str;
  exWks2.Range['H' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'H');
  exWks2.Range['F' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'F');

  exWks := exWkb.WorkSheets[1];
  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_rep);

  ClientDS_distance.Free;
  sp_Report_return_tarif.Free;

//  exWks.Select;
//  exWks.Range['A1'].Select;
//
//  // для ускорения - отключимся от принтера
//  try
//    exWks2.Select;
//    exApp.ActiveWindow.View := 3;
//    exWks.Select;
//    exApp.PrintCommunication := True;
//  except
//  end;

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks2); VarClear(exWks); VarClear(exWkb); VarClear(exApp);

//  Q.Free;
end;

procedure TfmAgree2.dxBarButton178Click(Sender: TObject);
var        i : integer;
    ClientDS : TClientDataSet;
    str_num_vagon    : string;
    str_num_document : string;
    date1, date2 : TDateTime;
begin
  str_num_vagon := '';
  for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_num_vagon := str_num_vagon + ',' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1num_vagon.Index]);
  Delete(str_num_vagon, 1, 1);


  str_num_document := '';
  for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_num_document := str_num_document + ',' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1num_document.Index]);
  Delete(str_num_document, 1, 1);


  date1 := cxGrid2DBBandedTableView1date_from_to.DataBinding.Field.AsDateTime;
  date2 := cxGrid2DBBandedTableView1date_from_to.DataBinding.Field.AsDateTime;
  for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
    if date1 > cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1date_from_to.Index] then
      date1 := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1date_from_to.Index];
    if date2 < cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1date_from_to.Index] then
      date2 := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1date_from_to.Index];
  end;

  for i:=0 to MDIChildCount-1 do
    if (MDIChildren[i].ClassName = 'TfmFact') then  begin
      MDIChildren[i].Free;
      Break;
    end;

  ClientDS := TClientDataSet.Create(nil);
  ShowSearchFact_ClientDSFields(ClientDS);
//  ClientDS.FieldDefs.Add('set_date_from_to', ftBoolean);
//  ClientDS.FieldDefs.Add('set_date_delivery', ftBoolean);
//  ClientDS.FieldDefs.Add('date1', ftDate);
//  ClientDS.FieldDefs.Add('date2', ftDate);
//  ClientDS.FieldDefs.Add('str_num_vagon', ftString, 10000);
//  ClientDS.FieldDefs.Add('str_num_document', ftString, 10000);
//  ClientDS.FieldDefs.Add('num_konten', ftString, 50);
//  ClientDS.FieldDefs.Add('str_xml_reply_id', ftString, 10000);
//  ClientDS.FieldDefs.Add('sub_cod_self', ftString, 50);
//  ClientDS.FieldDefs.Add('firm_customer_name', ftString, 500);
//  ClientDS.FieldDefs.Add('bargain_cod', ftString, 500);
//  ClientDS.FieldDefs.Add('kexp', ftString, 50);
//  ClientDS.FieldDefs.Add('set_main', ftBoolean);
//  ClientDS.FieldDefs.Add('set_bargain_id', ftBoolean);
//  ClientDS.FieldDefs.Add('node_begin_cod', ftString, 50);
//  ClientDS.FieldDefs.Add('node_end_cod', ftString, 50);
//  ClientDS.FieldDefs.Add('node_end_SNG_cod', ftString, 50);
//  ClientDS.FieldDefs.Add('group_name', ftString, 500);
//  ClientDS.FieldDefs.Add('kargoETSNG_cod', ftString, 50);
//  ClientDS.FieldDefs.Add('date_load_file', ftDate);
//  ClientDS.FieldDefs.Add('users_group_id', ftInteger);
//  ClientDS.FieldDefs.Add('set_type_sps', ftBoolean);
//  ClientDS.FieldDefs.Add('set_fact_sum', ftBoolean);
//  ClientDS.FieldDefs.Add('state_begin_name', ftString, 500);
//  ClientDS.FieldDefs.Add('state_end_name', ftString, 500);
//  ClientDS.CreateDataSet;
//  ClientDS.LogChanges := False;

  ClientDS.Append;
  ClientDS.FieldByName('set_date_from_to' ).Value := 1;
  ClientDS.FieldByName('set_date_delivery').Value := 0;
  ClientDS.FieldByName('date1'            ).Value := date1;
  ClientDS.FieldByName('date2'            ).Value := date2;
  ClientDS.FieldByName('str_num_vagon'    ).Value := str_num_vagon;
  ClientDS.FieldByName('str_num_document' ).Value := str_num_document;
  ClientDS.FieldByName('set_main'         ).Value := null;
  ClientDS.FieldByName('set_bargain_id'   ).Value := null;
  ClientDS.FieldByName('users_group_id'   ).Value := usr_pwd.user_group_id;
  ClientDS.FieldByName('set_type_sps'     ).Value := False;
  ClientDS.FieldByName('set_fact_sum'     ).Value := False;
  ClientDS.Post;

  fmFact := TfmFact.Create(self, True);
  fmFact._SetSQLFilter := ClientDS;
  fmFact.WindowState := wsNormal;
  WindowState := wsNormal;
  Height := fmMain.ClientHeight - fmMain.dxStatusBar1.Height - 30;
  Top := 0; Left := 0;
  Width := trunc((fmMain.ClientWidth/3)*2);

  fmFact.Height := Height;
  fmFact.Top := 0;
  fmFact.Left := Width - 1;
  fmFact.Width := trunc((fmMain.ClientWidth/3))-5;
  fmFact.Show;

//  fmFact := TfmFact.Create(self, False);
//  fmFact._SetSQLFilter := ClientDS;

  ClientDS.Free;
end;

procedure TfmAgree2.dxBarButton17Click(Sender: TObject);
var
  retActSettings      : Variant;

  str_bargain_id      : string;
  contract_agent_id   : integer;
  contract_agent_cod  : string;
  firm_agent_name     : string;
  firm_agent_name_eng : string;
  firm_self_name      : string;
  firm_self_name_eng  : string;
  contract_agent_date : TDate;
  currency_id         : integer;
  brief_name          : string;
  wide_name           : string;

  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query               : TADOQuery;
  Query_tmp           : TADOQuery;
  recNo_Score         : integer;
  recNo_Pays          : integer;
  recNo_FirstPart     : integer;

  str_expeditor       : array [1..4] of string;
  str_expeditor_eng   : array [1..4] of string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 200 = 'Акт сверки расчетов (подрядчик 2)'

  if SP_Agree.Eof then exit;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  // Выбор контракта подрядчика
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT DISTINCT contract_id = contract_agent_id, contract_cod = contract_agent_cod, firm_customer_name = firm_agent_name');
  Query.SQL.Add('FROM view_shaping_rate');
  Query.SQL.Add('WHERE bargain_id in (' + str_bargain_id + ')');
  Query.Open;

  contract_agent_id := -9;
  if Query.RecordCount = 1 then contract_agent_id  := Query.FieldByName('contract_id').AsInteger;
  if Query.RecordCount > 1 then begin
    fmFilter := TfmFilter.Create(0, Query, 'contract_id', 'contract_cod', 'firm_customer_name');
    fmFilter._SetContract4FactIncChoose := True;
    if fmFilter.ShowModal = mrOk then contract_agent_id := fmFilter.GetId;
    fmFilter.Free;
  end;
  Query.Free;

  if contract_agent_id = -9 then begin
    Screen.Cursor := crDefault;
    Application.MessageBox('Не выбран подрядчик', 'ВНИМАНИЕ', MB_OK);
    Exit;
  end;

  // --- данные контракта подрядчика -----
  // --- валюта договора по умолчанию для акта сверки -----
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT contract_cod, date_begin, firm_customer_name_full, currency_id, brief_name, wide_name, firm_self, firm_customer, ');
  Query.SQL.Add('type_firm_self_name, type_firm_customer_name, ');
  Query.SQL.Add('type_firm_self_name_translit, type_firm_customer_name_translit ');
  Query.SQL.Add('FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_id));
  Query.Open;

  contract_agent_cod  := Query.FieldByName('contract_cod').AsString;
  contract_agent_date := Query.FieldByName('date_begin').AsDateTime;
//  firm_self_name      := SP_Agree.FieldByName('firm_self_name_short').AsString;
  firm_agent_name     := Query.FieldByName('firm_customer_name_full').AsString;
  currency_id         := Query.FieldByName('currency_id').AsInteger;
  brief_name          := Query.FieldByName('brief_name').AsString;
  wide_name           := Query.FieldByName('wide_name').AsString;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT ISNULL(NULLIF(firm_name_eng, ''''), firm_name_short) as firm_name_eng FROM firm WHERE firm_id = :firm_id');
//  Query_tmp.Close;
//  Query_tmp.Parameters.ParamByName('firm_id').Value := Query.FieldByName('firm_self').AsInteger;
//  Query_tmp.Open;
//  firm_self_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
  Query_tmp.Close;
  Query_tmp.Parameters.ParamByName('firm_id').Value := Query.FieldByName('firm_customer').AsInteger;
  Query_tmp.Open;
  firm_agent_name_eng := Query_tmp.FieldByName('firm_name_eng').AsString;
  Query_tmp.Close;
  Query_tmp.Free;

  str_expeditor[1] := Query.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query.FieldByName('type_firm_customer_name').AsString;
  str_expeditor[3] := wide_name + ' в пользу ' + firm_self_name;
  str_expeditor[4] := wide_name + ' в пользу ' + firm_agent_name;

  str_expeditor_eng[1] := Query.FieldByName('type_firm_self_name_translit').AsString;
  str_expeditor_eng[2] := Query.FieldByName('type_firm_customer_name_translit').AsString;
  str_expeditor_eng[3] := brief_name + ' in favour of ' + firm_self_name_eng;
  str_expeditor_eng[4] := brief_name + ' in favour of ' + firm_agent_name_eng;

  Query.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией подрядчиком',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 0, 0, contract_agent_id);
  if retActSettings[0] = -9 then
    exit;
  // подменяем валюту, на валюту договора с подрядчиком
  retActSettings[7] := VarArrayOf([currency_id, brief_name]);

  firm_self_name := VarToStr(retActSettings[12][1]);
  firm_self_name_eng := retActSettings[12][2];

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;
  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_agent;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := contract_agent_id;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := currency_id;
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];
  SP_Balance.ExecProc;

  if SP_Balance.Parameters.ParamByName('@contract_id').Value = -9 then begin
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Первичный платёж установлен позже указанного периода. Начальное сальдо не сформировано', 'Внимание', MB_OK);
    SP_Balance.Free;
    Exit;
  end;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon)); // 'Акт сверки расчетов (подрядчик).xls'
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Национальные даты и валюта
  exWks.Range['contract_cod'].Value := contract_agent_cod;
  exWks.Range['contract_date'].Value := contract_agent_date;
  exWks.Range['date_begin'].Value := retActSettings[3][1];
  exWks.Range['date_end'].Value := retActSettings[3][2];
  exWks.Range['exch_rus'].Value := wide_name;
  exWks.Range['exch_eng'].Value := brief_name;
  exWks.Range['acts_date'].Value := retActSettings[3][0];

  exWks.Range['B10'].Value := 'Between the ' + str_expeditor_eng[1] + ' ' + firm_self_name_eng +
                              ' and the ' + str_expeditor_eng[2] + ' ' + firm_agent_name_eng +
                              ' that the ' + str_expeditor_eng[2] + ' ' + firm_agent_name_eng +
                              ' fulfilled the obligations to the ' + str_expeditor_eng[1] + ' ' + firm_self_name_eng +
                              ' in the period from ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) +
                              ' till ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]);
  AutoFitMergeCell(exWks.Range['B10']);
  exWks.Range['B11'].Value := 'Между ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' ' + firm_self_name +
                              ' и ' + ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е') + ' ' + firm_agent_name +
                              ' о том, что ' + str_expeditor[2] + ' ' + firm_agent_name +
                              ' полностью выполнил свои обязательства перед ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' ' + firm_self_name +
                              ' за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) +
                              ' по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]);
  AutoFitMergeCell(exWks.Range['B11']);


  exWks.Range['B22'].Value := str_expeditor_eng[1] + ' ' + firm_self_name_eng + ' / ' + str_expeditor[1] + ' ' + firm_self_name;
  exWks.Range['F22'].Value := str_expeditor_eng[2] + ' ' + firm_agent_name_eng + ' / ' + str_expeditor[2] + ' ' + firm_agent_name;

  exWks.Range['balance_begin'].Value := SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000));
  SP_Balance.Free;

  // Данные отчета (заполнение происходит снизу-вверх)
  // Счета (верхняя-левая часть)
  ShowTextMessage('Формирование отчета: Шаг 1 из 2', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_id, invoice_date, comment,');
  Query.SQL.Add('summa = ROUND(invoice_sum * dbo.func_GetExchangeNew_Period(' + VarToStr(retActSettings[7][0]) + ', currency_id, null, null, null, invoice_date, 0), 2)');
  Query.SQL.Add('FROM view_invoice');
  Query.SQL.Add('WHERE type_invoice = 1 AND contract_id = :contract_id');
  Query.SQL.Add('AND invoice_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('ORDER BY invoice_id');
  Query.Parameters.ParamByName('contract_id').Value := contract_agent_id;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  recNo_Score := 1;
  while not Query.Eof do begin
    exWks.Rows[IntToStr(17 + recNo_Score)].ClearContents;
    exWks.Rows[IntToStr(18 + recNo_Score)].Insert;
    exWks.Rows[IntToStr(17 + recNo_Score)].Copy;
    exWks.Rows[IntToStr(18 + recNo_Score)].PasteSpecial(1);

    exWks.Range['B' + IntToStr(17 + recNo_Score)].Value := Query.FieldByName('invoice_date').Value;
    exWks.Range['C' + IntToStr(17 + recNo_Score)].Value := Query.FieldByName('summa').Value;
    exWks.Range['D' + IntToStr(17 + recNo_Score)].Value := Query.FieldByName('comment').Value;

    Query.Next;
    inc(recNo_Score);
  end;
  Query.Free;

  // Платежи (обычные) (верхняя-правая часть)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 2 из 2', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_id, pay_date = dbo.func_DateOnly(pay_date), pay_comment, ');
  Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 1');
  Query.SQL.Add('AND (set_return = 0)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := contract_agent_id;
  Query.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query.Open;

  recNo_Pays := 1;
  while not Query.Eof do begin
    if (recNo_Pays >= recNo_Score) then begin
      exWks.Rows[IntToStr(17 + recNo_Pays)].ClearContents;
      exWks.Rows[IntToStr(18 + recNo_Pays)].Insert;
      exWks.Rows[IntToStr(17 + recNo_Pays)].Copy;
      exWks.Rows[IntToStr(18 + recNo_Pays)].PasteSpecial(1);
    end;

    exWks.Range['F' + IntToStr(17 + recNo_Pays)].Value := Query.FieldByName('pay_date').Value;
    exWks.Range['G' + IntToStr(17 + recNo_Pays)].Value := Query.FieldByName('pay_sum').Value;
    exWks.Range['H' + IntToStr(17 + recNo_Pays)].Value := Query.FieldByName('pay_comment').AsString;

    Query.Next;
    inc(recNo_Pays);
  end;
  Query.Free;

  if (recNo_Pays > recNo_Score) then recNo_FirstPart := recNo_Pays else recNo_FirstPart := recNo_Score;

  if (recNo_FirstPart <> 1) then exWks.Rows[IntToStr(17 + recNo_FirstPart)].Delete
  else recNo_FirstPart := recNo_FirstPart + 1;
  exWks.Rows[IntToStr(17 + recNo_FirstPart)].Delete;

  // Пункты акта
  if recNo_FirstPart = 1 then exWks.Range['balance_end'].Value := '=balance_begin';

  if exWks.Range['balance_begin'].Value = 0 then
    exWks.Range['balance_exch_begin'].Value := brief_name + ' / ' + wide_name
  else if exWks.Range['balance_begin'].Value < 0 then
    exWks.Range['balance_exch_begin'].Value := str_expeditor_eng[3] + ' / ' + str_expeditor[3]
  else
    exWks.Range['balance_exch_begin'].Value := str_expeditor_eng[4] + ' / ' + str_expeditor[4];

  if exWks.Range['balance_end'].Value = 0 then
    exWks.Range['balance_exch_end'].Value := brief_name + ' / ' + wide_name
  else if exWks.Range['balance_end'].Value < 0 then
    exWks.Range['balance_exch_end'].Value := str_expeditor_eng[3] + ' / ' + str_expeditor[3]
  else
    exWks.Range['balance_exch_end'].Value := str_expeditor_eng[4] + ' / ' + str_expeditor[4];

  exWks.Columns['J:J'].Hidden := True;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton180Click(Sender: TObject);
type
  TFunc = function(date: TDateTime; var ClientDS_param: TClientDataSet; set_show_message: boolean): variant;
var
       FFunc : TFunc;
      handle : THandle;
           v : Variant;
       str_bargain_id : string;
                    i : integer;
                    Q : TADOQuery;
            ClientDS1 : TClientDataSet;
        ClientDS_Rail : TClientDataSet;
       ClientDS_Empty : TClientDataSet;
 sp_fact_profit_vagon : TADOStoredProc;
sp_fact_profit_report : TADOStoredProc;
  exApp, exWkb, exWks : Variant;
  node_begin_cod, node_end_cod, kargoETSNG_cod, rod_vagon_cod : string;
begin
  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  ClientDS_Rail := TClientDataSet.Create(nil);
  ClientDS_Rail.FieldDefs.Add('date_from_to'   ,ftDateTime);
  ClientDS_Rail.FieldDefs.Add('node_begin_cod' ,ftString, 10);
  ClientDS_Rail.FieldDefs.Add('node_end_cod'   ,ftString, 10);
  ClientDS_Rail.FieldDefs.Add('kargoETSNG_cod' ,ftString, 10);
  ClientDS_Rail.FieldDefs.Add('kargoGNG_cod'   ,ftString, 10);
  ClientDS_Rail.FieldDefs.Add('rod_vagon_cod'  ,ftString, 10);

  ClientDS_Rail.FieldDefs.Add('distance'       ,ftInteger); // Растояние для которого расчитываем ставку
  ClientDS_Rail.FieldDefs.Add('route_days'     ,ftInteger); // Оборот груж.+пор. (Rail-Тариф)
  ClientDS_Rail.FieldDefs.Add('route_full'     ,ftInteger); // Оборот груж. (Rail-Тариф)
  ClientDS_Rail.FieldDefs.Add('route_empty'    ,ftInteger); // Оборот пор. (Rail-Тариф)

  ClientDS_Rail.FieldDefs.Add('rate_full_val'  ,ftCurrency); // Ставка груженый (Вводим сами)
  ClientDS_Rail.FieldDefs.Add('rate_empty_val' ,ftCurrency); // Ставка порожний (Rail-Тариф)
  ClientDS_Rail.FieldDefs.Add('rate_avg_val'   ,ftCurrency); // Ставка средняя
  ClientDS_Rail.CreateDataSet;
  ClientDS_Rail.LogChanges := False;


  ClientDS_Empty := TClientDataSet.Create(nil);
  ClientDS_Empty.FieldDefs.Add('date_from_to'  , ftDateTime);
  ClientDS_Empty.FieldDefs.Add('node_begin_cod', ftString, 10);
  ClientDS_Empty.FieldDefs.Add('node_end_cod'  , ftString, 10);
  ClientDS_Empty.FieldDefs.Add('kargoETSNG_cod', ftString, 10);
  ClientDS_Empty.FieldDefs.Add('rod_vagon_cod' , ftString, 10);
  ClientDS_Empty.FieldDefs.Add('calc_otpr_empty',ftCurrency);
  ClientDS_Empty.IndexFieldNames := 'node_begin_cod;node_end_cod;kargoETSNG_cod;rod_vagon_cod';
  ClientDS_Empty.CreateDataSet;
  ClientDS_Empty.LogChanges := False;


  ClientDS1 := TClientDataSet.Create(nil);
  ClientDS1.FieldDefs.Add('fact_id', ftInteger);
  ClientDS1.FieldDefs.Add('firm_name', ftString, 400);
  ClientDS1.FieldDefs.Add('date_from_to', ftDate);
  ClientDS1.FieldDefs.Add('node_begin_cod', ftString, 20);
  ClientDS1.FieldDefs.Add('node_begin_name', ftString, 200);
  ClientDS1.FieldDefs.Add('node_end_cod', ftString, 20);
  ClientDS1.FieldDefs.Add('node_end_name', ftString, 200);
  ClientDS1.FieldDefs.Add('kargoETSNG_cod', ftString, 20);
  ClientDS1.FieldDefs.Add('kargoETSNG_name', ftString, 200);
  ClientDS1.FieldDefs.Add('fact_weight', ftFloat);
  ClientDS1.FieldDefs.Add('type_park_name', ftString, 200);
  ClientDS1.FieldDefs.Add('type_park_cod', ftString, 20);
  ClientDS1.FieldDefs.Add('load_days', ftInteger);
  ClientDS1.FieldDefs.Add('unload_days', ftInteger);
  ClientDS1.FieldDefs.Add('empty_route_days', ftInteger);
  ClientDS1.FieldDefs.Add('full_route_days', ftInteger);
  ClientDS1.FieldDefs.Add('route_days', ftInteger);
  ClientDS1.FieldDefs.Add('calc_sum_otpr_empty', ftCurrency);
  ClientDS1.FieldDefs.Add('arenda_val', ftCurrency);
  ClientDS1.FieldDefs.Add('repair_val', ftCurrency);
  ClientDS1.FieldDefs.Add('rod_vagon_cod', ftString, 10);
  ClientDS1.CreateDataSet;
  ClientDS1.LogChanges := False;

  sp_fact_profit_vagon := TADOStoredProc.Create(nil);
  sp_fact_profit_vagon.Connection := Fconnect;
  sp_fact_profit_vagon.ProcedureName := 'sp_fact_profit_vagon';
  sp_fact_profit_vagon.Parameters.Refresh;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT	fact_id, node_begin_cod, node_begin_name, node_end_cod, node_end_name, kargoETSNG_cod, kargoETSNG_name, fact_weight, view_fact.date_from_to,');
  Q.SQL.Add('       ''Управляемый парк'' as type_park_name, ''100'' as type_park_cod, vc1.cost_value arenda_val, vc2.cost_value repair_val, view_vagon.rod_vagon_cod, view_fact.firm_customer_name firm_name');
  Q.SQL.Add('FROM	  view_fact');
  Q.SQL.Add('       inner join users on view_fact.users_id = users.users_id');
  Q.SQL.Add('       left join view_vagon ON (view_fact.num_vagon = view_vagon.num_vagon) AND (view_vagon.users_group_id = users.users_group_id)');
  Q.SQL.Add('       left join view_vagon_owner ON view_vagon.vagon_id = view_vagon_owner.vagon_id AND view_fact.date_from_to BETWEEN view_vagon_owner.date_begin AND ISNULL(view_vagon_owner.date_end, view_fact.date_from_to + 1)');
  Q.SQL.Add('       left join view_vagon_stand_cost vc1 on view_vagon.rod_vagon_id = vc1.rod_vagon_id and vc1.type_cost = 1 and users.users_group_id = vc1.users_group_id and view_fact.date_from_to between vc1.date_begin and vc1.date_end');
  Q.SQL.Add('       left join view_vagon_stand_cost vc2 on view_vagon.rod_vagon_id = vc2.rod_vagon_id and vc2.type_cost = 2 and users.users_group_id = vc2.users_group_id and view_fact.date_from_to between vc2.date_begin and vc2.date_end');
  Q.SQL.Add('WHERE	bargain_id in (' + str_bargain_id + ')');
  Q.SQL.Add('       and set_main = 1');
  Q.SQL.Add('       and view_vagon_owner.type_park_cod in (''0'',''1'',''2'')');
  Q.Open;

  try
    while not Q.Eof do begin
      ShowTextMessage('Осталось ' + IntToStr(Q.RecordCount - Q.RecNo) + ' вагонов...',  False);

      sp_fact_profit_vagon.Close;
      sp_fact_profit_vagon.Parameters.Refresh;
      sp_fact_profit_vagon.Parameters.ParamByName('@fact_id'    ).Value := Q.FieldByName('fact_id').Value;
      sp_fact_profit_vagon.Parameters.ParamByName('@type_result').Value := 1;
      sp_fact_profit_vagon.ExecProc;


      ClientDS1.Append;
      ClientDS1.FieldByName('fact_id'             ).Value := Q.FieldByName('fact_id').Value;
      ClientDS1.FieldByName('firm_name'           ).Value := Q.FieldByName('firm_name').Value;
      ClientDS1.FieldByName('date_from_to'        ).Value := Q.FieldByName('date_from_to').Value;
      ClientDS1.FieldByName('node_begin_cod'      ).Value := Q.FieldByName('node_begin_cod').Value;
      ClientDS1.FieldByName('node_begin_name'     ).Value := Q.FieldByName('node_begin_name').Value;
      ClientDS1.FieldByName('node_end_cod'        ).Value := Q.FieldByName('node_end_cod').Value;
      ClientDS1.FieldByName('node_end_name'       ).Value := Q.FieldByName('node_end_name').Value;
      ClientDS1.FieldByName('kargoETSNG_cod'      ).Value := Q.FieldByName('kargoETSNG_cod').Value;
      ClientDS1.FieldByName('kargoETSNG_name'     ).Value := Q.FieldByName('kargoETSNG_name').Value;
      ClientDS1.FieldByName('fact_weight'         ).Value := Q.FieldByName('fact_weight').Value;
      ClientDS1.FieldByName('type_park_name'      ).Value := Q.FieldByName('type_park_name').Value;
      ClientDS1.FieldByName('type_park_cod'       ).Value := Q.FieldByName('type_park_cod').Value;
      ClientDS1.FieldByName('arenda_val'          ).Value := Q.FieldByName('arenda_val').Value;
      ClientDS1.FieldByName('repair_val'          ).Value := Q.FieldByName('repair_val').Value;
      ClientDS1.FieldByName('rod_vagon_cod'       ).Value := Q.FieldByName('rod_vagon_cod').Value;
      ClientDS1.FieldByName('load_days'           ).Value := sp_fact_profit_vagon.Parameters.ParamByName('@load_days').Value;
      ClientDS1.FieldByName('unload_days'         ).Value := sp_fact_profit_vagon.Parameters.ParamByName('@unload_days').Value;
      ClientDS1.FieldByName('empty_route_days'    ).Value := sp_fact_profit_vagon.Parameters.ParamByName('@empty_route_days').Value;
      ClientDS1.FieldByName('full_route_days'     ).Value := sp_fact_profit_vagon.Parameters.ParamByName('@full_route_days').Value;
      ClientDS1.FieldByName('route_days'          ).Value := sp_fact_profit_vagon.Parameters.ParamByName('@route_days').Value;
      ClientDS1.FieldByName('calc_sum_otpr_empty' ).Value := sp_fact_profit_vagon.Parameters.ParamByName('@calc_sum_otpr_empty').Value;
      ClientDS1.Post;


      Q.Next;
    end;
  except
    on E: Exception do begin
      Application.MessageBox(PChar('Ошибка расчета оборота [№ записи вагона] = ' + Q.FieldByName('fact_id').AsString + '!' + #10 + E.Message), 'Ошибка', MB_ICONERROR or MB_OK);
      Exit;
    end;
  end;
  ShowTextMessage;


  sp_fact_profit_report := TADOStoredProc.Create(nil);
  sp_fact_profit_report.Connection := Fconnect;
  sp_fact_profit_report.ProcedureName := 'sp_fact_profit_report';
  sp_fact_profit_report.Parameters.Refresh;
  sp_fact_profit_report.Parameters.ParamByName('@fact_xml').Value := DataXMLToSQL(ClientDS1);
  sp_fact_profit_report.Open;
  try
    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, 435));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];

    node_begin_cod := '';
    node_end_cod   := '';
    kargoETSNG_cod := '';
    rod_vagon_cod  := '';

    exWks.Range['E2'].Value := cxGrid1DBBandedTableView1firm_customer_name.DataBinding.Field.AsString;
    sp_fact_profit_report.First;
    while not sp_fact_profit_report.Eof do begin
      ShowTextMessage('Осталось ' + IntToStr(sp_fact_profit_report.RecordCount - sp_fact_profit_report.RecNo) + ' вагонов...',  False);
      exWks.Rows[IntToStr(7 + sp_fact_profit_report.RecNo)].Insert;
      exWks.Rows[IntToStr(6 + sp_fact_profit_report.RecNo)].Copy;
      exWks.Rows[IntToStr(7 + sp_fact_profit_report.RecNo)].PasteSpecial(1);


      if  (node_begin_cod <> sp_fact_profit_report.FieldByName('node_begin_cod').AsString) or
          (node_end_cod   <> sp_fact_profit_report.FieldByName('node_end_cod').AsString) or
          (kargoETSNG_cod <> sp_fact_profit_report.FieldByName('kargoETSNG_cod').AsString) or
          (rod_vagon_cod  <> sp_fact_profit_report.FieldByName('rod_vagon_cod').AsString) then begin

        ClientDS_Rail.EmptyDataSet;
        ClientDS_Rail.Append;
        ClientDS_Rail.FieldByName('date_from_to'  ).Value := sp_fact_profit_report.FieldByName('date_from_to').Value;
        ClientDS_Rail.FieldByName('node_begin_cod').Value := sp_fact_profit_report.FieldByName('node_begin_cod').Value;
        ClientDS_Rail.FieldByName('node_end_cod'  ).Value := sp_fact_profit_report.FieldByName('node_end_cod').Value;
        ClientDS_Rail.FieldByName('kargoETSNG_cod').Value := sp_fact_profit_report.FieldByName('kargoETSNG_cod').Value;
        ClientDS_Rail.FieldByName('kargoGNG_cod'  ).Value := '';
        ClientDS_Rail.FieldByName('rod_vagon_cod' ).Value := sp_fact_profit_report.FieldByName('rod_vagon_cod').Value;
        ClientDS_Rail.FieldByName('distance'      ).Value := -9;
        ClientDS_Rail.FieldByName('rate_full_val' ).Value := 0;
        ClientDS_Rail.Post;

       if (sp_fact_profit_report.FieldByName('node_begin_cod').AsString <> '') and
          (sp_fact_profit_report.FieldByName('node_end_cod').AsString <> '') and
          (sp_fact_profit_report.FieldByName('kargoETSNG_cod').AsString <> '') and
          (sp_fact_profit_report.FieldByName('rod_vagon_cod').AsString <> '') then begin
          try
            handle := LoadLibrary('ctm_tarif.dll');
            @FFunc := GetProcAddress(handle, 'GetCalcTariffCalculate');
            FFunc(Date, ClientDS_Rail, False);
            FreeLibrary(handle);
          except
            on E: Exception do begin
              Application.MessageBox(PChar('Ошибка расчета Rail-Тариф!' + #10 + E.Message), 'Ошибка', MB_ICONERROR or MB_OK);
              ClientDS_Rail.EmptyDataSet;
            end;
          end;
       end;


        ClientDS_Empty.EmptyDataSet;
        ClientDS_Empty.Append;
        ClientDS_Empty.FieldByName('date_from_to'  ).Value := sp_fact_profit_report.FieldByName('date_from_to').Value;
        ClientDS_Empty.FieldByName('node_begin_cod').Value := sp_fact_profit_report.FieldByName('node_begin_cod').Value;
        ClientDS_Empty.FieldByName('node_end_cod'  ).Value := sp_fact_profit_report.FieldByName('node_end_cod').Value;
        ClientDS_Empty.FieldByName('kargoETSNG_cod').Value := sp_fact_profit_report.FieldByName('kargoETSNG_cod').Value;
        ClientDS_Empty.FieldByName('rod_vagon_cod' ).Value := sp_fact_profit_report.FieldByName('rod_vagon_cod').Value;
        ClientDS_Empty.Post;

        if (sp_fact_profit_report.FieldByName('node_begin_cod').AsString <> '') and
          (sp_fact_profit_report.FieldByName('node_end_cod').AsString <> '') and
          (sp_fact_profit_report.FieldByName('kargoETSNG_cod').AsString <> '') and
          (sp_fact_profit_report.FieldByName('rod_vagon_cod').AsString <> '') then begin
          try
            handle := LoadLibrary('ctm_tarif.dll');
            @FFunc := GetProcAddress(handle, 'GetCalcTariffEmpty');
            FFunc(Date, ClientDS_Empty, False);
            FreeLibrary(handle);
          except
            on E: Exception do begin
              Application.MessageBox(PChar('Ошибка расчета Rail-Тариф!' + #10 + E.Message), 'Ошибка', MB_ICONERROR or MB_OK);
              ClientDS_Rail.EmptyDataSet;
            end;
          end;
        end;
      end;


      exWks.Range['B' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('firm_name').AsString;

      exWks.Range['C' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('node_begin_name').AsString;
      exWks.Range['D' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('node_end_name').AsString;
      exWks.Range['E' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['F' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('type_park_name').AsString;

      exWks.Range['G' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('cnt_vagon').AsInteger;
      exWks.Range['H' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('fact_weight').AsFloat;
      exWks.Range['I' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := GetCalcDistanceDB(sp_fact_profit_report.FieldByName('node_begin_cod').AsString, sp_fact_profit_report.FieldByName('node_end_cod').AsString, Fconnect, False, Date);

      exWks.Range['J' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('load_days').Value;
      exWks.Range['K' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('unload_days').Value;
      exWks.Range['L' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('empty_route_days').Value;
      exWks.Range['M' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('full_route_days').Value;
      exWks.Range['N' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('route_days').Value;

      exWks.Range['O' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := ClientDS_Rail.FieldByName('route_days').Value+3;
      exWks.Range['P' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := ClientDS_Rail.FieldByName('route_empty').Value;

      exWks.Range['R' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('arenda_val').Value;
      exWks.Range['S' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('repair_val').Value;

      exWks.Range['X' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := sp_fact_profit_report.FieldByName('calc_sum_otpr_empty').Value;
      exWks.Range['Y' + IntToStr(6 + sp_fact_profit_report.RecNo)].Value := ClientDS_Empty.FieldByName('calc_otpr_empty').Value;


      node_begin_cod := sp_fact_profit_report.FieldByName('node_begin_cod').AsString;
      node_end_cod   := sp_fact_profit_report.FieldByName('node_end_cod').AsString;
      kargoETSNG_cod := sp_fact_profit_report.FieldByName('kargoETSNG_cod').AsString;
      rod_vagon_cod  := sp_fact_profit_report.FieldByName('rod_vagon_cod').AsString;

      sp_fact_profit_report.Next;
    end;


    exWks.Rows[IntToStr(7 + sp_fact_profit_report.RecNo)].Delete;
    exWks.Rows[IntToStr(7 + sp_fact_profit_report.RecNo)].Delete;
  except
    on E: Exception do begin
      Application.MessageBox(PChar('Ошибка расчета Rail-Тариф!' + #10 + E.Message), 'Ошибка', MB_ICONERROR or MB_OK);
      Exit;
    end;
  end;

//  ClientDSView(ClientDS1);
//  ShowMessage(DataXMLToSQL(ClientDS1));

  sp_fact_profit_vagon.Free;
  ClientDS1.Free;
  ClientDS_Rail.Free;
  ClientDS_Empty.Free;
  sp_fact_profit_report.Free;
  Q.Free;

  exWks.Select;
  exWks.Range['A1'].Select;
  Screen.Cursor := crDefault;
  ShowTextMessage();
  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);

end;

procedure TfmAgree2.dxBarButton181Click(Sender: TObject);
var SP : TADOStoredProc;
    TS : TStringList;
    str_fact_id         :string;
    str_vagon_arenda_id :string;
    str_num_vagon :string;
begin
  fmVagonArenda := TfmVagonArenda.Create(Application, True);
  fmVagonArenda.PageControl1.ActivePageIndex := TComponent(Sender).Tag;
  if not VarIsNull(cxGrid2DBBandedTableView1date_from_to.DataBinding.Field.Value) then begin
     fmVagonArenda.set_date_begin := StartOfTheMonth(cxGrid2DBBandedTableView1date_from_to.DataBinding.Field.Value);
     fmVagonArenda.set_date_end   := EndOfTheMonth(cxGrid2DBBandedTableView1date_from_to.DataBinding.Field.Value) - 1;
     fmVagonArenda.dxBarSubItem3.Caption := FormatDateTime('mmmm yyyy', StartOfTheMonth(cxGrid2DBBandedTableView1date_from_to.DataBinding.Field.Value));
  end;

  fmVagonArenda.PageControl1Change(nil);

  str_num_vagon := cx_GetSelectedValues(cxGrid2,'num_vagon');
  FiltercxGrid4ListID(fmVagonArenda.cxGrid1DBBandedTableView1, 'num_vagon', str_num_vagon);

  if fmVagonArenda.ShowModal = mrOk then begin
    Screen.Cursor := crHourglass;

    if fmVagonArenda._str_vagon_arenda_id = '' then exit;

    str_fact_id := cx_GetSelectedValues(cxGrid2,'fact_id');
    str_vagon_arenda_id := fmVagonArenda._str_vagon_arenda_id;

    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_vagon_arenda_update_fact';
    SP.Parameters.Refresh;
    SP.Parameters.ParamByName('@date_begin').Value          := fmVagonArenda._date_begin;
    SP.Parameters.ParamByName('@date_end').Value            := fmVagonArenda._date_end;
    SP.Parameters.ParamByName('@str_vagon_arenda_id').Value := str_vagon_arenda_id;
    SP.Parameters.ParamByName('@str_fact_id').Value         := str_fact_id;
    SP.Parameters.ParamByName('@bargain_id').Value          := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
      try
        SP.ExecProc;
      except
      end;
  end;

  ShowTextMessage;
  Screen.Cursor := crHourglass;
  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
end;

procedure TfmAgree2.dxBarButton186Click(Sender: TObject);
var          i : integer;
      str_fact_id: string;
begin
  str_fact_id := '';
  str_fact_id := cx_GetSelectedValues(cxGrid2, 'fact_id');
  if str_fact_id = '' then exit;

  for i:=0 to fmMain.MDIChildCount-1 Do
    if (fmMain.MDIChildren[i].ClassName = 'TfmFact') then begin
      fmMain.MDIChildren[i].Free;
      break;
    end;
  fmFact := TfmFact.Create(self, True);
  fmFact._SetStrFactid := str_fact_id;
  fmFact.WindowState := wsMaximized;
  fmFact.Show;
end;

procedure TfmAgree2.dxBarButton187Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks    : Variant;
  sp_Report_return_tarif : TADOStoredProc;
  Query_tmp, Q, Q2       : TADOQuery;
  Query_Contract         : TADOQuery;
  recNo, i               : integer;
  contract_agent_id      : integer;
  contract_agent_rep_id  : integer;
  fact_id, fact_no       : integer;
  shaping_rate_id        : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..2] of string;
  zfto_score_id          : integer;
  rec_begin              : integer;
  sum_str, nds_str       : string;
  str_zfto_score_id      : string;

  currency_id            : integer; // Валюта отчета (Валюта подрядчика)
  brief_name             : string;

  cod_shablon            : integer;
  sp_name                : string;
begin
  // 365 - Отчет о расходах, подлежащих возмещению (ПГК)

  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Кому перевыставляем (Исполнитель)';
  if fmFilter.ShowModal = mrOk then begin
    contract_agent_rep_id := fmFilter.GetId;
  end else begin
    Q.Free;
    Screen.Cursor := crDefault;
    Application.MessageBox('Не выбран подрядчик', 'ВНИМАНИЕ', MB_OK);
    Exit;
  end;
  fmFilter.Free;


  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_rep_id));
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Close;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  // Проверка на одну валюту для всех выбранных подрядчиков
  // Без проверки (сами виноваты, если получится бред)
  // Берем первую попавшеюся валюту в качестве наименования колонок
  Query_tmp.SQL.Clear;
  Query_tmp.SQL.Add('SELECT DISTINCT currency_id, brief_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ') AND contract_agent_id = ' + IntToStr(contract_agent_rep_id));
  Query_tmp.Open;
  currency_id := Query_tmp.FieldByName('currency_id').AsInteger;
  brief_name  := Query_tmp.FieldByName('brief_name').AsString;
  Query_tmp.Free;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Подрядчик чьи с\ф попадут в отчет';
  if fmFilter.ShowModal = mrOk then begin

    contract_agent_id := fmFilter.GetId;

    // Имя ХП
    case cod_shablon of
      365: sp_name := 'sp_Report_return_tarif_2';
      else sp_name := 'sp_Report_return_tarif_2';
    end;

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTEFROMFACT, contract_agent_rep_id, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    // В качестве валюты отчета запишем валюту подрядчика (ибо отчет формируется по этой валюте)
    retActSettings[7]  := VarArrayOf([currency_id, brief_name]);

    // Составим список перечней и если их болше 1, то предложим выбор
    ShowTextMessage('Получение списка перечней...', False);
    sp_Report_return_tarif := TADOStoredProc.Create(nil);
    sp_Report_return_tarif.Connection := Fconnect;
    sp_Report_return_tarif.ProcedureName := sp_name;
    sp_Report_return_tarif.Parameters.Refresh;
    sp_Report_return_tarif.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_tarif.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_tarif.Parameters.ParamByName('@str_zfto_score_id'        ).Value := null;
    sp_Report_return_tarif.Parameters.ParamByName('@type_result'              ).Value := 7;
    sp_Report_return_tarif.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_tarif.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_tarif.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_tarif.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_tarif.CommandTimeout := 100;
    sp_Report_return_tarif.Open;
    ShowTextMessage;

    if sp_Report_return_tarif.RecordCount = 0 then str_zfto_score_id := '';
    if sp_Report_return_tarif.RecordCount = 1 then str_zfto_score_id := sp_Report_return_tarif.FieldByName('zfto_score_id').AsString;
    if sp_Report_return_tarif.RecordCount > 1 then begin
      fmFilter := TfmFilter.Create(0, sp_Report_return_tarif, 'zfto_score_id', 'ktgrm_cod', 'ktgrm_text');
      fmFilter._SetChooseZFTO4Report := True;
      if fmFilter.ShowModal = mrOk then
        str_zfto_score_id := fmFilter._GetStrId
      else
        str_zfto_score_id := '';
    end;
    sp_Report_return_tarif.Free;

    // Запомним выбор для формирования с\ф
    retActSettings[15] := str_zfto_score_id;
    ShowTextMessage;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];

    // Для всех отчетов делаем видимыми, а затем закрываем по данным с формы настройки
    // Перед заполнением спрячем не нужные колонки - если это необходимо
    if VarToStr(retActSettings[10]) <> '' then
      exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

    // Заполняем шапку и подписи
    Query_Contract := TADOQuery.Create(nil);
    Query_Contract.Connection := Fconnect;
    Query_Contract.SQL.Add('SELECT *, date_begin as contract_date_begin FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_rep_id));
    Query_Contract.Open;

    Q2 := TADOQuery.Create(nil);
    Q2.Connection := Fconnect;
    Q2.SQL.Add('SELECT isnull(agreement_note,'''') agreement_note, isnull(shaping_rate_fee,0) shaping_rate_fee FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ') and contract_agent_id = ' + IntToStr(contract_agent_rep_id) + ' ORDER BY agreement_note, shaping_rate_fee DESC');
    Q2.Open;

    exWks.Range['C4'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
    exWks.Range['L6'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

    exWks.Range['B8'].Value := '    1. Настоящий Отчет составлен на предмет того, что ' + VarToStr(retActSettings[12][1]) +
                               ' произвело в период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' +
                               ' следующие расходы в пользу ' + Query_Contract.FieldByName('firm_customer_name_short').AsString +
                               ' по ' + Q2.FieldByName('agreement_note').AsString + ' Дополнительного соглашения № 1-16 от 01.01.2016 г. ' +
                               'к Договору № ' + Query_Contract.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Contract.FieldByName('contract_date_begin').AsDateTime) + 'г.' +
                               ' согласно нижеприведенного реестра:';

    exWks.Range['B23'].Value := '    2. В соответсвии ' + Q2.FieldByName('agreement_note').AsString + ' Дополнительного соглашения № 1-16 от 01.01.2016 г. ' +
                               'к Договору № ' + Query_Contract.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Contract.FieldByName('contract_date_begin').AsDateTime) + 'г.' +
                               ' Агентское вознаграждение ' + VarToStr(retActSettings[12][1]) +
                               ' в размере ' + Q2.FieldByName('shaping_rate_fee').AsString + '% составило:';

    exWks.Range['H23'].Value := '=ROUND(R[-5]C*' + ReplaceStr(FloatToStr(Q2.FieldByName('shaping_rate_fee').AsCurrency/100), ',', '.') + ',2)';

    exWks.Range['B27'].Value := VarToStr(retActSettings[12][1]);
    exWks.Range['I27'].Value := Query_Contract.FieldByName('firm_customer_name_short').AsString;


    Q2.Free;

    // Подписанты
    if retActSettings[13][2] = True then begin
      exWks.Range['B29'].Value := VarToStr(retActSettings[14][1]);
      exWks.Range['D29'].Value := retActSettings[13][1];
    end else
      exWks.Range['B29:F29'].ClearContents;
    if retActSettings[13][5] = True then begin
      exWks.Range['B31'].Value := VarToStr(retActSettings[14][4]);
      exWks.Range['D31'].Value := retActSettings[13][4];
    end else
      exWks.Range['B30:G31'].Delete(Shift := -4162);
    if retActSettings[13][8] = True then begin
      exWks.Range['I29'].Value := VarToStr(retActSettings[14][7]);
      exWks.Range['M29'].Value := retActSettings[13][7];
    end else
      exWks.Range['I29:O29'].ClearContents;
    if retActSettings[13][11] = True then begin
      exWks.Range['I31'].Value := VarToStr(retActSettings[14][10]);
      exWks.Range['M31'].Value := retActSettings[13][10];
    end else
      exWks.Range['I30:P31'].Delete(Shift := -4162);

    // Наименование валюты
    if (currency_id <> 3) then begin
      exWks.Range['N9'].Value := '(в ' + brief_name + ')';
      exWks.Range['H10'].Value := 'Сумма, подлежащая возмещению (без НДС), ' + brief_name + '';
      exWks.Range['J10'].Value := 'Сумма, подлежащая возмещению с НДС, ' + brief_name + '';
    end;

    exWks.Range['H16'].Value := '20%';
    exWks.Range['F21'].Value := 'в т.ч. НДС 20% ';
    exWks.Range['F24'].Value := 'в т.ч. НДС 20% ';
    exWks.Range['I10'].Value := 'Сумма НДС, 20% ';

    ShowTextMessage('Подготовка данных ...', False);

    // Верхня таблица - повагонка
    sp_Report_return_tarif := TADOStoredProc.Create(nil);
    sp_Report_return_tarif.Connection := Fconnect;
    sp_Report_return_tarif.ProcedureName := sp_name;
    sp_Report_return_tarif.Parameters.Refresh;
    sp_Report_return_tarif.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_tarif.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_tarif.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_tarif.Parameters.ParamByName('@type_result'              ).Value := 0;
    sp_Report_return_tarif.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_tarif.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_tarif.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_tarif.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_tarif.CommandTimeout := 100;
    sp_Report_return_tarif.Open;

    recNo       := 1;
    fact_no     := 1;

    fact_id := -9; shaping_rate_id := -9;
    while not sp_Report_return_tarif.Eof do begin

      if (fact_id <> sp_Report_return_tarif.FieldByName('fact_id').Value) or (shaping_rate_id <> sp_Report_return_tarif.FieldByName('shaping_rate_id').Value) then begin
        fact_id := sp_Report_return_tarif.FieldByName('fact_id').Value;
        shaping_rate_id := sp_Report_return_tarif.FieldByName('shaping_rate_id').Value;
        exWks.Rows[IntToStr(13 + recNo)].Insert;
        exWks.Rows[IntToStr(12 + recNo)].Copy;
        exWks.Rows[IntToStr(13 + recNo)].PasteSpecial(1);

        exWks.Range['A' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('bargain_id').Value;
        exWks.Range['B' + IntToStr(12 + recNo)].Value := fact_no;
        exWks.Range['C' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('service_kind_rep').AsString;
        exWks.Range['D' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('node_begin_name').AsString;
        exWks.Range['E' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('node_end_name').AsString;
        if sp_Report_return_tarif.FieldByName('vid_send').Value = 1 then // ВИД ОТПРАВКИ = Контейнерная (по версии Подрядчика)
          exWks.Range['F' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_konten').AsString
        else
          exWks.Range['F' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_vagon').Value;

        exWks.Range['H' + IntToStr(12 + recNo)].Value := '=RC[2]-RC[1]';
        exWks.Range['I' + IntToStr(12 + recNo)].Value := '=RC[1]*SUM(RC[7])/(SUM(RC[7])+100)';
        exWks.Range['J' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('precalc_sum').Value;
        Query_NDS.Locate('nds_id', sp_Report_return_tarif.FieldByName('shaping_rate_nds_id').Value, []);
        exWks.Range['P' + IntToStr(12 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

        exWks.Range['K' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('contract_agent_cod').AsString;
        exWks.Range['L' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_document').AsString;
        exWks.Range['M' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_from_to').Value;

        exWks.Range['N' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_num').AsString;
        if sp_Report_return_tarif.FieldByName('fact_date').IsNull = False then
          exWks.Range['O' + IntToStr(12 + recNo)].Value := FormatDateTime('dd.mm.yyyy',sp_Report_return_tarif.FieldByName('fact_date').Value)
        else
          exWks.Range['O' + IntToStr(12 + recNo)].Value := '';

        recNo := recNo + 1;
        fact_no := fact_no + 1;
      end else begin
        exWks.Range['N' + IntToStr(12 + recNo - 1)].Value := VarToStr(exWks.Range['N' + IntToStr(12 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('fact_num').AsString;
        if sp_Report_return_tarif.FieldByName('fact_date').IsNull = False then
          exWks.Range['O' + IntToStr(12 + recNo - 1)].Value := VarToStr(exWks.Range['O' + IntToStr(12 + recNo - 1)].Value) + #10 + FormatDateTime('dd.mm.yyyy',sp_Report_return_tarif.FieldByName('fact_date').Value);
      end;

      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_tarif.RecordCount - sp_Report_return_tarif.RecNo), False);
      sp_Report_return_tarif.Next;
    end;

    exWks.Range[IntToStr(12 + 1) + ':' + IntToStr(12 + recNo)].EntireRow.AutoFit;
    exWks.Columns['C:C'].EntireColumn.AutoFit;

    exWks.Rows[IntToStr(12 + recNo)].Delete;
    if recNo = 1 then
      exWks.Rows[IntToStr(12 + recNo)].ClearContents
    else
      exWks.Rows[IntToStr(12 + recNo)].Delete;

    // Суммы прописью
    exWks.Range['str_itogo'].Value      := GetSumScript_RUS(exWks.Range['sum_itogo'].Value      , currency_id);
    exWks.Range['str_nds_itogo'].Value  := GetSumScript_RUS(exWks.Range['sum_nds_itogo'].Value  , currency_id);
    exWks.Range['str_commis'].Value     := GetSumScript_RUS(exWks.Range['sum_commis'].Value     , currency_id);
    exWks.Range['str_nds_commis'].Value := GetSumScript_RUS(exWks.Range['sum_nds_commis'].Value , currency_id);

    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['sum_itogo'].Value);

    sp_Report_return_tarif.Free;
    Query_Contract.Free;

//    exWks.Select;
//    exWks.Range['A1'].Select;

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
//    exApp.Visible := True;
    VarClear(exWks); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
end;

procedure TfmAgree2.dxBarButton188Click(Sender: TObject);
type
  TFunc = function(AppHand: THandle; users_group_cod: string; global_id: integer; DocumentType: string; data_xml: TArray<Byte>; data_size: integer; ClientDS: TClientDataSet): variant;
  TFuncPdf = procedure(users_group_cod: string; print_form_id: integer; path : string);
var
  // Генерация печатной формы  --------------
  FPrintForm  : TFunc;
  FPrintFormPdf  : TFuncPdf;
  handle      : THandle;
  v           : Variant;
  mem_bytes   : TBytesStream;
  ClientDS    : TClientDataSet;

  save_path   : string;
  // ----------------------------------------
  sp_acts_modify : TADOStoredProc;

var doc                                                   : EDOXMLAct.IXMLФайл;
    xml                                                   : TXMLDocument;

    _fmActs                                               : TfmActs;

    acts_id                                               : integer;
    acts_sum_without_nds, acts_sum_nds, acts_sum_with_nds : Double;
    sum_without_nds, sum_nds, sum_with_nds                : Double;
    rate, nds_rate, cnt                                   : Double;
    fld_weight, ed_izm_name                               : string;
    str_bargain_id                                        : string;
    str_agreement                                         : string;

    Query                                                 : TADOQuery;
    Query_tmp                                             : TADOQuery;
    Q_NDS                                                 : TADOQuery;
    SP_Table                                              : TADOStoredProc;

    ClientDS_distance                                     : TClientDataSet;

    _GUID                                                 : TGUID;

    _tmp_date                                             : TDateTime;
begin

  _fmActs := TfmActs.Create(Application, False);
  _fmActs._SetFilterActs(-9, Fdate1, Fdate2, '', -9, False);
  _fmActs._SetFilterActs4TypeCod('233,237');
  if _fmActs.ShowModal <> mrOk then
    exit;

  acts_id := _fmActs._GetActsID;

  if not MatchStr(_fmActs._GetActsTypeCod, ['233', '237']) then begin
    Application.MessageBox('Выбран не верный тип акта', 'Внимание', MB_OK or MB_ICONERROR);
    exit;
  end;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Создание XML...', False);

  // Заполнение данных
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT * FROM view_acts WHERE acts_id = ' + IntToStr(acts_id));
  Query.Open;

  // Список перевозок
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT bargain_id FROM ACTS_BARGAIN WHERE acts_id = ' + IntToStr(acts_id));
  Query_tmp.Open;
  str_bargain_id := '';
  while not Query_tmp.Eof do begin
    if str_bargain_id <> '' then str_bargain_id := str_bargain_id + ',';
    str_bargain_id := str_bargain_id + Query_tmp.FieldByName('bargain_id').AsString;
    Query_tmp.Next;
  end;

  // str_agreement
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT DISTINCT doc_id, doc_describe, doc_image_date');
  Query_tmp.SQL.Add('FROM view_doc_blob JOIN bargain');
  Query_tmp.SQL.Add('ON doc_id = agreement_id AND doc_type_cod in (''2'') AND doc_describe is not null');
  Query_tmp.SQL.Add('AND bargain.bargain_id IN (' + str_bargain_id + ')');
  Query_tmp.SQL.Add('ORDER BY doc_id');
  Query_tmp.Open;
  str_agreement := '';
  while not Query_tmp.Eof do begin
    if str_agreement <> '' then str_agreement := str_agreement + ', ';
    str_agreement := str_agreement + Query_tmp.FieldByName('doc_describe').AsString;
//    if not Query_tmp.FieldByName('doc_image_date').IsNull then
//      str_agreement := str_agreement + ' от ' + FormatDateTime('dd.mm.yyyy', Query_tmp.FieldByName('doc_image_date').AsDateTime) + ' г.';
    Query_tmp.Next;
  end;

  if str_agreement <> '' then
    str_agreement := ' (' + str_agreement + ')';

  Query_tmp.Free;

  doc := EDOXMLAct.NewФайл;

  // Файл.СвУчДокОбор
  // идентификаторы участников ЭДО - надо будет брать из списка участников
  doc.СвУчДокОбор.ИдОтпр := '2BM-' + ReplaceStr(Query.FieldByName('firm_self_inn_kpp').AsString, '\', '-');
  doc.СвУчДокОбор.ИдПок  := '2BM-' + ReplaceStr(Query.FieldByName('firm_customer_inn_kpp').AsString, '\', '-');
  doc.СвУчДокОбор.СвОЭДОтпр.НаимОрг := 'ЗАО "ПФ "СКБ Контур"';
  doc.СвУчДокОбор.СвОЭДОтпр.ИННЮЛ   := '6663003127';
  doc.СвУчДокОбор.СвОЭДОтпр.ИдЭДО   := '2BM';

  // Файл
  CreateGUID(_GUID);
  doc.ИдФайл := 'DP_IAKTPRM_' + doc.СвУчДокОбор.ИдПок + '_' + doc.СвУчДокОбор.ИдОтпр + '_' + FormatDateTime('yyyymmdd', Date) + '_' + Copy(GUIDToString(_GUID), 2, 36);
  doc.ВерсФорм := '5.01';

  // Файл.Документ
  doc.Документ.КНД := '1175006';
  doc.Документ.ДатаДок := FormatDateTime('dd.mm.yyyy', Now);
  doc.Документ.ВремДок := FormatDateTime('hh:nn:ss', Now);
  // Файл.Документ.СвАктИ
  doc.Документ.СвАктИ.НаимПервДок := 'Акт о выполнении работ (оказании услуг)';
  doc.Документ.СвАктИ.НомАкт      := Query.FieldByName('acts_cod').AsString;
  doc.Документ.СвАктИ.ДатаАкт     := FormatDateTime('dd.mm.yyyy', Query.FieldByName('acts_date').AsDateTime);
  doc.Документ.СвАктИ.Заголовок   := 'Мы, нижеподписавшиеся, представитель Исполнителя, с одной стороны, и представитель Заказчика с другой стороны, составили настоящий акт в том, что Исполнитель выполнил, а Заказчик принял следующие работы (услуги).';
  doc.Документ.СвАктИ.ИнфПол.ТекстИнф := 'к Договору № ' + Query.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query.FieldByName('contract_date_begin').AsDateTime) + 'г.' + str_agreement + ' за период  с ' + FormatDateTime('dd.mm.yyyy', Query.FieldByName('date_begin').AsDateTime) + ' по ' + FormatDateTime('dd.mm.yyyy', Query.FieldByName('date_end').AsDateTime) + 'г.';

  // Файл.Документ.СвАктИ.Исполнитель
  doc.Документ.СвАктИ.Исполнитель.ИдСв.СвЮЛ.НаимОрг := Query.FieldByName('firm_self_name_full').AsString;
  doc.Документ.СвАктИ.Исполнитель.ИдСв.СвЮЛ.ИННЮЛ   := LeftStr(Query.FieldByName('firm_self_inn_kpp').AsString, Pos('/', Query.FieldByName('firm_self_inn_kpp').AsString) - 1);
  doc.Документ.СвАктИ.Исполнитель.ИдСв.СвЮЛ.КПП     := RightStr(Query.FieldByName('firm_self_inn_kpp').AsString, Length(Query.FieldByName('firm_self_inn_kpp').AsString) - Pos('/', Query.FieldByName('firm_self_inn_kpp').AsString));

  // Файл.Документ.СвАктИ.Сдал
  doc.Документ.СвАктИ.Сдал.ДатаИсполн := FormatDateTime('dd.mm.yyyy', Now);
  if not Query.FieldByName('self_type_dir').IsNull then
    doc.Документ.СвАктИ.Сдал.ПодписьИсполн.Должность := Query.FieldByName('self_type_dir').AsString;
  if not Query.FieldByName('self_dir_name').IsNull then begin
    doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Фамилия := LeftStr(Query.FieldByName('self_dir_name').AsString, Pos(' ', Query.FieldByName('self_dir_name').AsString) - 1);
    doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя := RightStr(Query.FieldByName('self_dir_name').AsString, Length(Query.FieldByName('self_dir_name').AsString) - Pos(' ', Query.FieldByName('self_dir_name').AsString));
    if pos(' ', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) > 0 then begin
      doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Отчество := RightStr(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя, Length(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) - Pos(' ', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя));
      doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя := LeftStr(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя, Pos(' ', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) - 1);
    end else if pos('.', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) > 0 then begin
      doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Отчество := RightStr(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя, Length(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя) - Pos('.', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя));
      doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя := LeftStr(doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя, Pos('.', doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя));
    end;
  end;
  if (not Query.FieldByName('self_dir_comment').IsNull) and (pos(' от ', Query.FieldByName('self_dir_comment').AsString) > 0) then begin
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен := LeftStr(Query.FieldByName('self_dir_comment').AsString, Pos(' от ', Query.FieldByName('self_dir_comment').AsString) - 1);
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен := RightStr(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен, Length(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен) - Pos(' ', doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен));
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен := ReplaceStr(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен, '№', '');

    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен := RightStr(Query.FieldByName('self_dir_comment').AsString, Length(Query.FieldByName('self_dir_comment').AsString) - Pos(' от ', Query.FieldByName('self_dir_comment').AsString) - 3);
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен := ReplaceStr(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен, 'г.', '');
    if TryStrToDate(doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен, _tmp_date) then
      doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен := FormatDateTime('dd.mm.yyyy', _tmp_date);

    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.Должн := doc.Документ.СвАктИ.Сдал.ПодписьИсполн.Должность;
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Фамилия := doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Фамилия;
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Имя := doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя;
    doc.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Отчество := doc.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Отчество;
  end;

  ShowTextMessage('Получение данных Акта...', False);

  // Файл.Документ.СвАктИ.ОписРабот

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  SP_Table := TADOStoredProc.Create(nil);
  SP_Table.Connection := Fconnect;
  SP_Table.ProcedureName := 'sp_act_report_Povagonka';
  SP_Table.Parameters.Refresh;
  SP_Table.Parameters.ParamByName('@contract_id').Value       := Query.FieldByName('contract_id').Value;
  SP_Table.Parameters.ParamByName('@acts_type_cod').Value     := Query.FieldByName('acts_type_cod').AsString;
  SP_Table.Parameters.ParamByName('@currency_id').Value       := Query.FieldByName('acts_currency_id').Value;
  SP_Table.Parameters.ParamByName('@set_routefromfact').Value := Query.FieldByName('set_routefromfact').Value;
  SP_Table.Parameters.ParamByName('@str_bargain_id').Value    := str_bargain_id;
  SP_Table.CommandTimeout := 100;
  SP_Table.Open;

  Q_NDS := TADOQuery.Create(nil);
  Q_NDS.Connection := Fconnect;
  Q_NDS.SQL.Clear;
  Q_NDS.SQL.Add('SELECT * FROM inf_obj WHERE type_inf_id = -12');
  Q_NDS.Open;

  with doc.Документ.СвАктИ.ОписРабот.Add do begin

    acts_sum_without_nds := 0; acts_sum_nds := 0; acts_sum_with_nds := 0;
    while not SP_Table.Eof do begin
      ShowTextMessage('Осталось вагонов: ' + IntToStr(SP_Table.RecordCount - SP_Table.RecNo + 1), False);
      with Add do begin

        if not TryStrToFloat(SP_Table.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
        rate := RoundCurr((SP_Table.FieldByName('rate').AsFloat * 100 / (100 + nds_rate)), -2);

        // Кол-во (тонн, вагонов, суток и т.п.)
        if Query.FieldByName('acts_type_cod').AsString = '233' then begin
          // 233
          fld_weight := 'calc_weight'; // 233 акт строится по рассчетному весу
          cnt := SP_Table.FieldByName('calc_weight').AsFloat;
          ed_izm_name := 'Ставка перевозки руб/т (без НДС)'; // тонна
          // этот акт всегда в тоннах
        end else begin
          // 237
          fld_weight := 'fact_weight'; // 237 акт строится по фактическому весу (только для тонн)

          case IndexText(SP_Table.FieldByName('bargain_ed_izm_cod').AsString, ['000', '001', '002', '004']) of
                // ed_izm_cod = '000' // тонны (тн)
            0 : begin
                  cnt := SP_Table.FieldByName('fact_weight').AsFloat;
                  ed_izm_name := 'Ставка перевозки руб/т (без НДС)'; // тонна
                end;
                // ed_izm_cod = '001' // контейнер (конт)
            1 : begin
                  cnt := 1;
                  ed_izm_name := 'Ставка перевозки руб/конт (без НДС)'; // конт
                end;
                // ed_izm_cod = '002' // вагон (вагон)
            2 : begin
                  cnt := 1;
                  ed_izm_name := 'Ставка перевозки руб/ваг (без НДС)'; // вагон
                end;
                // ed_izm_cod = '004' // вагоно-сутки (сутки)
            3 : begin
                  cnt := SP_Table.FieldByName('quantity').AsFloat;
                  ed_izm_name := 'Ставка руб/сут (без НДС)'; // сутки
                end;
            else begin
                  cnt := 1;
                  ed_izm_name := 'Ставка перевозки руб (без НДС)';
                end;
          end;

        end;

        sum_without_nds := RoundCurr(rate * cnt, -2);
        sum_nds := RoundCurr(sum_without_nds * nds_rate / 100, -2);
        sum_with_nds := sum_without_nds + sum_nds;

        Номер := IntToStr(SP_Table.RecNo);
        НаимЕдИзм := '-';
//        ОКЕИ := '168';
//        Цена       := ReplaceStr(FormatCurr('0.00', rate            ), ',', '.');
//        Количество := ReplaceStr(FormatCurr('0.00', cnt             ), ',', '.');
        СумБезНДС  := ReplaceStr(FormatCurr('0.00', sum_without_nds ), ',', '.');
        СумНДС     := ReplaceStr(FormatCurr('0.00', sum_nds         ), ',', '.');
        СумУчНДС   := ReplaceStr(FormatCurr('0.00', sum_with_nds    ), ',', '.');

        // расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Table.FieldByName('bargain_node_begin_cod').AsString, SP_Table.FieldByName('bargain_node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := SP_Table.FieldByName('bargain_node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := SP_Table.FieldByName('bargain_node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, False, SP_Table.FieldByName('date_from_to').AsDateTime);

          ClientDS_distance.Post;
        end;
        ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Table.FieldByName('bargain_node_begin_cod').AsString, SP_Table.FieldByName('bargain_node_end_cod').AsString]), []);

        Описание    := SP_Table.FieldByName('service_kind').AsString;

        ИнфПолСтр   := '';
        // печатаем дату раскредитации, только если она задана
        if not SP_Table.FieldByName('date_delivery').IsNull then
          ИнфПолСтр   := ИнфПолСтр + 'Дата раскредитования документа: ' + FormatDateTime('dd.mm.yyyy', SP_Table.FieldByName('date_delivery').AsDateTime) + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Станция отправления: ' + SP_Table.FieldByName('bargain_node_begin_name').AsString + ' (' + SP_Table.FieldByName('bargain_node_begin_cod').AsString + ');'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Станция назначения: ' + SP_Table.FieldByName('bargain_node_end_name').AsString + ' (' + SP_Table.FieldByName('bargain_node_end_cod').AsString + ');'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Дата отправления: ' + FormatDateTime('dd.mm.yyyy', SP_Table.FieldByName('date_from_to').AsDateTime) + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Накладная: ' + SP_Table.FieldByName('num_document').AsString + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Номер вагона: ' + SP_Table.FieldByName('num_vagon').AsString + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Груз: ' + SP_Table.FieldByName('bargain_kargoETSNG_name').AsString + ' (' + SP_Table.FieldByName('bargain_kargoETSNG_cod').AsString + ');'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Расстояние, км: ' + ClientDS_distance.FieldByName('distance').AsString + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Фактич.вес груза, т: ' + ReplaceStr(FormatCurr('0.000', SP_Table.FieldByName(fld_weight).AsFloat), ',', '.') + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + ed_izm_name + ': ' + ReplaceStr(FormatCurr('0.00', rate), ',', '.') + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Ставка НДС: ' + VarToStr(Q_NDS.Lookup('inf_obj_id', SP_Table.FieldByName('bargain_nds_id').AsInteger, 'inf_obj_name')) + ';'#10;
        ИнфПолСтр   := ИнфПолСтр + 'Расчетная масса груза, т: ' + ReplaceStr(FormatCurr('0.000', SP_Table.FieldByName('calc_weight').AsFloat), ',', '.') + ';';
      end;

      acts_sum_without_nds := acts_sum_without_nds + sum_without_nds;
      acts_sum_nds         := acts_sum_nds + sum_nds;
      acts_sum_with_nds    := acts_sum_with_nds + sum_with_nds;

      SP_Table.Next;
    end;

    SP_Table.First;

    НачРабот    := FormatDateTime('dd.mm.yyyy', Query.FieldByName('date_begin').AsDateTime);
    КонРабот    := FormatDateTime('dd.mm.yyyy', Query.FieldByName('date_end').AsDateTime);

    СумБезНДСИт := ReplaceStr(FormatCurr('0.00', acts_sum_without_nds), ',', '.');
    СумНДСИт    := ReplaceStr(FormatCurr('0.00', acts_sum_nds)        , ',', '.');
    СумУчНДСИт  := ReplaceStr(FormatCurr('0.00', acts_sum_with_nds)   , ',', '.');
  end;

  // Файл.Документ.Подписант
//  doc.Документ.Подписант.ЮЛ.ИННЮЛ := LeftStr(Query.FieldByName('firm_self_inn_kpp').AsString, Pos('/', Query.FieldByName('firm_self_inn_kpp').AsString) - 1);
  doc.Документ.Подписант.ЮЛ.ИННЮЛ := '7702059030';
//  doc.Документ.Подписант.ЮЛ.ФИО.Фамилия := Query.FieldByName('firm_director_name').AsString;
//  if Query.FieldByName('firm_director_comment').AsString <> '' then
//    doc.Документ.Подписант.ЮЛ.ФИО.Фамилия := doc.Документ.Подписант.ЮЛ.ФИО.Фамилия + ' (' + Query.FieldByName('firm_director_comment').AsString + ')';
//  doc.Документ.Подписант.ЮЛ.ФИО.Имя := '';
//  doc.Документ.Подписант.ЮЛ.ФИО.Отчество := '';
  doc.Документ.Подписант.ЮЛ.Должн := 'Генеральный директор';
  doc.Документ.Подписант.ЮЛ.ФИО.Фамилия := 'Пурим';
  doc.Документ.Подписант.ЮЛ.ФИО.Имя := 'Дмитрий';
  doc.Документ.Подписант.ЮЛ.ФИО.Отчество := 'Юрьевич';
  doc.Документ.СвАктИ.Исполнитель.Адрес.АдрТекст := '109012, ГОРОД МОСКВА, УЛИЦА РОЖДЕСТВЕНКА, 1/4';
  doc.Документ.СвАктИ.Исполнитель.БанкРекв.НомерСчета := '40702810310000000505';
  doc.Документ.СвАктИ.Исполнитель.БанкРекв.СвБанк.НаимБанк := 'Московский филиал Банка МБСП (АО) г. Москва';
  doc.Документ.СвАктИ.Исполнитель.БанкРекв.СвБанк.БИК := '044525802';

  ShowTextMessage('Сохранение XML...', False);

  // сохранение файла
  xml := doc.OwnerDocument as TXMLDocument;
  xml.Active := True;

  xml.Version := '1.0';
  xml.Encoding := 'windows-1251';

  Screen.Cursor := crDefault;

  // Генерация Диадок (получение данных)
    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    mem_bytes := TBytesStream.Create;
    xml.SaveToStream(mem_bytes);
    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    // Пользователь
    Query_tmp := TADOQuery.Create(nil);
    Query_tmp.Connection := Fconnect;
    Query_tmp.SQL.Add('SELECT	users.FIO_users, inf_obj.inf_obj_cod as users_group_cod');
    Query_tmp.SQL.Add('FROM	  users INNER JOIN inf_obj on users.users_group_id = inf_obj.inf_obj_id');
    Query_tmp.SQL.Add('WHERE	users_name = system_user');
    Query_tmp.Open;

    ClientDS := TClientDataSet.Create(nil);
    ClientDS.FieldDefs.Add('contract_id',   ftInteger);
    ClientDS.FieldDefs.Add('contract_cod', ftString, 50);
    ClientDS.FieldDefs.Add('contract_date',   ftDateTime);
    ClientDS.FieldDefs.Add('firm_customer_name', ftString, 50);
    ClientDS.FieldDefs.Add('firm_self_name', ftString, 50);
    ClientDS.FieldDefs.Add('document_cod', ftString, 50);
    ClientDS.FieldDefs.Add('documen_date',   ftDateTime);
    ClientDS.FieldDefs.Add('document_sum',   ftCurrency);
    ClientDS.FieldDefs.Add('document_nds_sum',   ftCurrency);
    ClientDS.FieldDefs.Add('document_nds_type', ftString, 50);
    ClientDS.FieldDefs.Add('FIO_users', ftString, 50);
    ClientDS.FieldDefs.Add('file_name', ftString, 300);
    ClientDS.CreateDataSet;
    ClientDS.LogChanges := False;

    // заполним структуру
    ClientDS.Append;
    ClientDS.FieldByName('contract_id'        ).Value := Query.FieldByName('contract_id').Value;
    ClientDS.FieldByName('contract_cod'       ).Value := Query.FieldByName('contract_cod').Value;
    ClientDS.FieldByName('contract_date'      ).Value := Query.FieldByName('contract_date_begin').Value;
    ClientDS.FieldByName('firm_customer_name' ).Value := Query.FieldByName('firm_customer_name').Value;
    ClientDS.FieldByName('firm_self_name'     ).Value := Query.FieldByName('firm_self_name').Value;
    ClientDS.FieldByName('document_cod'       ).Value := Query.FieldByName('acts_cod').Value;
    ClientDS.FieldByName('documen_date'       ).Value := Query.FieldByName('acts_date').Value;
    ClientDS.FieldByName('document_sum'       ).Value := acts_sum_with_nds;
    ClientDS.FieldByName('document_nds_sum'   ).Value := acts_sum_nds;
    ClientDS.FieldByName('document_nds_type'  ).Value := Q_NDS.Lookup('inf_obj_id', SP_Table.FieldByName('bargain_nds_id').AsInteger, 'inf_obj_name');
    ClientDS.FieldByName('FIO_users'          ).Value := Query_tmp.FieldByName('FIO_users').Value;
    ClientDS.FieldByName('file_name'          ).Value := doc.ИдФайл + '.xml';
    ClientDS.Post;

    // Сгенирить форму
    handle := LoadLibrary('work_edo.dll');
    @FPrintForm := GetProcAddress(handle, 'CreateWndGeneratePrintForm');
    v := FPrintForm(Application.Handle, Query_tmp.FieldByName('users_group_cod').AsString, Query.FieldByName('acts_id').AsInteger, 'XmlAcceptanceCertificate', mem_bytes.Bytes, mem_bytes.Size, ClientDS);
    FreeLibrary(handle);

//    ShowMessage(IntToStr(v[0]));
    // Сохранение и отображение
    if v[0] <> -9 then begin
      sp_acts_modify := TADOStoredProc.Create(nil);
      sp_acts_modify.Connection := Fconnect;
      sp_acts_modify.ProcedureName := 'sp_acts_modify';
      sp_acts_modify.Parameters.Refresh;

      sp_acts_modify.Parameters.ParamByName('@type_action').Value := 8;
      sp_acts_modify.Parameters.ParamByName('@acts_id').Value := Query.FieldByName('acts_id').AsInteger;
      sp_acts_modify.Parameters.ParamByName('@edo_doc_id').Value := v[0];

      try
        sp_acts_modify.ExecProc;
      except
      end;

      // Сохранение на диске
      if SelectDirectory('Путь для сохранения', '', save_path) then begin
        // Сохранение pdf
        handle := LoadLibrary('work_edo.dll');
        @FPrintFormPdf := GetProcAddress(handle, 'CreateWndDocumentPdfSave2Path');
        FPrintFormPdf(Query_tmp.FieldByName('users_group_cod').AsString, v[0], save_path);
        FreeLibrary(handle);

        // Сохранение pdf
        handle := LoadLibrary('work_edo.dll');
        @FPrintFormPdf := GetProcAddress(handle, 'CreateWndDocumentXmlSave2Path');
        FPrintFormPdf(Query_tmp.FieldByName('users_group_cod').AsString, v[0], save_path);
        FreeLibrary(handle);

        ShellExecute(HWND(nil), 'explore', PChar(save_path), nil, nil, SW_RESTORE);
      end;
    end;

    Query_tmp.Free;
    ClientDS.Free;
  // Генерация Диадок (получение данных)

  xml.Active := False;
  Screen.Cursor := crDefault;
  ShowTextMessage;

  ClientDS_distance.Free;
  SP_Table.Free;
  Query.Free;
  Q_NDS.Free;
end;

procedure TfmAgree2.dxBarButton189Click(Sender: TObject);
type
  TFunc = function(AppHand: THandle; users_group_cod: string; global_id: integer; DocumentType: string; data_xml: TArray<Byte>; data_size: integer; ClientDS: TClientDataSet): variant;
  TFuncPdf = procedure(users_group_cod: string; print_form_id: integer; path : string);
var
  // Генерация печатной формы  --------------
  FPrintForm  : TFunc;
  FPrintFormPdf  : TFuncPdf;
  handle      : THandle;
  v           : Variant;
  mem_bytes   : TBytesStream;
  ClientDS    : TClientDataSet;

  save_path   : string;
  // ----------------------------------------
  sp_acts_modify : TADOStoredProc;

var doc                                 : EDOXMLInvoice.IXMLФайл;
    xml                                 : TXMLDocument;
    i                                   : integer;

    _fmInvoiceScore                     : TfmInvoiceScore;

    invoice_score_id                    : integer;

    set_print_comment                   : boolean;
    set_print_empty_ed_izm              : boolean;
    set_not_print_ed_izm                : boolean;
    set_print_contract                  : boolean;
    set_type_total                      : boolean;

    Query                               : TADOQuery;
    Query_tmp                           : TADOQuery;
    SP_Table                            : TADOStoredProc;
    Q_NDS                               : TADOQuery;

    score_sum, score_nds, score_sum_all : Currency;

    _GUID                               : TGUID;

    _SL                                 : TStringList;
    _tmp_date                           : TDateTime;
    pp_num, pp_date                     : string;
begin

  _fmInvoiceScore := TfmInvoiceScore.Create(Application, True, 0);
//  if not cxGrid1DBBandedTableView1contract_id.DataBinding.Field.IsNull then
//    _fmInvoiceScore._SetContractId := cxGrid1DBBandedTableView1contract_id.DataBinding.Field.AsInteger;
  if _fmInvoiceScore.ShowModal <> mrOk then
    exit;

  invoice_score_id := _fmInvoiceScore._GetInvoiceScoreId;

  // Заполнение данных
  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT * ');
  Query.SQL.Add(', acts_id = (SELECT TOP 1 acts_id FROM acts WHERE global_id = invoice_score_id)');
  Query.SQL.Add(', self_edo_id = (SELECT TOP 1 edo_id FROM firm WHERE firm.firm_id = firm_self)');
  Query.SQL.Add(', customer_edo_id = (SELECT TOP 1 edo_id FROM firm WHERE firm.firm_id = firm_customer)');
  Query.SQL.Add('FROM view_invoice_score WHERE invoice_score_id = ' + IntToStr(invoice_score_id));
  Query.Open;

  if Query.FieldByName('self_edo_id').AsString = '' then begin
    Application.MessageBox('Отсутсвует идентификатор ЭДО Собственной организации'#10'Формирование счет-фактуры невозможно', 'Винмание', MB_OK or MB_ICONERROR);
    Query.Free;
    exit;
  end;
  if Query.FieldByName('customer_edo_id').AsString = '' then begin
    Application.MessageBox('Отсутсвует идентификатор ЭДО Контрагента'#10'Формирование счет-фактуры невозможно', 'Винмание', MB_OK or MB_ICONERROR);
    Query.Free;
    exit;
  end;

  set_print_contract     := Query.FieldByName('set_print_contract').AsBoolean or Query.FieldByName('set_print_contract_full').AsBoolean;
  set_print_comment      := Query.FieldByName('set_print_comment').AsBoolean;
  set_not_print_ed_izm   := Query.FieldByName('set_not_print_ed_izm').AsBoolean;
  set_type_total         := Query.FieldByName('set_type_total').AsBoolean;

  doc := EDOXMLInvoice.NewФайл;

  // Файл.СвУчДокОбор
  doc.СвУчДокОбор.ИдОтпр := Query.FieldByName('self_edo_id').AsString;
  doc.СвУчДокОбор.ИдПол  := Query.FieldByName('customer_edo_id').AsString;
  doc.СвУчДокОбор.СвОЭДОтпр.НаимОрг := 'ЗАО "ПФ "СКБ Контур"';
  doc.СвУчДокОбор.СвОЭДОтпр.ИННЮЛ   := '6663003127';
  doc.СвУчДокОбор.СвОЭДОтпр.ИдЭДО   := '2BM';

  // Файл
  CreateGUID(_GUID);
  doc.ИдФайл := 'ON_SFAKT_' + doc.СвУчДокОбор.ИдПол + '_' + doc.СвУчДокОбор.ИдОтпр + '_' + FormatDateTime('yyyymmdd', Date) + '_' + Copy(GUIDToString(_GUID), 2, 36);
  doc.ВерсФорм := '5.01';

  // Файл.Документ
  doc.Документ.КНД := '1115125';
  doc.Документ.Функция := 'СЧФ';
  doc.Документ.ДатаИнфПр := FormatDateTime('dd.mm.yyyy', Now);
  doc.Документ.ВремИнфПр := FormatDateTime('hh.nn.ss', Now);
  doc.Документ.НаимЭконСубСост := Query.FieldByName('firm_self_name_full').AsString + ' ' + Query.FieldByName('firm_self_inn_kpp').AsString;
  // Файл.Документ.СвСчФакт
  doc.Документ.СвСчФакт.НомерСчФ := Query.FieldByName('score_cod').AsString;
  doc.Документ.СвСчФакт.ДатаСчФ  := FormatDateTime('dd.mm.yyyy', Query.FieldByName('score_date').AsDateTime);
  doc.Документ.СвСчФакт.КодОКВ   := Query.FieldByName('currency_cod').AsString;
  if not Query.FieldByName('correction_cod').IsNull then begin
    doc.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ  := Query.FieldByName('correction_cod').AsInteger;
    doc.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ := FormatDateTime('dd.mm.yyyy', Query.FieldByName('correction_date').AsDateTime);
  end;
  doc.Документ.СвСчФакт.СвПрод.ИдСв.СвЮЛУч.НаимОрг := Query.FieldByName('score_firm_self_name_full').AsString;
  doc.Документ.СвСчФакт.СвПрод.ИдСв.СвЮЛУч.ИННЮЛ   := LeftStr(Query.FieldByName('score_firm_self_inn_kpp').AsString, Pos('/', Query.FieldByName('score_firm_self_inn_kpp').AsString) - 1);
  doc.Документ.СвСчФакт.СвПрод.ИдСв.СвЮЛУч.КПП     := RightStr(Query.FieldByName('score_firm_self_inn_kpp').AsString, Length(Query.FieldByName('score_firm_self_inn_kpp').AsString) - Pos('/', Query.FieldByName('score_firm_self_inn_kpp').AsString));
  // адрес у нас не формализован - выгружаем в поле иностранного адреса
  doc.Документ.СвСчФакт.СвПрод.Адрес.АдрИнф.КодСтр := '643';
  doc.Документ.СвСчФакт.СвПрод.Адрес.АдрИнф.АдрТекст := Query.FieldByName('score_firm_self_address').AsString;

//  if Query.FieldByName('score_firm_sender_name').AsString = 'он же' then
//    doc.Документ.СвСчФакт.ГрузОт.ОнЖе := 'он же'
//  else if ReplaceStr(Query.FieldByName('score_firm_sender_name').AsString, '-', '') <> '' then
//    doc.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГОП.НаимОрг := Query.FieldByName('score_firm_sender_name').AsString;
//
//  if ReplaceStr(Query.FieldByName('score_firm_reciver_name').AsString, '-', '') <> '' then
//    doc.Документ.СвСчФакт.ГрузПолуч.НаимГОП.НаимОрг := Query.FieldByName('score_firm_reciver_name').AsString;

  //  Номера ПП - попробуем раздербанить
  _SL := TStringList.Create;
  _SL.LineBreak := ';';
  _SL.Text := ReplaceStr(ReplaceStr(ReplaceStr(Query.FieldByName('score_pay').AsString, ',', ';'), #10, ';'), #13, ';');
  for i := 0 to _SL.Count - 1 do begin
    if pos('от', _SL.Strings[i]) > 0 then begin
      pp_num  := LeftStr(_SL.Strings[i], Pos('от', _SL.Strings[i]) - 1);
      pp_num  := Trim(ReplaceStr(pp_num, '№', ''));
      pp_date := RightStr(_SL.Strings[i], Length(_SL.Strings[i]) - Pos('от', _SL.Strings[i]) - 1);
      pp_date := Trim(ReplaceStr(pp_date, 'г.', ''));
      pp_date := Trim(ReplaceStr(pp_date, 'г', ''));
      if TryStrToDate(pp_date, _tmp_date) then
        pp_date := FormatDateTime('dd.mm.yyyy', _tmp_date);

      with doc.Документ.СвСчФакт.СвПРД.Add do begin
        НомерПРД := pp_num;
        ДатаПРД  := pp_date;
      end;
    end;
  end;
  _SL.Free;

  doc.Документ.СвСчФакт.СвПокуп.ИдСв.СвЮЛУч.НаимОрг := Query.FieldByName('score_firm_customer_name_full').AsString;
  doc.Документ.СвСчФакт.СвПокуп.ИдСв.СвЮЛУч.ИННЮЛ   := LeftStr(Query.FieldByName('score_firm_customer_inn_kpp').AsString, Pos('/', Query.FieldByName('score_firm_self_inn_kpp').AsString) - 1);
  doc.Документ.СвСчФакт.СвПокуп.ИдСв.СвЮЛУч.КПП     := RightStr(Query.FieldByName('score_firm_customer_inn_kpp').AsString, Length(Query.FieldByName('score_firm_self_inn_kpp').AsString) - Pos('/', Query.FieldByName('score_firm_self_inn_kpp').AsString));
  // адрес у нас не формализован - выгружаем в поле иностранного адреса
  doc.Документ.СвСчФакт.СвПокуп.Адрес.АдрИнф.КодСтр := '643';
  doc.Документ.СвСчФакт.СвПокуп.Адрес.АдрИнф.АдрТекст := Query.FieldByName('score_firm_customer_address').AsString;

  // Примечание
  if set_print_contract then
    with doc.Документ.СвСчФакт.ИнфПолФХЖ1.Add do begin
      Идентиф := 'Договор';
      Значен := Query.FieldByName('score_contract_name').AsString;
    end;
  if set_print_comment then
    with doc.Документ.СвСчФакт.ИнфПолФХЖ1.Add do begin
      Идентиф := 'Примечание';
      Значен := Query.FieldByName('score_comment').AsString;
    end;

  // Файл.Документ.ТаблСчФакт
  SP_Table := TADOStoredProc.Create(nil);
  SP_Table.Connection := Fconnect;
  SP_Table.ProcedureName := 'sp_invoice_score_table_get';
  SP_Table.Parameters.Refresh;
  SP_Table.Parameters.ParamByName('@invoice_score_id').Value := invoice_score_id;
  SP_Table.Open;

  Q_NDS := TADOQuery.Create(nil);
  Q_NDS.Connection := Fconnect;
  Q_NDS.SQL.Clear;
  Q_NDS.SQL.Add('SELECT * FROM inf_obj WHERE type_inf_id = -12');
  Q_NDS.Open;

  score_sum := 0; score_nds := 0; score_sum_all := 0;
  while not SP_Table.Eof do begin
    with doc.Документ.ТаблСчФакт.СведТов.Add do begin
      НомСтр := SP_Table.RecNo;
      НаимТов := SP_Table.FieldByName('name_service').AsString;
      if (not SP_Table.FieldByName('ed_izm_cod').IsNull) and (not set_not_print_ed_izm) then
        ОКЕИ_Тов := SP_Table.FieldByName('ed_izm_cod').AsString;
      if (not SP_Table.FieldByName('quantity').IsNull) and (not set_not_print_ed_izm) then // не пусто и нет принудительной печати пустоты
        КолТов := ReplaceStr(FormatCurr('0.000', SP_Table.FieldByName('quantity').AsFloat), ',', '.');
      if (not SP_Table.FieldByName('price_ed_izm').IsNull) and (not set_not_print_ed_izm) then // не пусто и нет принудительной печати пустоты
        ЦенаТов := ReplaceStr(FormatCurr('0.00', SP_Table.FieldByName('price_ed_izm').AsFloat), ',', '.');
      if (not SP_Table.FieldByName('cost_without_nds').IsNull)  then // не пусто
        СтТовБезНДС := ReplaceStr(FormatCurr('0.00', SP_Table.FieldByName('cost_without_nds').AsFloat), ',', '.');
      НалСт := Q_NDS.Lookup('inf_obj_id', SP_Table.FieldByName('tax_rate_id').AsInteger, 'inf_obj_name');
      СтТовУчНал := ReplaceStr(FormatCurr('0.00', SP_Table.FieldByName('cost_with_nds').AsFloat), ',', '.');
      if SP_Table.FieldByName('aktciz').IsNull then
        Акциз.БезАкциз := 'без акциза'
      else
        Акциз.СумАкциз := ReplaceStr(FormatCurr('0.00', SP_Table.FieldByName('aktciz').AsFloat), ',', '.');
      if (SP_Table.FieldByName('tax_sum').AsFloat = 0) and (Q_NDS.Lookup('inf_obj_id', SP_Table.FieldByName('tax_rate_id').AsInteger, 'inf_obj_cod') = null)  then
        СумНал.БезНДС := 'без НДС'
      else
        СумНал.СумНал := ReplaceStr(FormatCurr('0.00', SP_Table.FieldByName('tax_sum').AsFloat), ',', '.');
    end;

    score_sum := score_sum + SP_Table.FieldByName('cost_without_nds').AsFloat;
    score_nds := score_nds + SP_Table.FieldByName('tax_sum').AsFloat;
    score_sum_all := score_sum_all + SP_Table.FieldByName('cost_with_nds').AsFloat;

    SP_Table.Next;
  end;

  SP_Table.First;

  if set_type_total then begin
    Q_NDS.Locate('inf_obj_id', SP_Table.FieldByName('tax_rate_id').AsInteger, []);
    score_nds := RoundCurr(Q_NDS.FieldByName('inf_obj_cod').AsInteger/100 * score_sum, -2);
    score_sum_all := score_sum + score_nds;
  end;

  if score_sum <> 0 then
    doc.Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего   := ReplaceStr(FormatCurr('0.00', score_sum)    , ',', '.');
  if score_sum_all <> 0 then
    doc.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего    := ReplaceStr(FormatCurr('0.00', score_sum_all), ',', '.');
  if score_nds <> 0 then
    doc.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНал := ReplaceStr(FormatCurr('0.00', score_nds)    , ',', '.');

  // Файл.Документ.Подписант
  with doc.Документ.Подписант.Add do begin
    ОблПолн         := '6';
    Статус          := '1';
    ОснПолн         := 'Должностные обязанности';

    ЮЛ.ИННЮЛ        := '7702059030';
    ЮЛ.Должн        := 'Генеральный директор';
    ЮЛ.ФИО.Фамилия  := 'Пурим';
    ЮЛ.ФИО.Имя      := 'Дмитрий';
    ЮЛ.ФИО.Отчество := 'Юрьевич';
  end;

  // сохранение файла
  xml := doc.OwnerDocument as TXMLDocument;
  xml.Active := True;

  xml.Version := '1.0';
  xml.Encoding := 'windows-1251';

  // Генерация Диадок (получение данных)
    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    mem_bytes := TBytesStream.Create;
    xml.SaveToStream(mem_bytes);
    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    // Пользователь
    Query_tmp := TADOQuery.Create(nil);
    Query_tmp.Connection := Fconnect;
    Query_tmp.SQL.Add('SELECT	users.FIO_users, inf_obj.inf_obj_cod as users_group_cod');
    Query_tmp.SQL.Add('FROM	  users INNER JOIN inf_obj on users.users_group_id = inf_obj.inf_obj_id');
    Query_tmp.SQL.Add('WHERE	users_name = system_user');
    Query_tmp.Open;

    ClientDS := TClientDataSet.Create(nil);
    ClientDS.FieldDefs.Add('contract_id',   ftInteger);
    ClientDS.FieldDefs.Add('contract_cod', ftString, 50);
    ClientDS.FieldDefs.Add('contract_date',   ftDateTime);
    ClientDS.FieldDefs.Add('firm_customer_name', ftString, 50);
    ClientDS.FieldDefs.Add('firm_self_name', ftString, 50);
    ClientDS.FieldDefs.Add('document_cod', ftString, 50);
    ClientDS.FieldDefs.Add('documen_date',   ftDateTime);
    ClientDS.FieldDefs.Add('document_sum',   ftCurrency);
    ClientDS.FieldDefs.Add('document_nds_sum',   ftCurrency);
    ClientDS.FieldDefs.Add('document_nds_type', ftString, 50);
    ClientDS.FieldDefs.Add('FIO_users', ftString, 50);
    ClientDS.FieldDefs.Add('file_name', ftString, 300);
    ClientDS.CreateDataSet;
    ClientDS.LogChanges := False;

    // заполним структуру
    ClientDS.Append;
    ClientDS.FieldByName('contract_id'        ).Value := Query.FieldByName('contract_id').Value;
    ClientDS.FieldByName('contract_cod'       ).Value := Query.FieldByName('contract_cod').Value;
    ClientDS.FieldByName('contract_date'      ).Value := Query.FieldByName('contract_date_begin').Value;
    ClientDS.FieldByName('firm_customer_name' ).Value := Query.FieldByName('firm_customer_name_short').Value;
    ClientDS.FieldByName('firm_self_name'     ).Value := Query.FieldByName('firm_self_name_short').Value;
    ClientDS.FieldByName('document_cod'       ).Value := Query.FieldByName('score_cod').Value;
    ClientDS.FieldByName('documen_date'       ).Value := Query.FieldByName('score_date').Value;
    ClientDS.FieldByName('document_sum'       ).Value := score_sum_all;
    ClientDS.FieldByName('document_nds_sum'   ).Value := score_nds;
    ClientDS.FieldByName('document_nds_type'  ).Value := Q_NDS.Lookup('inf_obj_id', SP_Table.FieldByName('tax_rate_id').AsInteger, 'inf_obj_name');
    ClientDS.FieldByName('FIO_users'          ).Value := Query_tmp.FieldByName('FIO_users').Value;
    ClientDS.FieldByName('file_name'          ).Value := doc.ИдФайл + '.xml';
    ClientDS.Post;

    // Сгенирить форму
    handle := LoadLibrary('work_edo.dll');
    @FPrintForm := GetProcAddress(handle, 'CreateWndGeneratePrintForm');
    v := FPrintForm(Application.Handle, Query_tmp.FieldByName('users_group_cod').AsString, Query.FieldByName('invoice_score_id').AsInteger, 'Invoice', mem_bytes.Bytes, mem_bytes.Size, ClientDS);
    FreeLibrary(handle);

//    ShowMessage(IntToStr(v[0]));
    // Сохранение и отображение
    if v[0] <> -9 then begin
      if not Query.FieldByName('acts_id').IsNull then begin
        // имидж с-ф может отсутсвовать (для старых с-ф)
        sp_acts_modify := TADOStoredProc.Create(nil);
        sp_acts_modify.Connection := Fconnect;
        sp_acts_modify.ProcedureName := 'sp_acts_modify';
        sp_acts_modify.Parameters.Refresh;

        sp_acts_modify.Parameters.ParamByName('@type_action').Value := 8;
        sp_acts_modify.Parameters.ParamByName('@acts_id').Value := Query.FieldByName('acts_id').AsInteger; // ссылку на ЭДО сохраняем в имидже с-ф (таблица Акты)
        sp_acts_modify.Parameters.ParamByName('@edo_doc_id').Value := v[0];

        try
          sp_acts_modify.ExecProc;
        except
        end;

        sp_acts_modify.Free;
      end;

      // Сохранение на диске
      if SelectDirectory('Путь для сохранения', '', save_path) then begin
        // Сохранение pdf
        handle := LoadLibrary('work_edo.dll');
        @FPrintFormPdf := GetProcAddress(handle, 'CreateWndDocumentPdfSave2Path');
        FPrintFormPdf(Query_tmp.FieldByName('users_group_cod').AsString, v[0], save_path);
        FreeLibrary(handle);

        // Сохранение pdf
        handle := LoadLibrary('work_edo.dll');
        @FPrintFormPdf := GetProcAddress(handle, 'CreateWndDocumentXmlSave2Path');
        FPrintFormPdf(Query_tmp.FieldByName('users_group_cod').AsString, v[0], save_path);
        FreeLibrary(handle);

        ShellExecute(HWND(nil), 'explore', PChar(save_path), nil, nil, SW_RESTORE);
      end;
    end;

    Query_tmp.Free;
    ClientDS.Free;
  // Генерация Диадок (получение данных)

  xml.Active := False;

  Q_NDS.Free;
  SP_Table.Free;
  Query.Free;
end;

procedure TfmAgree2.dxBarButton18Click(Sender: TObject);
var _fmActs : TfmActs;
begin
  _fmActs := TfmActs.Create(Application, False);
  _fmActs._SetFilterActs(-9, Fdate1, Fdate2, '', -9, False);
  _fmActs._SetFilterActs4TypeCod('233,237,238');
  if _fmActs.ShowModal = mrOk then begin
    // создание СчФ (УПД)
    CreateInvoiceScoreUPDFromActs(Fconnect, _fmActs._GetActsID, _fmActs._GetActsTypeCod);
  end;
end;

procedure TfmAgree2.dxBarButton1Click(Sender: TObject);
begin
  RefreshProcedure(-9,-9);
end;

procedure TfmAgree2.dxBarButton203Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks    : Variant;
  SP                     : TADOStoredProc;
  Query_tmp              : TADOQuery;
  recNo, i               : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..3] of string;

  _node_begin_id,
  _node_end_id,
  _bargain_id            : integer; // пред. значения, для опредения границ блоков
  _agreement_describe    : string;
  _sum                   : Currency; // сумма за перевозку

  cod_shablon            : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 442 - Расчет стоимости ПФУ (НЗНП)

  if SP_Agree.Eof then exit;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, 0);
  if retActSettings[0] = -9 then
    exit;

  // Отчет фоормируется в рублях
  retActSettings[7]  := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
  //exApp.Visible := True;

  // Заполняем шапку и подписи

  exWks.Range['B3'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['F4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                             ', с другой стороны, составили настоящий Расчет о нижеследующем:';
  AutoFitMergeCell(exWks.Range['B6']);

  exWks.Range['C9'].Value := 'Общая Стоимость услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', согласованая в Приложении';
  exWks.Range['E9'].Value := 'Общая сумма стоимости услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', согласованая в Приложении, росс. рубль';
  exWks.Range['F9'].Value := 'Фактически понесенные ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + '  расходы, росс. рубль';

  str_expeditor[3] := 'Расчет стоимости Платежно-финансовых услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я');
  exWks.Range['B8'].Value := str_expeditor[3] + ' с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['B18'].Value := 'Итого за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  exWks.Range['B21'].Value := 'Настоящий Расчет составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                              SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  AutoFitMergeCell(exWks.Range['B21']);

  exWks.Range['B24'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['F24'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks.Range['B26'].Value := VarToStr(retActSettings[14][1]) + ' ________________________ /' + VarToStr(retActSettings[13][1]) + '/'
  else
    exWks.Range['B26'].Value := Null;
  if retActSettings[13][5] = True then
    exWks.Range['B28'].Value := VarToStr(retActSettings[14][4]) + ' ________________________ /' + VarToStr(retActSettings[13][4]) + '/'
  else
    exWks.Range['B28'].Value := Null;
  if retActSettings[13][8] = True then
    exWks.Range['F26'].Value := VarToStr(retActSettings[14][7]) + ' ________________________ /' + VarToStr(retActSettings[13][7]) + '/'
  else
    exWks.Range['F26'].Value := Null;
  if retActSettings[13][11] = True then
    exWks.Range['F28'].Value := VarToStr(retActSettings[14][10]) + ' ________________________ /' + VarToStr(retActSettings[13][10]) + '/'
  else
    exWks.Range['F28'].Value := Null;

  ShowTextMessage('Подготовка данных ...', False);

  SP := TADOStoredProc.Create(nil);
  SP.Connection := Fconnect;
  SP.CommandTimeout := 120;
  SP.ProcedureName := 'sp_act_report_basic_SFH';
  SP.Parameters.Refresh;
  SP.Parameters.ParamByName('@acts_type_cod'   ).Value := cod_shablon;
  SP.Parameters.ParamByName('@contract_id'     ).Value := null;
  SP.Parameters.ParamByName('@date_begin'      ).Value := null;
  SP.Parameters.ParamByName('@date_end'        ).Value := null;
  SP.Parameters.ParamByName('@currency_id'     ).Value := 3;
  SP.Parameters.ParamByName('@str_bargain_id'  ).Value := str_bargain_id;
  SP.Open;

  recNo := 11;
  _node_begin_id := -9; _node_end_id := -9;
  _agreement_describe := '';
  _bargain_id := -9;
  while not SP.Eof do begin
    // Новый блок
    if (_node_begin_id <> SP.FieldByName('node_begin_id').AsInteger)
    or (_node_end_id <> SP.FieldByName('node_end_id').AsInteger)
    or (_agreement_describe <> SP.FieldByName('agreement_describe').AsString) then begin
      if _bargain_id <> -9 then begin
        // Не первый блок, сдвигаем
        exWks.Rows[IntToStr(recNo)].Delete;
        exWks.Rows[IntToStr(recNo)].Delete;
        inc(recNo);
      end;
      // Копируем блок
      exWks.Rows[IntToStr(recNo + 3) + ':' + IntToStr(recNo + 5)].Insert;
      exWks.Rows[IntToStr(recNo + 0) + ':' + IntToStr(recNo + 2)].Copy;
      exWks.Rows[IntToStr(recNo + 3) + ':' + IntToStr(recNo + 5)].PasteSpecial(1);

      // Проставляем данные блока
      if (SP.FieldByName('node_begin_name').AsString = '')
      or (SP.FieldByName('node_end_name').AsString = '') then
        exWks.Range['B' + IntToStr(recNo)].Value :=
          SP.FieldByName('node_begin_name').AsString +
          SP.FieldByName('node_end_name').AsString
      else
        exWks.Range['B' + IntToStr(recNo)].Value :=
          SP.FieldByName('node_begin_name').AsString + ' - ' +
          SP.FieldByName('node_end_name').AsString;

      exWks.Range['C' + IntToStr(recNo)].Value := SP.FieldByName('agreement_describe').AsString;

      if SP.FieldByName('fact_weight').IsNull then
        exWks.Range['H' + IntToStr(recNo)].Value := null
      else
        exWks.Range['H' + IntToStr(recNo)].Value := SP.FieldByName('fact_weight').AsFloat;

      // Запоминаем даты
      _node_begin_id := SP.FieldByName('node_begin_id').AsInteger;
      _node_end_id := SP.FieldByName('node_end_id').AsInteger;
      _agreement_describe := SP.FieldByName('agreement_describe').AsString
    end;

    // Новая строка
    if (_bargain_id <> SP.FieldByName('bargain_id').AsInteger) then begin
      // Добавлям строку
      // Копировать не надо - будет ошибка "попытка изменит часть объединенной ячейки"
      exWks.Rows[IntToStr(recNo + 1)].Insert;

      _bargain_id := SP.FieldByName('bargain_id').AsInteger;
      _sum := SP.FieldByName('summa').AsCurrency; // Данных пока нет

      exWks.Range['A' + IntToStr(recNo)].Value := _bargain_id;
      exWks.Range['F' + IntToStr(recNo)].Value := _sum;
    end else begin
      // Если перевозка не поменялась, то возвращаемся на предыдущую строку и добавляем сумму
      Dec(recNo);

      _sum := _sum + SP.FieldByName('summa').AsCurrency; // Данных пока нет

      exWks.Range['F' + IntToStr(recNo)].Value := _sum;
    end;

    Inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP.RecordCount - SP.RecNo), False);
    SP.Next;
  end;

  // Убираем лишние строки (при необходимости)
  if _bargain_id <> -9 then begin
    // Не первый блок
    // Удаляем лишнии строки
    exWks.Rows[IntToStr(recNo) + ':' + IntToStr(recNo + 1)].Delete;
    inc(recNo);
    // Удаляем лишние блоки
    exWks.Rows[IntToStr(recNo) + ':' + IntToStr(recNo + 5)].Delete;
    inc(recNo, 2);
  end else begin
    // Пустой отчет
    // Удаляем 1 блок
    exWks.Rows[IntToStr(recNo) + ':' + IntToStr(recNo + 2)].Delete;
    // чистим блок
    exWks.Rows[IntToStr(recNo) + ':' + IntToStr(recNo + 2)].ClearContents;
    inc(recNo, 4);
  end;

  SP.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['F' + IntToStr(recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton204Click(Sender: TObject);
var
  retActSettings    : Variant;

  exApp, exWkb      : Variant;
  exWks_rep         : Variant;
  exWks_pril        : Variant;
  SP_Balans_Detail  : TADOStoredProc;
  Query_tmp         : TADOQuery;
  recRep            : integer;
  recPril           : integer;
  bargain_id        : integer;
  str_bargain_id    : string;
  str_expeditor     : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  ClientDS_distance   : TClientDataSet;
  cod_shablon       : integer;
  RS                 : _Recordset;
  k, dist, month_from_to : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 443 = 'Акт оказанных услуг + Реестр (Лукойл)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN or ACT_SET_RECALC_DISTANCE or ACT_SET_ROUTEFROMFACT or ACT_SET_KARGOFROMFACT);
  if retActSettings[0] = -9 then
    exit;
  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks_rep := exWkb.WorkSheets[1];
  exWks_pril := exWkb.WorkSheets[2];

  // Заполняем шапку и подписи
  exWks_rep.Range['title_str'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'заключенному между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;

  exWks_rep.Range['acts_date'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks_rep.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "Исполнитель", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "Заказчик", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks_rep.Range['B6'].Value := 'в период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks_rep.Range['B7'].Value := ' Исполнитель оказал услуги  по предоставлению принадлежащего ему на праве собственности и/или праве аренды (в том числе финансовой аренды (лизинга)) и/или ином законном основании '+
                       'железнодорожных Вагонов для осуществления железнодорожных перевозок Грузов Заказчика по территории Российской Федерации:';

  exWks_rep.Range['B24'].Value := 'Настоящий Акт оказанных услуг является неотъемлемой частью договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks_rep.Range['self_firm_name'].Value := VarToStr(retActSettings[12][1]);
  exWks_rep.Range['customer_firm_name'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  exWks_pril.Range['B4'].Value := exWks_rep.Range['B6'].Value;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks_rep.Range['B29'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks_rep.Range['B29'].Value := Null;
  if retActSettings[13][5] = True then
  //  exWks_rep.Range['B31'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks_rep.Range['B28'].Value := Null;

  if retActSettings[13][8] = True then
    exWks_rep.Range['J29'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks_rep.Range['J29'].Value := Null;
//  if retActSettings[13][11] = True then
//    exWks_rep.Range['L31'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
//  else
//    exWks_rep.Range['L31'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks_rep.PageSetup.PrintArea;
    PrintArea := exWks_rep.Range[PrintArea].Resize[exWks_rep.Range[PrintArea].Rows.Count + 4, exWks_rep.Range[PrintArea].Columns.Count].Address;
    exWks_rep.PageSetup.PrintArea := WideString(PrintArea);
    // 2. Копируем формат
    exWks_rep.Rows['23:23'].Copy;
    exWks_rep.Rows['27:29'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks_rep.Range['B27'].Value := 'Дата подписания';
    exWks_rep.Range['B29'].Value := '"____" __________________ 201__';
    exWks_rep.Range['L27'].Value := 'Дата подписания';
    exWks_rep.Range['L29'].Value := '"____" __________________ 201__';
  end;

  if (retActSettings[7][0] <> 3) then begin
//    exWks_rep.Range['O10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
//    exWks_rep.Range['P10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
//    exWks_rep.Range['Q10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);

//    exWks_pril.Range['M4'].Value := 'Ставка без НДС, ' + VarToStr(retActSettings[7][1]);
//    exWks_pril.Range['N4'].Value := 'Стоимость услуг без НДС, ' + VarToStr(retActSettings[7][1]);
//    exWks_pril.Range['O4'].Value := 'Сумма НДС, ' + VarToStr(retActSettings[7][1]);
//    exWks_pril.Range['P4'].Value := 'Стоимость услуг с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks_rep.Range['B5']);
  AutoFitMergeCell(exWks_rep.Range['B7']);
  AutoFitMergeCell(exWks_rep.Range['B19']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];

  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  // Заполняем
  recRep := 1; recPril := 1; bargain_id := -9;
  //Реестр
  while not SP_Balans_Detail.Eof do begin

   if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
      ClientDS_distance.Post;
    end;

    exWks_pril.Rows[IntToStr(recPril + 7)].Insert;
    exWks_pril.Rows[IntToStr(recPril + 6)].Copy;
    exWks_pril.Rows[IntToStr(recPril + 7)].PasteSpecial(1);

    exWks_pril.Range['A' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks_pril.Range['B' + IntToStr(recPril + 6)].Value := recPril;
    exWks_pril.Range['C' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks_pril.Range['D' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks_pril.Range['E' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks_pril.Range['F' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks_pril.Range['G' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks_pril.Range['H' + IntToStr(recPril + 6)].Value := ClientDS_distance.FieldByName('distance').Value;
    exWks_pril.Range['I' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;
    exWks_pril.Range['J' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
    exWks_pril.Range['K' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    exWks_pril.Range['L' + IntToStr(recPril + 6)].Value := GetStrRateRange(ClientDS_distance.FieldByName('distance').Value);
    inc(recPril);
    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;
  bargain_id := SP_Balans_Detail.FieldByName('bargain_id').AsInteger;
  k := 1;
  RS := SP_Balans_Detail.NextRecordset(k);
  //Акт
  //exApp.Visible := True;
  month_from_to := RS.Fields['month_from_to'].Value;

  exWks_rep.Range['C11'].Value := 'Отгрузка за : ' + FormatDateTime('mmmm yyyy', RS.Fields['date_from_to'].Value) + 'г.:';
  k:= 0;
  while not RS.Eof do begin
      if RS.Fields['month_from_to'].Value = month_from_to then begin
        exWks_rep.Rows[IntToStr(recRep + 12)].Insert;
        exWks_rep.Rows[IntToStr(recRep + 11)].Copy;
        exWks_rep.Rows[IntToStr(recRep + 12)].PasteSpecial(1);

        exWks_rep.Range['A' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_id'].Value;
        exWks_rep.Range['D' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_node_begin_name'].Value;
        exWks_rep.Range['E' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_node_end_name'].Value;
        exWks_rep.Range['F' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_kargoETSNG_name'].Value;
        exWks_rep.Range['H' + IntToStr(11 + recRep)].Value := RS.Fields['agreement_describe'].Value;
        exWks_rep.Range['K' + IntToStr(11 + recRep)].Value := RS.Fields['sum_fact_cnt'].Value;
        exWks_rep.Range['L' + IntToStr(11 + recRep)].Value := RS.Fields['fact_weight'].Value;
        Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
        exWks_rep.Range['M' + IntToStr(11 + recRep)].Value := RS.Fields['summa_without_nds'].Value;
        //Сумма НДС сделаем, как в УПД, иначе копейки не сходятся
        exWks_rep.Range['N' + IntToStr(11 + recRep)].Value := RoundCurr(RS.Fields['summa'].Value * Query_NDS.FieldByName('nds_cod').AsFloat /(100 + Query_NDS.FieldByName('nds_cod').AsFloat), -2);
        exWks_rep.Range['O' + IntToStr(11 + recRep)].Value := RS.Fields['summa'].Value;

        ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([RS.Fields['bargain_node_begin_cod'].Value, RS.Fields['bargain_node_end_cod'].Value]), []);
        exWks_rep.Range['I' + IntToStr(11 + recRep)].Value := ClientDS_distance.FieldByName('distance').Value;
        exWks_rep.Range['C' + IntToStr(11 + recRep)].Value := GetStrRateRange(ClientDS_distance.FieldByName('distance').Value);
        Inc(recRep);

      end else begin
        exWks_rep.Rows[IntToStr(recRep + 11) + ':' + IntToStr(recRep + 12)].Delete;
        recRep := recRep + 1;
        k := k + 1;

        xCopyRange(exApp, 11 + recRep, 11 + recRep + 3, 11 + recRep + 3 + 1);

        recRep := recRep + k;

        exWks_rep.Range['C' + IntToStr(10 + recRep)].Value := 'Отгрузка за : ' + FormatDateTime('mmmm yyyy', RS.Fields['date_from_to'].Value) + 'г.:';

        exWks_rep.Rows[IntToStr(recRep + 12)].Insert;
        exWks_rep.Rows[IntToStr(recRep + 11)].Copy;
        exWks_rep.Rows[IntToStr(recRep + 12)].PasteSpecial(1);

        exWks_rep.Range['A' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_id'].Value;
        exWks_rep.Range['D' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_node_begin_name'].Value;
        exWks_rep.Range['E' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_node_end_name'].Value;
        exWks_rep.Range['F' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_kargoETSNG_name'].Value;
        exWks_rep.Range['H' + IntToStr(11 + recRep)].Value := RS.Fields['agreement_describe'].Value;
        exWks_rep.Range['K' + IntToStr(11 + recRep)].Value := RS.Fields['sum_fact_cnt'].Value;
        exWks_rep.Range['L' + IntToStr(11 + recRep)].Value := RS.Fields['fact_weight'].Value;

        Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
        exWks_rep.Range['M' + IntToStr(11 + recRep)].Value := RS.Fields['summa_without_nds'].Value;
        //Сумма НДС сделаем, как в УПД, иначе копейки не сходятся
        exWks_rep.Range['N' + IntToStr(11 + recRep)].Value := RoundCurr(RS.Fields['summa'].Value * Query_NDS.FieldByName('nds_cod').AsFloat /(100 + Query_NDS.FieldByName('nds_cod').AsFloat), -2);
        exWks_rep.Range['O' + IntToStr(11 + recRep)].Value := RS.Fields['summa'].Value;

        ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([RS.Fields['bargain_node_begin_cod'].Value, RS.Fields['bargain_node_end_cod'].Value]), []);
        exWks_rep.Range['I' + IntToStr(11 + recRep)].Value := ClientDS_distance.FieldByName('distance').Value;
        exWks_rep.Range['C' + IntToStr(11 + recRep)].Value := GetStrRateRange(ClientDS_distance.FieldByName('distance').Value);
        Inc(recRep);
      end;
      RS.MoveNext
  end;

  // удаляем лишниие
  if bargain_id = -9 then begin
    exWks_rep.Rows['12:12'].Delete;
    exWks_rep.Rows['11:11'].ClearContents;
//    exWks_pril.Rows['6:6'].Delete;
//    exWks_pril.Rows['5:5'].ClearContents;
    recRep := 2;
  end else begin
    exWks_rep.Rows[IntToStr(recRep + 11) + ':' + IntToStr(recRep + 12)].Delete;
    exWks_rep.Rows[IntToStr(recRep + 12) + ':' + IntToStr(recRep + 15)].Delete;
    exWks_pril.Rows[IntToStr(recPril + 6) + ':' + IntToStr(recPril + 7)].Delete;
  end;

  if k =0 then begin
    exWks_rep.Range['K' + IntToStr(12 + recRep)].Value := exWks_rep.Range['K' + IntToStr(11 + recRep)].Value;
    exWks_rep.Range['L' + IntToStr(12 + recRep)].Value := exWks_rep.Range['L' + IntToStr(11 + recRep)].Value;
    exWks_rep.Range['M' + IntToStr(12 + recRep)].Value := exWks_rep.Range['M' + IntToStr(11 + recRep)].Value;
    exWks_rep.Range['N' + IntToStr(12 + recRep)].Value := exWks_rep.Range['N' + IntToStr(11 + recRep)].Value;
    exWks_rep.Range['O' + IntToStr(12 + recRep)].Value := exWks_rep.Range['O' + IntToStr(11 + recRep)].Value;
  end;

  // Сумма прописью
  exWks_rep.Range['B' + IntToStr(14 + recRep)].Value :=
      exWks_rep.Range['B' + IntToStr(14 + recRep)].Value + ' ' +
      VarToStr(exWks_rep.Range['O' + IntToStr(12 + recRep)].Text) + ' ' +
      VarToStr(iif(retActSettings[7][0] <> 3, retActSettings[7][1], 'руб.')) + ' (' +
      GetSumScript_RUS(FloatToStr(abs(exWks_rep.Range['O' + IntToStr(12 + recRep)].Value)), retActSettings[7][0]) + ')';
      //' в т.ч. НДС: ' + GetSumScript_RUS(FloatToStr(abs(exWks_rep.Range['N' + IntToStr(12 + recRep)].Value)), retActSettings[7][0]) + ')';
   exWks_rep.Range['F' + IntToStr(15 + recRep)].Value := 'в т.ч. НДС ' + Query_NDS.FieldByName('nds_name_full').AsString + ':';
   exWks_rep.Range['G' + IntToStr(15 + recRep)].Value :=
    VarToStr(exWks_rep.Range['N' + IntToStr(12 + recRep)].Text) + ' ' +
      VarToStr(iif(retActSettings[7][0] <> 3, retActSettings[7][1], 'руб.')) + ' (' +
      GetSumScript_RUS(FloatToStr(abs(exWks_rep.Range['N' + IntToStr(12 + recRep)].Value)), retActSettings[7][0])+ ')';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks_rep.Range['B' + IntToStr(12 + recRep)]);

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exWks_pril.Select;
  exWks_pril.Range['A1'].Select;
  exWks_rep.Select;
  exWks_rep.Range['A1'].Select;
  SaveActsEnd(Fconnect, exWks_rep, retActSettings, str_bargain_id, exWks_rep.Range['O' + IntToStr(12 + recRep)].Value);
  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks_rep); VarClear(exWks_pril); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton205Click(Sender: TObject);
var
  retActSettings    : Variant;

  exApp, exWkb      : Variant;
  exWks_rep         : Variant;
  exWks_pril        : Variant;
  SP_Balans_Detail  : TADOStoredProc;
  Query_tmp         : TADOQuery;
  recRep            : integer;
  recPril           : integer;
  bargain_id        : integer;
  str_bargain_id    : string;
  str_expeditor     : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  ClientDS_distance   : TClientDataSet;
  cod_shablon       : integer;
  RS                 : _Recordset;
  k, dist, month_from_to : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 444 = 'Акт оказанных услуг + Реестр (Лукойл) экспорт'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN or ACT_SET_RECALC_DISTANCE or ACT_SET_ROUTEFROMFACT or ACT_SET_KARGOFROMFACT);
  if retActSettings[0] = -9 then
    exit;
  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks_rep := exWkb.WorkSheets[1];
  exWks_pril := exWkb.WorkSheets[2];

  // Заполняем шапку и подписи
  exWks_rep.Range['title_str'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'заключенному между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;

  exWks_rep.Range['acts_date'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks_rep.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "Исполнитель", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "Заказчик", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks_rep.Range['B6'].Value := 'в период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  //exWks_rep.Range['B7'].Value := ' Исполнитель оказал услуги  по предоставлению принадлежащего ему на праве собственности и/или праве аренды (в том числе финансовой аренды (лизинга)) и/или ином законном основании '+
  //                     'железнодорожных Вагонов для осуществления железнодорожных перевозок Грузов Заказчика по территории Российской Федерации:';

  exWks_rep.Range['B24'].Value := 'Настоящий Акт оказанных услуг является неотъемлемой частью договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks_rep.Range['self_firm_name'].Value := VarToStr(retActSettings[12][1]);
  exWks_rep.Range['customer_firm_name'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  exWks_pril.Range['B4'].Value := exWks_rep.Range['B6'].Value;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks_rep.Range['B29'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks_rep.Range['B29'].Value := Null;
  if retActSettings[13][5] = True then
  //  exWks_rep.Range['B31'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks_rep.Range['B28'].Value := Null;

  if retActSettings[13][8] = True then
    exWks_rep.Range['J29'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks_rep.Range['J29'].Value := Null;
//  if retActSettings[13][11] = True then
//    exWks_rep.Range['L31'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
//  else
//    exWks_rep.Range['L31'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks_rep.PageSetup.PrintArea;
    PrintArea := exWks_rep.Range[PrintArea].Resize[exWks_rep.Range[PrintArea].Rows.Count + 4, exWks_rep.Range[PrintArea].Columns.Count].Address;
    exWks_rep.PageSetup.PrintArea := WideString(PrintArea);
    // 2. Копируем формат
    exWks_rep.Rows['23:23'].Copy;
    exWks_rep.Rows['27:29'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks_rep.Range['B27'].Value := 'Дата подписания';
    exWks_rep.Range['B29'].Value := '"____" __________________ 201__';
    exWks_rep.Range['L27'].Value := 'Дата подписания';
    exWks_rep.Range['L29'].Value := '"____" __________________ 201__';
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks_rep.Range['B5']);
  AutoFitMergeCell(exWks_rep.Range['B7']);
  AutoFitMergeCell(exWks_rep.Range['B19']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];

  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  // Заполняем
  recRep := 1; recPril := 1; bargain_id := -9;
  //Реестр
  while not SP_Balans_Detail.Eof do begin
    exWks_pril.Rows[IntToStr(recPril + 7)].Insert;
    exWks_pril.Rows[IntToStr(recPril + 6)].Copy;
    exWks_pril.Rows[IntToStr(recPril + 7)].PasteSpecial(1);

    exWks_pril.Range['A' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks_pril.Range['B' + IntToStr(recPril + 6)].Value := recPril;
    exWks_pril.Range['C' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks_pril.Range['D' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks_pril.Range['E' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('shaping_rate_node_border_name').AsString;
    exWks_pril.Range['F' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks_pril.Range['G' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks_pril.Range['H' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks_pril.Range['I' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;
    exWks_pril.Range['J' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
    exWks_pril.Range['K' + IntToStr(recPril + 6)].Value := SP_Balans_Detail.FieldByName('datpr').Value;
    inc(recPril);
    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;
  bargain_id := SP_Balans_Detail.FieldByName('bargain_id').AsInteger;
  k := 1;
  RS := SP_Balans_Detail.NextRecordset(k);
  //Акт
  //exApp.Visible := True;
  month_from_to := RS.Fields['month_from_to'].Value;

  exWks_rep.Range['C11'].Value := 'Отгрузка за : ' + FormatDateTime('mmmm yyyy', RS.Fields['date_from_to'].Value) + 'г.:';
  k:= 0;
  RS.MoveFirst;
  while not RS.Eof do begin
      if RS.Fields['month_from_to'].Value = month_from_to then begin
        exWks_rep.Rows[IntToStr(recRep + 12)].Insert;
        exWks_rep.Rows[IntToStr(recRep + 11)].Copy;
        exWks_rep.Rows[IntToStr(recRep + 12)].PasteSpecial(1);

        exWks_rep.Range['A' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_id'].Value;
        exWks_rep.Range['C' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_node_begin_name'].Value;
        exWks_rep.Range['D' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_node_end_name'].Value;
        exWks_rep.Range['E' + IntToStr(11 + recRep)].Value := RS.Fields['shaping_rate_node_border_name'].Value;
        exWks_rep.Range['F' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_kargoETSNG_name'].Value;
        exWks_rep.Range['H' + IntToStr(11 + recRep)].Value := RS.Fields['agreement_describe'].Value;
        exWks_rep.Range['K' + IntToStr(11 + recRep)].Value := RS.Fields['sum_fact_cnt'].Value;
        exWks_rep.Range['L' + IntToStr(11 + recRep)].Value := RS.Fields['fact_weight'].Value;
        Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
        exWks_rep.Range['M' + IntToStr(11 + recRep)].Value := RS.Fields['summa_without_nds'].Value;
        //Сумма НДС сделаем, как в УПД, иначе копейки не сходятся
        exWks_rep.Range['N' + IntToStr(11 + recRep)].Value := RoundCurr(RS.Fields['summa'].Value * Query_NDS.FieldByName('nds_cod').AsFloat /(100 + Query_NDS.FieldByName('nds_cod').AsFloat), -2);
        exWks_rep.Range['O' + IntToStr(11 + recRep)].Value := RS.Fields['summa'].Value;

        Inc(recRep);
        month_from_to:= RS.Fields['month_from_to'].Value;

      end else begin
        exWks_rep.Rows[IntToStr(recRep + 11) + ':' + IntToStr(recRep + 12)].Delete;
        recRep := recRep + 1;
        k := k + 1;

        xCopyRange(exApp, 11 + recRep, 11 + recRep + 3, 11 + recRep + 3 + 1);
        recRep := recRep + k;
        exWks_rep.Range['C' + IntToStr(10 + recRep)].Value := 'Отгрузка за : ' + FormatDateTime('mmmm yyyy', RS.Fields['date_from_to'].Value) + 'г.:';

        exWks_rep.Rows[IntToStr(recRep + 12)].Insert;
        exWks_rep.Rows[IntToStr(recRep + 11)].Copy;
        exWks_rep.Rows[IntToStr(recRep + 12)].PasteSpecial(1);

        exWks_rep.Range['A' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_id'].Value;
        exWks_rep.Range['C' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_node_begin_name'].Value;
        exWks_rep.Range['D' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_node_end_name'].Value;
        exWks_rep.Range['E' + IntToStr(11 + recRep)].Value := RS.Fields['shaping_rate_node_border_name'].Value;
        exWks_rep.Range['F' + IntToStr(11 + recRep)].Value := RS.Fields['bargain_kargoETSNG_name'].Value;
        exWks_rep.Range['H' + IntToStr(11 + recRep)].Value := RS.Fields['agreement_describe'].Value;
        exWks_rep.Range['K' + IntToStr(11 + recRep)].Value := RS.Fields['sum_fact_cnt'].Value;
        exWks_rep.Range['L' + IntToStr(11 + recRep)].Value := RS.Fields['fact_weight'].Value;

        Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
        exWks_rep.Range['M' + IntToStr(11 + recRep)].Value := RS.Fields['summa_without_nds'].Value;
        //Сумма НДС сделаем, как в УПД, иначе копейки не сходятся
        exWks_rep.Range['N' + IntToStr(11 + recRep)].Value := RoundCurr(RS.Fields['summa'].Value * Query_NDS.FieldByName('nds_cod').AsFloat /(100 + Query_NDS.FieldByName('nds_cod').AsFloat), -2);
        exWks_rep.Range['O' + IntToStr(11 + recRep)].Value := RS.Fields['summa'].Value;
        Inc(recRep);
      end;
      RS.MoveNext
  end;

  // удаляем лишниие
  if bargain_id = -9 then begin
    exWks_rep.Rows['12:12'].Delete;
    exWks_rep.Rows['11:11'].ClearContents;
//    exWks_pril.Rows['6:6'].Delete;
//    exWks_pril.Rows['5:5'].ClearContents;
    recRep := 2;
  end else begin
    exWks_rep.Rows[IntToStr(recRep + 11) + ':' + IntToStr(recRep + 12)].Delete;
    exWks_rep.Rows[IntToStr(recRep + 12) + ':' + IntToStr(recRep + 15)].Delete;
    exWks_pril.Rows[IntToStr(recPril + 6) + ':' + IntToStr(recPril + 7)].Delete;
  end;

  if k =0 then begin
    exWks_rep.Range['K' + IntToStr(12 + recRep)].Value := exWks_rep.Range['K' + IntToStr(11 + recRep)].Value;
    exWks_rep.Range['L' + IntToStr(12 + recRep)].Value := exWks_rep.Range['L' + IntToStr(11 + recRep)].Value;
    exWks_rep.Range['M' + IntToStr(12 + recRep)].Value := exWks_rep.Range['M' + IntToStr(11 + recRep)].Value;
    exWks_rep.Range['N' + IntToStr(12 + recRep)].Value := exWks_rep.Range['N' + IntToStr(11 + recRep)].Value;
    exWks_rep.Range['O' + IntToStr(12 + recRep)].Value := exWks_rep.Range['O' + IntToStr(11 + recRep)].Value;
  end;

  // Сумма прописью
  exWks_rep.Range['B' + IntToStr(14 + recRep)].Value :=
      exWks_rep.Range['B' + IntToStr(14 + recRep)].Value + ' ' +
      VarToStr(exWks_rep.Range['O' + IntToStr(12 + recRep)].Text) + ' ' +
      VarToStr(iif(retActSettings[7][0] <> 3, retActSettings[7][1], 'руб.')) + ' (' +
      GetSumScript_RUS(FloatToStr(abs(exWks_rep.Range['O' + IntToStr(12 + recRep)].Value)), retActSettings[7][0]) + ')';
      //' в т.ч. НДС: ' + GetSumScript_RUS(FloatToStr(abs(exWks_rep.Range['N' + IntToStr(12 + recRep)].Value)), retActSettings[7][0]) + ')';
   exWks_rep.Range['F' + IntToStr(15 + recRep)].Value := 'в т.ч. НДС ' + Query_NDS.FieldByName('nds_name_full').AsString + ':';
   exWks_rep.Range['G' + IntToStr(15 + recRep)].Value :=
    VarToStr(exWks_rep.Range['N' + IntToStr(12 + recRep)].Text) + ' ' +
      VarToStr(iif(retActSettings[7][0] <> 3, retActSettings[7][1], 'руб.')) + ' (' +
      GetSumScript_RUS(FloatToStr(abs(exWks_rep.Range['N' + IntToStr(12 + recRep)].Value)), retActSettings[7][0])+ ')';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks_rep.Range['B' + IntToStr(12 + recRep)]);

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exWks_pril.Select;
  exWks_pril.Range['A1'].Select;
  exWks_rep.Select;
  exWks_rep.Range['A1'].Select;
  SaveActsEnd(Fconnect, exWks_rep, retActSettings, str_bargain_id, exWks_rep.Range['O' + IntToStr(12 + recRep)].Value);
  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks_rep); VarClear(exWks_pril); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton208Click(Sender: TObject);
var sp_fact_update : TADOStoredProc;
        fact_id, i : integer;
begin
  Screen.Cursor := crHourglass;
  sp_fact_update := TADOStoredProc.Create(nil);
  sp_fact_update.Connection := Fconnect;
  sp_fact_update.ProcedureName := 'sp_fact_update';

  for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
    fact_id := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
    ShowTextMessage('Осталось ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i) + ' записей...', False);

    sp_fact_update.Parameters.Refresh;
    sp_fact_update.Parameters.ParamByName('@fact_id'    ).Value := fact_id;
    sp_fact_update.Parameters.ParamByName('@type_action').Value := 1;
    sp_fact_update.ExecProc;
  end;

  sp_fact_update.Free;
  RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');
  ShowTextMessage;
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton209Click(Sender: TObject);
var
  retActSettings      : Variant;
  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recXls              : integer;
  str_bargain_id      : string;
  str_agreement       : string;

  ClientDS_distance   : TClientDataSet;
  str_expeditor       : array [1..2] of string;
  nds_rate            : Currency;
  cod_shablon         : integer;

  fld_node            : string;
begin
  // 238 = 'Акт оказанных услуг (Азия-Цемент)'
  cod_shablon := TComponent(Sender).Tag;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');
  if str_bargain_id = '' then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTEFROMFACT or ACT_SET_RECALC_DISTANCE or ACT_SET_KARGOFROMFACT or ACT_SET_DATEDELIVERY);
  if retActSettings[0] = -9 then
    exit;

  if retActSettings[6][4] = True then begin
    fld_node := 'fact_node';
  end else begin
    fld_node := 'bargain_node';
  end;

  // Валюта всегда рубли
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['B3'].Value := 'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B4'].Value := 'к Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['B5'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  exWks.Range['N6'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B9'].Value := '    Мы, нижеподписавшиеся, представитель ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', в лице ' + VarToStr(retActSettings[4][2]) + ', с одной стороны' +
                             ', и представитель ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ', в лице ' + VarToStr(retActSettings[5][2]) + ', с другой стороны' +
                             ', составили настоящий Акт о том, что ' + str_expeditor[1] + ' оказал Услуги по предоставлению железнодорожного подвижного состава для осуществления внутрироссийской перевозки грузов ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ':';

  case IndexText(SP_Agree.FieldByName('ed_izm_cod').AsString, ['000', '001', '002', '004']) of
         // ed_izm_cod = '000' // тонны (тн)
    0 :  exWks.Range['L11'].Value := 'Ставка перевозки, руб./тн'#10'(без НДС)';
         // ed_izm_cod = '001' // контейнер (конт)
    1 :  exWks.Range['L11'].Value := 'Ставка перевозки, руб./конт'#10'(без НДС)';
         // ed_izm_cod = '002' // вагон (вагон)
    2 :  exWks.Range['L11'].Value := 'Ставка перевозки, руб./вагон'#10'(без НДС)';
         // ed_izm_cod = '004' // вагоно-сутки (сутки)
    3 :  exWks.Range['L11'].Value := 'Ставка, руб./сутки'#10'(без НДС)';
    else exWks.Range['L11'].Value := 'Ставка перевозки, руб.'#10'(без НДС)';
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B9']);

  exWks.Range['D27'].Value := 'от "' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + '"';
  exWks.Range['M27'].Value := 'от "' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + '"';

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['D28'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['D29'].Value := '_____________________ ' + VarToStr(retActSettings[13][1]);
  end else
    exWks.Range['D28:E29'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['M28'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['M29'].Value := '_____________________ ' + VarToStr(retActSettings[13][7]);
  end else
    exWks.Range['M28:N29'].ClearContents;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@set_datedelivery'        ).Value  := retActSettings[6][12];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;


  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recXls := 13;
  str_agreement := '';
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := SP_Balans_Detail.recNo;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName(fld_node + '_begin_name').AsString;
    exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName(fld_node + '_end_name').AsString;
    exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['G' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;

    if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
      exWks.Range['I' + IntToStr(recXls)].Value := null
    else
      exWks.Range['I' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

    exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;

    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName(fld_node + '_begin_cod').AsString, SP_Balans_Detail.FieldByName(fld_node + '_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName(fld_node + '_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName(fld_node + '_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
      ClientDS_distance.Post;
    end;
    exWks.Range['K' + IntToStr(recXls)].Value := ClientDS_distance.FieldByName('distance').Value;

    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then
      nds_rate := 0;

    exWks.Range['L' + IntToStr(recXls)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsFloat * 100) / (100 + nds_rate), -2);
    exWks.Range['O' + IntToStr(recXls)].Value := RoundCurr(SP_Balans_Detail.FieldByName('summa').AsFloat, -2);
    exWks.Range['M' + IntToStr(recXls)].Value := RoundCurr(SP_Balans_Detail.FieldByName('summa_without_nds').AsFloat, -2);
    exWks.Range['N' + IntToStr(recXls)].Value := '=ROUND(RC[1]-RC[-1], 2)';
    exWks.Range['P' + IntToStr(recXls)].Value := nds_rate;

    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // при необходимости удаляем лишнии записи
  if recXls > 13 then begin
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].Delete;
  end else begin
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].ClearContents;
    inc(recXls, 2);
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  // str_agreement
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT DISTINCT doc_id, doc_describe, doc_image_date');
  Query_tmp.SQL.Add('FROM view_doc_blob JOIN bargain');
  Query_tmp.SQL.Add('ON doc_id = agreement_id AND doc_type_cod in (''2'') AND doc_describe is not null');
  Query_tmp.SQL.Add('AND bargain.bargain_id IN (' + str_bargain_id + ')');
  Query_tmp.SQL.Add('ORDER BY doc_id');
  Query_tmp.Open;
  str_agreement := '';
  while not Query_tmp.Eof do begin
    if str_agreement <> '' then str_agreement := str_agreement + ', ';
    str_agreement := str_agreement + Query_tmp.FieldByName('doc_describe').AsString;
    Query_tmp.Next;
  end;

  if str_agreement <> '' then
    exWks.Range['str_agreement'].Value := 'В Графе 11, указывается стоимость услуг, предусмотренная Приложением № ' + str_agreement + ' к настоящему договору.'
  else
    exWks.Range['str_agreement'].Value := null;

  Query_tmp.Free;

  // Сумма прописью
  exWks.Range['str_sum_act'].Value := '(' + GetSumScript_RUS(exWks.Range['sum_act'].Value, 3) + ')';
  exWks.Range['str_sum_nds'].Value := '(' + GetSumScript_RUS(exWks.Range['sum_nds'].Value, 3) + ')';

  exApp.CutCopyMode := False;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['sum_act'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton20Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 429 = 'Акт оказанных услуг (Танеко)'


  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, 0);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['B4'].Value := 'составлен ' + FormatDateTime('« dd » ' + array_month_balance[MonthOf(retActSettings[3][0])] + ' yyyy года', retActSettings[3][0]);

  exWks.Range['B5'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('« dd » ' + array_month_balance[MonthOf(SP_Agree.FieldByName('contract_date_begin').AsDateTime)] + ' yyyy года', SP_Agree.FieldByName('contract_date_begin').AsDateTime);

  exWks.Range['B7'].Value := '             Мы, нижеподписавшиеся ' + VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '"' +
                             ', в лице ' + VarToStr(retActSettings[5][2]) + ', с другой стороны' +
                             ', составили настоящий акт о том, что оказанные услуги по перевалке Продукции удовлетворяют условиям Договора.';

  exWks.Range['B24'].Value := 'от ' + VarToStr(retActSettings[12][1]);
  exWks.Range['E24'].Value := 'от ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B25'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['B27'].Value := '________________ ' + VarToStr(retActSettings[13][1]);
  end else
    exWks.Range['B25:C30'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['E25'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['E27'].Value := '________________ ' + VarToStr(retActSettings[13][7]);
  end else
    exWks.Range['E25:G30'].ClearContents;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['F10'].Value := 'Цена, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['G10'].Value := 'Стоимость, ' + VarToStr(retActSettings[7][1]);
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B7']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'        ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'      ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'         ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'           ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'        ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'       ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
//  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact' ).Value := retActSettings[6][6];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(11 + recNo)].Insert;
    exWks.Rows[IntToStr(10 + recNo)].Copy;
    exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
    exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;
    exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate_no_nds').AsCurrency;

    AutoFitMergeCell(exWks.Range['B' + IntToStr(10 + recNo)]);

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
  exWks.Range['nds_val'].Value := Query_NDS.FieldByName('nds_name').AsString;
  exWks.Range['str_nds_val'].Value := 'кроме того НДС - ' + Query_NDS.FieldByName('nds_name_full').AsString;
  if Query_NDS.FieldByName('nds_cod').IsNull then begin
    exWks.Range['str_nds_val2'].Value := 'НДС';
  end else begin
    exWks.Range['str_nds_val2'].Value := 'НДС ' + Query_NDS.FieldByName('nds_name_full').AsString;
  end;

  // Сумма прописью
  exWks.Range['str_sum_not_nds'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum_not_nds'].Value)), retActSettings[7][0]);
  exWks.Range['str_sum_nds'].Value     := GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum_nds'].Value)), retActSettings[7][0]);
  exWks.Range['str_sum'].Value         := GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum'].Value)), retActSettings[7][0]);

  AutoFitMergeCell(exWks.Range['str_sum_not_nds']);
  AutoFitMergeCell(exWks.Range['str_sum_nds']);
  AutoFitMergeCell(exWks.Range['str_sum']);

  // Если ставки НДС нет, то удаляем лишние суммы прописью
  if Query_NDS.FieldByName('nds_cod').IsNull then begin
    exWks.Rows[IntToStr(15 + recNo) + ':' + IntToStr(18 + recNo)].Delete;
  end;

  exWks.Select;
  exWks.Range['A1'].Select;

  SP_Balans_Detail.Free;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton210Click(Sender: TObject);
var _fmActs : TfmActs;
begin
  _fmActs := TfmActs.Create(Application, False);
  _fmActs._SetFilterActs(-9, Fdate1, Fdate2, '', -9, False);
  _fmActs._SetFilterActs4TypeCod('233,237,238');
  if _fmActs.ShowModal = mrOk then begin
    CreateInvoiceScoreUPDFromActs820(Fconnect, _fmActs._GetActsID, _fmActs._GetActsTypeCod);
  end;
end;

procedure TfmAgree2.dxBarButton211Click(Sender: TObject);
var  SP : TADOStoredProc;
begin
  if Query_Acts.Eof then
    exit;

  if (Application.MessageBox(PChar('Удалить акт № ' + cxGrid5DBBandedTableView1acts_cod.DataBinding.Field.AsString + ' ?'), 'Акты', MB_YESNO or MB_ICONQUESTION) = mrNo) then
    exit;

  Screen.Cursor := crHourglass;
  SP := TADOStoredProc.Create(nil);
  SP.Connection := Fconnect;
  SP.ProcedureName := 'sp_acts_modify';
  SP.Parameters.Refresh;

  SP.Parameters.ParamByName('@type_action').Value := 2;
  SP.Parameters.ParamByName('@acts_id').Value     := cxGrid5DBBandedTableView1acts_id.DataBinding.Field.Value;

  try
    SP.ExecProc;
  except
    on E: Exception do
      Application.MessageBox(PChar(E.Message), 'Ошибка', MB_OK);
  end;

  SP.Free;
  RefreshQueryGrid(cxGrid5DBBandedTableView1, 'acts_id');
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton214Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  str_bargain_id      : string;
  str_expeditor       : array [1..2] of string;
  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 431 = 'Реестр оказанных услуг (к УПД)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE or ACT_SET_DATEDELIVERY);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exApp.DisplayAlerts := False;
//  exApp.Visible := True;

  exApp.ActiveWindow.View := 1;
  exApp.ScreenUpdating := False;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'        ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'      ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'         ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'           ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'        ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'       ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  // Расчет реестра (у нас есть специальная процедура)
  Report_RegistrVolume(retActSettings, exWkb, str_bargain_id, SP_Balans_Detail);

  exWks := exWkb.WorkSheets[1];
  exWks.Select;
  exWks.Range['A1'].Select;

  SP_Balans_Detail.Free;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  exApp.ScreenUpdating := True;
  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);

end;

procedure TfmAgree2.dxBarButton21Click(Sender: TObject);
var  BargainList: TStringList;
begin
  if cxGrid1DBBandedTableView1.Controller.SelectedRowCount < 1 then exit;
  BargainList := TStringList.Create;
  cx_GetSelectedValues(BargainList, cxGrid1, 'bargain_id', true); // заполняем список номерами карточек
  PrintReportExpeditor_RusCoal(BargainList, '', Fconnect);
  BargainList.Free;
end;

procedure TfmAgree2.dxBarButton22Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks    : Variant;
  SP                     : TADOStoredProc;
  Query_tmp, Q           : TADOQuery;
  Query_Contract         : TADOQuery;
  recNo, i               : integer;
  contract_agent_id      : integer;
  shaping_rate_id        : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..2] of string;

  cod_shablon            : integer;
begin
  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT shaping_rate_id, contract_agent_id, contract_agent_cod, firm_agent_name, budget_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'shaping_rate_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Кому перевыставляем (Исполнитель)';
  fmFilter._SetShapingRateChoose := True;
  if fmFilter.ShowModal = mrOk then begin
    shaping_rate_id := fmFilter.GetId;

    Q.Close;
    Q.SQL.Clear;
    Q.SQL.Add('SELECT contract_agent_id FROM view_shaping_rate WHERE shaping_rate_id = ' + IntToStr(shaping_rate_id) );
    Q.Open;
    contract_agent_id := Q.FieldByName('contract_agent_id').AsInteger;
  end else begin
    Q.Free;
    Screen.Cursor := crDefault;
    Application.MessageBox('Не выбран подрядчик', 'ВНИМАНИЕ', MB_OK);
    Exit;
  end;
  fmFilter.Free;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_id));
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Close;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;
  Query_tmp.Free;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTEFROMFACT, contract_agent_id, contract_agent_id);
  if retActSettings[0] = -9 then
    exit;
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  Query_Contract := TADOQuery.Create(nil);
  Query_Contract.Connection := Fconnect;
  Query_Contract.SQL.Add('SELECT *, date_begin as contract_date_begin FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_id));
  Query_Contract.Open;

  exWks.Range['C3'].Value := 'по Договору № ' + Query_Contract.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Contract.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + Query_Contract.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['N4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + Query_Contract.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                             ', с другой стороны, составили настоящий Акт о нижеследующем :';

  exWks.Range['B8'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' +
                             ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + Query_Contract.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Contract.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B16'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + ' претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B17'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                              Query_Contract.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Contract.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B20'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['H20'].Value := Query_Contract.FieldByName('firm_customer_name_short').AsString;


  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E22'].Value := retActSettings[13][1];
  end else
    exWks.Range['B22:G22'].ClearContents;

  if retActSettings[13][5] = True then begin
    exWks.Range['B24'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E24'].Value := retActSettings[13][4];
  end else
    exWks.Range['B24:G24'].ClearContents;


  if retActSettings[13][8] = True then begin
    exWks.Range['H22'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['M22'].Value := retActSettings[13][7];
  end else
    exWks.Range['H22:O22'].ClearContents;

  if retActSettings[13][11] = True then begin
    exWks.Range['H24'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['M24'].Value := retActSettings[13][10];
  end else
    exWks.Range['H24:O24'].ClearContents;



  ShowTextMessage('Подготовка данных ...', False);

  SP := TADOStoredProc.Create(nil);
  SP.Connection := Fconnect;
  SP.ProcedureName := 'sp_act_report_Agent_procent';
  SP.Parameters.Refresh;
  SP.Parameters.ParamByName('@str_bargain_id'   ).Value := str_bargain_id;
  SP.Parameters.ParamByName('@shaping_rate_id').Value := shaping_rate_id;
  SP.Open;

  recNo := 1;
  while not SP.Eof do begin
    exWks.Rows[IntToStr(12 + recNo)].Insert;
    exWks.Rows[IntToStr(11 + recNo)].Copy;
    exWks.Rows[IntToStr(12 + recNo)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(11 + recNo)].Value := SP.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(11 + recNo)].Value := SP.FieldByName('date_period_service').AsDatetime;
    exWks.Range['C' + IntToStr(11 + recNo)].Value := recNo;
    exWks.Range['D' + IntToStr(11 + recNo)].Value := SP.FieldByName('service_kind').AsString;
    if (SP.FieldByName('node_begin_name').AsString = '') or (SP.FieldByName('node_end_name').AsString = '') then
      exWks.Range['E' + IntToStr(11 + recNo)].Value := SP.FieldByName('node_begin_name').AsString + SP.FieldByName('node_end_name').AsString
    else
      exWks.Range['E' + IntToStr(11 + recNo)].Value := SP.FieldByName('node_begin_name').AsString + ' - ' + SP.FieldByName('node_end_name').AsString;
    exWks.Range['F' + IntToStr(11 + recNo)].Value := SP.FieldByName('agreement_describe').AsString;
    exWks.Range['G' + IntToStr(11 + recNo)].Value := SP.FieldByName('kargoETSNG_name').AsString;

    exWks.Range['H' + IntToStr(11 + recNo)].Value := SP.FieldByName('agent_amount_units_fact').Value;

    // процент
    if SP.FieldByName('transport_pay').AsFloat = 0 then
      exWks.Range['I' + IntToStr(11 + recNo)].Value := null
    else
      exWks.Range['I' + IntToStr(11 + recNo)].Value := 100 * SP.FieldByName('bargain_comiss_RUB').AsFloat / SP.FieldByName('transport_pay').AsFloat;

    Query_NDS.Locate('nds_id', SP.FieldByName('shaping_rate_nds_id').Value, []);
    exWks.Range['K' + IntToStr(11 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

    exWks.Range['O' + IntToStr(11 + recNo)].Value := SP.FieldByName('bargain_comiss_RUB').AsFloat;

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP.RecordCount - SP.RecNo), False);
    SP.Next;
  end;


  exWks.Rows[IntToStr(11 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(11 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(11 + recNo)].ClearContents;
    recNo := 2;
  end;

  exWks := exWkb.WorkSheets[1];
  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['O' + IntToStr(11 + recNo)].Value);

  SP.Free;
  Query_Contract.Free;

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);

  Q.Free;
end;

procedure TfmAgree2.dxBarButton23Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks, exWks2    : Variant;
  sp_Report_return_tarif : TADOStoredProc;
  sp_Report_return_rate  : TADOStoredProc;
  sp_Report_return_zfto  : TADOStoredProc;
  Query_tmp, Q           : TADOQuery;
  recNo, i               : integer;
  contract_agent_id      : integer;
  fact_id, fact_no       : integer;
  shaping_rate_id        : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..2] of string;
  zfto_score_id          : integer;
  rec_begin              : integer;
  sum_str, nds_str       : string;
  str_zfto_score_id      : string;

  sum_rep                : Variant;
  currency_id            : integer; // Валюта отчета (Валюта подрядчика)
  brief_name             : string;
  client_currency_id     : integer; // Валюта эквивалента (Валюта договора клиента)
  client_brief_name      : string;
  ClientDS_distance   : TClientDataSet;

  cod_shablon            : integer;
  sp_name                : string;
  PrintArea              : string;
begin
  // 417 - Отчет по возмещению тарифа (СФХ-ПРВ)

  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Close;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Подрядчик, чьи расходы перевыставляем';
  if fmFilter.ShowModal = mrOk then begin

    contract_agent_id := fmFilter.GetId;

    // Проверка на одну валюту для всех выбранных подрядчиков
    // Без проверки (сами виноваты, если получится бред)
    // Берем первую попавшеюся валюту в качестве наименования колонок
    Query_tmp.SQL.Clear;
    Query_tmp.SQL.Add('SELECT DISTINCT currency_id, brief_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ') AND contract_agent_id = ' + IntToStr(contract_agent_id));
    Query_tmp.Open;
    currency_id := Query_tmp.FieldByName('currency_id').AsInteger;
    brief_name  := Query_tmp.FieldByName('brief_name').AsString;
    Query_tmp.Free;

    // Имя ХП
    case cod_shablon of
      417: sp_name := 'sp_Report_return_tarif_2';
      else sp_name := 'sp_Report_return_tarif_2';
    end;

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1,
                        0 //(cod_shablon = ???, ACT_SET_EXCHANGE, 0)
                        or ACT_SET_ADDSIGN
                        or ACT_SET_COPYREPORT
                        or ACT_SET_ALLPARAMFROMFACT
                        or ACT_SET_SCOREZFTOFROMFACTINC
                        or ACT_SET_PRINTCOMMENT
                        or ACT_SET_RECALC_DISTANCE,
                        -9, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    // Запомним валюту договора клиента (она возвращается из процедуры SaveActsBegin)
    client_currency_id := retActSettings[7][0];
    client_brief_name  := retActSettings[7][1];
    // В качестве валюты отчета запишем валюту подрядчика (ибо отчет формируется по этой валюте)
    retActSettings[7]  := VarArrayOf([currency_id, brief_name]);

    // Составим список перечней и если их болше 1, то предложим выбор
    ShowTextMessage('Получение списка перечней...', False);
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := sp_name;
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := null;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 7;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;
    ShowTextMessage;

    if sp_Report_return_zfto.RecordCount = 0 then str_zfto_score_id := '';
    if sp_Report_return_zfto.RecordCount = 1 then str_zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').AsString;
    if sp_Report_return_zfto.RecordCount > 1 then begin
      fmFilter := TfmFilter.Create(0, sp_Report_return_zfto, 'zfto_score_id', 'ktgrm_cod', 'ktgrm_text');
      fmFilter._SetChooseZFTO4Report := True;
      if fmFilter.ShowModal = mrOk then
        str_zfto_score_id := fmFilter._GetStrId
      else
        str_zfto_score_id := '';
    end;
    sp_Report_return_zfto.Free;

    // Запомним выбор для формирования с\ф
    retActSettings[15] := str_zfto_score_id;
    ShowTextMessage;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];
    exWks2 := exWkb.WorkSheets[2];
    //exApp.Visible := True;
    // для ускорения - отключимся от принтера
    try
      exWks2.Select;
      exApp.ActiveWindow.View := 1;
      exWks.Select;
      exApp.PrintCommunication := False;
    except
    end;

    // Для всех отчетов делаем видимыми, а затем закрываем по данным с формы настройки
    // В шаблоне колонки спрятаны (так было раньше)
    exWks.Columns['I:J'].Hidden := False;
    // Перед заполнением спрячем не нужные колонки - если это необходимо
    if VarToStr(retActSettings[10]) <> '' then
      exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

    // Заполняем шапку и подписи

    exWks.Range['B2'].Value := 'о произведенных расходах, подлежащих возмещению, по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                               'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                               'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
    exWks.Range['Y3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

    exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                               ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                               ', с другой стороны, составили настоящий Отчет о нижеследующем :';

    exWks.Range['B6'].Value := '1. ' + str_expeditor[1] + ' во исполнение обязательств по договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г. понес следующие расходы, подлежащие возмещению:';

    exWks.Range['B31'].Value := 'Настоящий Отчет составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                                SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';


    exWks.Range['B12'].Value := 'ВСЕГО подлежит возмещению в адрес ' + VarToStr(retActSettings[12][1]);
    exWks.Range['B34'].Value := VarToStr(retActSettings[12][1]);
    exWks.Range['T34'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

    // Подписанты
    if retActSettings[13][2] = True then begin
      exWks.Range['B36'].Value := VarToStr(retActSettings[14][1]);
      exWks.Range['G36'].Value := retActSettings[13][1];
    end else
      exWks.Range['B36:L36'].ClearContents;
    if retActSettings[13][5] = True then begin
      exWks.Range['B38'].Value := VarToStr(retActSettings[14][4]);
      exWks.Range['G38'].Value := retActSettings[13][4];
    end else
      exWks.Range['B38:L38'].ClearContents;
    if retActSettings[13][8] = True then begin
      exWks.Range['T36'].Value := VarToStr(retActSettings[14][7]);
      exWks.Range['W36'].Value := retActSettings[13][7];
    end else
      exWks.Range['T36:X36'].ClearContents;
    if retActSettings[13][11] = True then begin
      exWks.Range['T38'].Value := VarToStr(retActSettings[14][10]);
      exWks.Range['W38'].Value := retActSettings[13][10];
    end else
      exWks.Range['T38:X38'].ClearContents;

    if retActSettings[6][2] = True then begin
      // 1. Раздвинем область печати на 4 строки вниз
      PrintArea := exWks.PageSetup.PrintArea;
      if PrintArea <> '' then begin
        PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
        exWks.PageSetup.PrintArea := WideString(PrintArea);
      end;
      // 2. Копируем формат
      exWks.Rows['36:38'].Copy;
      exWks.Rows['40:42'].PasteSpecial(Paste:=-4122);
      // 3. Добавим нужные нам строки
      exWks.Range['B40'].Value := 'Дата подписания';
      exWks.Range['B42'].Value := '"____" __________________ 201__';
      exWks.Range['T40'].Value := 'Дата подписания';
      exWks.Range['T42'].Value := '"____" __________________ 201__';
    end;

    // Наименование валюты
    if (currency_id <> 3) then begin
      exWks.Range['S9'].Value := 'Сумма без НДС, ' + brief_name;
      exWks.Range['T9'].Value := 'Сумма НДС, ' + brief_name;
      exWks.Range['U9'].Value := 'Сумма с НДС, ' + brief_name;
    end;

    // Особые условия
    if (retActSettings[6][9] = True) then begin
      exWks.Rows['30'].Insert;
      exWks.Rows['31'].Copy;
      exWks.Rows['30'].PasteSpecial(1);

      exWks.Range['B30'].Value := ReplaceStr(VarToStr(retActSettings[11]), #13, '');
      AutoFitMergeCell(exWks.Range['B30']);
    end;

    ShowTextMessage('Подготовка данных ...', False);

    // Нижня таблица - присутсвует только для Отчета № ??? (удаляем ее из шаблона)
    exWks.Rows['15:29'].Delete;

    // Верхня таблица - повагонка
    sp_Report_return_tarif := TADOStoredProc.Create(nil);
    sp_Report_return_tarif.Connection := Fconnect;
    sp_Report_return_tarif.ProcedureName := sp_name;
    sp_Report_return_tarif.Parameters.Refresh;
    sp_Report_return_tarif.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_tarif.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_tarif.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_tarif.Parameters.ParamByName('@type_result'              ).Value := 0;
    sp_Report_return_tarif.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_tarif.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_tarif.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_tarif.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_tarif.CommandTimeout := 100;
    sp_Report_return_tarif.Open;

    ClientDS_distance := TClientDataSet.Create(nil);
    ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
    ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
    ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
    ClientDS_distance.CreateDataSet;
    ClientDS_distance.LogChanges := False;

    recNo       := 1;
    fact_no     := 1;

    fact_id := -9; shaping_rate_id := -9;
    while not sp_Report_return_tarif.Eof do begin

      if (fact_id <> sp_Report_return_tarif.FieldByName('fact_id').Value) or (shaping_rate_id <> sp_Report_return_tarif.FieldByName('shaping_rate_id').Value) then begin
        fact_id := sp_Report_return_tarif.FieldByName('fact_id').Value;
        shaping_rate_id := sp_Report_return_tarif.FieldByName('shaping_rate_id').Value;
        exWks.Rows[IntToStr(10 + recNo)].Insert;
        exWks.Rows[IntToStr( 9 + recNo)].Copy;
        exWks.Rows[IntToStr(10 + recNo)].PasteSpecial(1);

        // Формулы
        exWks.Range['T' + IntToStr(9 + recNo)].Value := '=RC[1]*SUM(RC[-2])/(SUM(RC[-2])+100)';
        exWks.Range['S' + IntToStr(9 + recNo)].Value := '=RC[2]-RC[1]';

        exWks.Range['A' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('bargain_id').Value;
        exWks.Range['B' + IntToStr(9 + recNo)].Value := fact_no;
        exWks.Range['C' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('agreement_describe').AsString;
        exWks.Range['D' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('node_begin_name').AsString;
        exWks.Range['E' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('node_begin_cod').AsString;
        exWks.Range['F' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('node_end_name').AsString;
        exWks.Range['G' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('node_end_cod').AsString;
        exWks.Range['H' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoETSNG_name').AsString;
        exWks.Range['I' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoETSNG_cod').AsString;
        exWks.Range['J' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoGNG_cod').AsString;

        exWks.Range['K' + IntToStr(9 + recNo)].Value := null;
        if exWks.Range['K:K'].EntireColumn.Hidden = False then begin
          // Заполняем, если колонка не спрятана
          // Расстояние
          if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([sp_Report_return_tarif.FieldByName('node_begin_cod').AsString, sp_Report_return_tarif.FieldByName('node_end_cod').AsString]), []) then begin
            ClientDS_distance.Append;
            ClientDS_distance.FieldByName('node_begin').AsString := sp_Report_return_tarif.FieldByName('node_begin_cod').AsString;
            ClientDS_distance.FieldByName('node_end').AsString   := sp_Report_return_tarif.FieldByName('node_end_cod').AsString;
            ClientDS_distance.FieldByName('distance').Value      := null;
            ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], sp_Report_return_tarif.FieldByName('date_from_to').Value);
            ClientDS_distance.Post;
          end;
          exWks.Range['K' + IntToStr(9 + recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
        end;

        exWks.Range['L' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_document').AsString;
        if sp_Report_return_tarif.FieldByName('vid_send').Value = 1 then // ВИД ОТПРАВКИ = Контейнерная (по версии Подрядчика)
          exWks.Range['M' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_konten').AsString
        else
          exWks.Range['M' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_vagon').Value;
        exWks.Range['N' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_weight').AsFloat;
        exWks.Range['O' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('calc_weight').AsFloat;
        exWks.Range['P' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_from_to').Value;
        exWks.Range['Q' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_delivery').Value;
        if sp_Report_return_tarif.FieldByName('date_delivery').IsNull then exWks.Range['Q' + IntToStr(9 + recNo)].Value := '---';

        Query_NDS.Locate('nds_id', sp_Report_return_tarif.FieldByName('shaping_rate_nds_id').Value, []);
        exWks.Range['R' + IntToStr(9 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

        exWks.Range['U' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('precalc_sum').Value;
        exWks.Range['V' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_agent_name_full').AsString; //'ЦФТО ОАО "РЖД"';
        exWks.Range['W' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_num').AsString;
        exWks.Range['X' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('ktgrm_text').AsString;
        if sp_Report_return_tarif.FieldByName('fact_date').IsNull = False then
          exWks.Range['Y' + IntToStr(9 + recNo)].Value := FormatDateTime('dd.mm.yyyy',sp_Report_return_tarif.FieldByName('fact_date').Value)
        else
          exWks.Range['Y' + IntToStr(9 + recNo)].Value := '';

        // Рублевый эквивалент
        if retActSettings[6][1] = True then begin
          exWks.Range['Z' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('exchange_RUB_agent').Value;
          exWks.Range['AA' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('exchange_RUB_client').Value;
        end;

        exWks.Range['AC' + IntToStr(9 + recNo)].Value := sp_Report_return_tarif.FieldByName('firm_customer_name').AsString;
        exWks.Range['AC' + IntToStr(9 + recNo)].Font.ColorIndex := 2;

        recNo := recNo + 1;
        fact_no := fact_no + 1;
      end else begin
        exWks.Range['W' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['W' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('fact_num').AsString;
        exWks.Range['X' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['X' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('ktgrm_text').AsString;
        if sp_Report_return_tarif.FieldByName('fact_date').IsNull = False then
          exWks.Range['Y' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['Y' + IntToStr(9 + recNo - 1)].Value) + #10 + FormatDateTime('dd.mm.yyyy',sp_Report_return_tarif.FieldByName('fact_date').Value);
        exWks.Range['AC' + IntToStr(9 + recNo - 1)].Value := VarToStr(exWks.Range['AC' + IntToStr(9 + recNo - 1)].Value) + #10 + sp_Report_return_tarif.FieldByName('firm_customer_name').AsString;
      end;

      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_tarif.RecordCount - sp_Report_return_tarif.RecNo), False);
      sp_Report_return_tarif.Next;
    end;

    exWks.Range[IntToStr(9 + 1) + ':' + IntToStr(9 + recNo)].EntireRow.AutoFit;
    exWks.Columns['C:C'].EntireColumn.AutoFit;

    exWks.Rows[IntToStr(9 + recNo)].Delete;
    exWks.Rows[IntToStr(9 + recNo)].Delete;

    // Рублевый эквивалент
    if retActSettings[6][1] = False then
      exWks.Columns['Z:AB'].Delete;

    sum_rep := 0;
    try
      sum_rep := exWks.Range['U' + IntToStr(9 + recNo)].Value;
      if TVarData(sum_rep).VType = varError then
        sum_rep := 0;
    except
    end;

    // Второй лист - копия первого
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    exWks2.Rows['4:7'].Copy;
    exWks2.Rows['11:14'].PasteSpecial(1);

    exWks2.Range['F14'].Value := fact_no - 1;
    exWks2.Range['G14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    exWks2.Range['H14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    // Добавим нужное кол-во строк
    fact_no := fact_no - 1;
    if fact_no > 0 then
      exWks2.Rows['13:' + IntToStr(12 + fact_no)].Insert;
    exWks2.Rows['12'].Delete;
    exWks2.Rows['12'].Delete;
    // копируем колонки
    if fact_no > 0 then begin
      exWks.Range['W10:W' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['B12:B' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['Y10:Y' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['C12:C' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['X10:X' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['D12:D' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['L10:L' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['E12:E' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['M10:M' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['F12:F' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['T10:T' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['G12:G' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['U10:U' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['H12:H' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    end;
    exWks2.Columns['B:D'].WrapText := True;
    exWks2.Rows['11:' + IntToStr(11 + fact_no)].EntireRow.AutoFit;
    // сортировка
    exWks2.Range['B11:H' + IntToStr(11 + fact_no)].Sort(Key1 := exWks2.Range['B12'], Key2 := exWks2.Range['F12'], Header := 1);
    // разделяем на группы
    recNo := 1; rec_begin := 1;
    while recNo <= fact_no + 1 do begin
      if (exWks2.Range['B' + IntToStr(11 + recNo)].Value <> exWks2.Range['B' + IntToStr(11 + rec_begin)].Value)
      or (recNo = (fact_no + 1)) then begin
        exWks2.Rows[IntToStr(11 + rec_begin)].Insert;
        exWks2.Rows[IntToStr(12 + rec_begin)].Copy;
        exWks2.Rows[IntToStr(11 + rec_begin)].PasteSpecial(1);

        exWks2.Rows[IntToStr(12 + rec_begin) + ':' + IntToStr(11 + recNo)].Group;
        exWks2.Range['B' + IntToStr(11 + rec_begin)].Value := exWks2.Range['B' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['C' + IntToStr(11 + rec_begin)].Value := exWks2.Range['C' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['D' + IntToStr(11 + rec_begin)].Value := exWks2.Range['D' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['E' + IntToStr(11 + rec_begin)].Value := null;
        exWks2.Range['F' + IntToStr(11 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['G' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['H' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';

        inc(recNo);
        inc(fact_no);
        rec_begin := recNo;
      end;
      inc(recNo);
    end;

    // Второй лист - с-ф ЦФТО
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := sp_name;
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 4;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;

    recNo := 1;

    zfto_score_id := -9;
    rec_begin     := 0;
    sum_str := '';
    nds_str := '';
    while not sp_Report_return_zfto.Eof do begin
      exWks2.Rows[IntToStr(5 + recNo)].Insert;
      exWks2.Rows[IntToStr(4 + recNo)].Copy;
      exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);

      if zfto_score_id <> sp_Report_return_zfto.FieldByName('zfto_score_id').Value then begin

        if rec_begin <> 0 then begin
          exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
          exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          if sum_str = '' then
            sum_str := '=G' + IntToStr(4 + rec_begin)
          else
            sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
        end;

        rec_begin := recNo;
        zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
        exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
        exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
        recNo := recNo + 1;

        exWks2.Rows[IntToStr(5 + recNo)].Insert;
        exWks2.Rows[IntToStr(4 + recNo)].Copy;
        exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);
      end;

      exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
      exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
      exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
      exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
      exWks2.Range['E' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('number_doc').AsString;
      exWks2.Range['F' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('vagon_num').AsString;
      exWks2.Range['G' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('nds_rub').Value;
      exWks2.Range['H' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('sum_rub').Value;

      recNo := recNo + 1;
      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_zfto.RecordCount - sp_Report_return_zfto.RecNo), False);
      sp_Report_return_zfto.Next;
    end;

    if rec_begin <> 0 then begin
      exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
      exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      if sum_str = '' then
        sum_str := '=G' + IntToStr(4 + rec_begin)
      else
        sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
    end;

    exWks2.Outline.ShowLevels(1);
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Range['G' + IntToStr(4 + recNo)].Value := sum_str;
    exWks2.Range['H' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'H');
    exWks2.Range['F' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'F');

    // Третий лист (по галочке)
    if retActSettings[6][3] = True then begin
      exWks.Copy(After := exWks2);
      exWks2 := exWkb.WorkSheets[3];
      exWks.Name := 'Отчет';
      exWks2.Name := 'Акт';
      // удалим лишнее имя
      exWks2.Names['acts_cod'].Delete;
      // заменяем Отчет на Акт
      exWks2.Cells.Replace('Отчет', 'Акт');

//      exWks.Range['B1'].Value := '="ОТЧЕТ № "&Отчет!acts_cod';
      exWks2.Range['B1'].Value := '="АКТ к Отчету № "&acts_cod&" от ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.' + '"';
    end;

    exWks := exWkb.WorkSheets[1];
    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_rep);

    ClientDS_distance.Free;
    sp_Report_return_tarif.Free;
    sp_Report_return_zfto.Free;

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);

    VarClear(exWks2); VarClear(exWks); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
end;

procedure TfmAgree2.dxBarButton24Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  str_tmp             : string;
  nds_rate            : Currency;
  sum_act             : Variant;

  str_expeditor       : array [1..2] of string;
  PrintArea           : string;

  ClientDS_distance   : TClientDataSet;
  cod_shablon         : integer;
begin
  cod_shablon := abs(TComponent(Sender).Tag);
  //414 = 'Акт оказанных услуг (Афипский НПЗ)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;

  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  // Валюта всегда рубли
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
  exWks.Select;

  exWks.EnableCalculation := False; // отключить пересчет формул

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_AfipskiyNPZ';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'       ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'     ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'       ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Заполняем шапку и подписи
  exWks.Range['acts_date'].Value := retActSettings[3][0];

  exWks.Range['B5'].Value := 'Мы, нижеподписавшиеся, представитель ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') +
                             ' ' + VarToStr(retActSettings[12][1]) + ' в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и представитель ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') +
                             ' ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ' в лице ' + VarToStr(retActSettings[5][2]) +
                             ', с другой стороны, составили настоящий акт о том' +
                             ', что за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. включительно' +
                             ' ' + str_expeditor[1] + ' оказал ' + SP_Balans_Detail.FieldByName('service_kind').AsString +
                             ' в соответствии с п. 1.1. Договора № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' +
                             #10'в том числе:';

  AutoFitMergeCell(exWks.Range['B5']);

  exWks.Range['B15'].Value := 'В графе 1 указывается дата, по которой, согласно настоящему договору, определяется момент оказания ' + SP_Balans_Detail.FieldByName('service_kind').AsString;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('select distinct bargain.agreement_note, doc_blob.doc_describe, doc_blob.doc_image_date');
  Query_tmp.SQL.Add('from shaping_rate ');
  Query_tmp.SQL.Add('left join doc_blob ');
  Query_tmp.SQL.Add('on doc_blob.doc_id = shaping_rate.agreement_id');
  Query_tmp.SQL.Add('and doc_blob.doc_describe <> ''Договор''');
  Query_tmp.SQL.Add('where isnull(shaping_rate.agreement_note, doc_blob.doc_describe) is not null ');
  Query_tmp.SQL.Add('and shaping_rate.bargain_id in (' + str_bargain_id + ')');
  Query_tmp.SQL.Add('and shaping_rate.service_type = 0');
  Query_tmp.SQL.Add('order by  1, 3, 2');
  Query_tmp.Open;
  str_tmp := 'В графе 10 указывается стоимость услуг, предусмотренная';
  if (Query_tmp.EOF) or (Query_tmp.FieldByName('doc_describe').AsString = 'Договор') then begin
    str_tmp := str_tmp + ' настоящим договором';
  end else begin
    if Query_tmp.RecordCount = 1 then
      str_tmp := str_tmp + ' Протоколом'
    else
      str_tmp := str_tmp + ' Протоколами';

    while not Query_tmp.Eof do begin
      if Query_tmp.RecNo = 1 then
        str_tmp := str_tmp + ''
      else if Query_tmp.RecNo <> Query_tmp.RecordCount then
        str_tmp := str_tmp + ','
      else
        str_tmp := str_tmp + ' и';

      if not Query_tmp.FieldByName('agreement_note').IsNull then
        str_tmp := str_tmp + ' № ' + Query_tmp.FieldByName('agreement_note').AsString
      else
        str_tmp := str_tmp + ' № ' + Query_tmp.FieldByName('doc_describe').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_tmp.FieldByName('doc_image_date').AsDateTime) + 'г.';

      Query_tmp.Next;
    end;
  end;
  exWks.Range['B17'].Value := str_tmp;
  Query_tmp.Free;

  if SP_Agree.FieldByName('bargain_nds_cod').IsNull then
    exWks.Range['C20'].Value := SP_Agree.FieldByName('bargain_nds_name').AsString
  else
    exWks.Range['C20'].Value := 'в т.ч. НДС по ставке ' + SP_Agree.FieldByName('bargain_nds_name').AsString;

  exWks.Range['B23'].Value := str_expeditor[2] + ' по объему, качеству и срокам оказания услуг претензий к ' + ReplaceStr(str_expeditor[1] + 'у', 'ьу', 'ю') + ' не имеет';

  // Подписанты
  exWks.Range['B27'].Value     := 'от ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я');
  if retActSettings[13][2] = True then begin
    exWks.Range['B28'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['D29'].Value  := VarToStr(retActSettings[13][1]);
  end else begin
    exWks.Range['B28'].Value := Null;
    exWks.Range['D29'].Value  := Null;
  end;

  exWks.Range['J27'].Value     := 'от ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я');
  if retActSettings[13][8] = True then begin
    exWks.Range['J28'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['M29'].Value  := VarToStr(retActSettings[13][7]);
  end else begin
    exWks.Range['J28'].Value := Null;
    exWks.Range['M29'].Value  := Null;
  end;


  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(11 + recNo)].Insert;
    exWks.Rows[IntToStr(10 + recNo)].Copy;
    exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('datpr').Value;
    exWks.Range['C' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
    exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString;
    exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_roadabbr').AsString;
    exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_end_name').AsString;
    exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_end_roadabbr').AsString;
    // расстояние
    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('node_begin_cod').AsString, SP_Balans_Detail.FieldByName('node_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
      ClientDS_distance.Post;
    end;
    //ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []);
    // Излишний Locate - мы либо нашли расстояние, либо добавили - в любом случае сейчас мы на нужной строчке
    exWks.Range['H' + IntToStr(10 + recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
    exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;

    exWks.Range['K' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('count_vagon').AsInteger;
    exWks.Range['L' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;
    exWks.Range['M' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate_not_nds').AsFloat;
    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['Q' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

    inc(recNo);

    ShowTextMessage('Осталось: ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;

  exWks.EnableCalculation := True; // включить пересчет формул

  // сумма прописью
  exWks.Range['str_act_sum'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['act_sum'].Value)), retActSettings[7][0]);
  if SP_Agree.FieldByName('bargain_nds_cod').IsNull then
    exWks.Range['str_nds_sum'].Value := null
  else
    exWks.Range['str_nds_sum'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['nds_sum'].Value)), retActSettings[7][0]);

  exWks.Select;
  exWks.Range['A1'].Select;
  sum_act := exWks.Range['act_sum'].Value;

  ClientDS_distance.Free;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_act);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

// копировать факт  из одной группы в другую
procedure TfmAgree2.dxBarButton25Click(Sender: TObject);
var i, new_users_id : integer;
     new_str        : string;
     new_users_name : string;
begin
  if cxGrid2DBBandedTableView1.Controller.SelectedRowCount = 0 then begin
    Application.MessageBox('Не выбрано ни одной записи.', 'Ошибка', MB_OK+MB_ICONERROR);
    exit;
  end;
  //запросим организацию
  if not SetFirmSelf(new_users_id, new_users_name, Fconnect, usr_pwd) then begin
    Application.MessageBox('Не выбрана организация.', 'Ошибка', MB_OK+MB_ICONERROR);
    exit;
  end;

  if InputQuery('Копировать факт в перевозку', '№ записи перевозки', new_str) then begin
    // проверим наличие перевозки
    if not checkBargain(StrToInt(new_str), new_users_name, usr_pwd) then begin
      Application.MessageBox('Перевозка не найдена','Внимание',MB_OK+MB_ICONERROR);
      Exit;
    end;
    // Копировать факт
    for i := 0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
      copyFactBargain(cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index], StrToInt(new_str), new_users_id, Fconnect);
      ShowTextMessage('Осталось ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i) + ' записей...',  False);
    end;
    ShowTextMessage;
    Application.MessageBox('Факт скопирован успешно.','Внимание',MB_OK);
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.dxBarButton26Click(Sender: TObject);
var
  retActSettings      : Variant;

  str_bargain_id      : string;
  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query_Act           : TADOQuery;
  Query_Pay           : TADOQuery;
  recNo               : integer;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 290 = 'Акт сверки (Сугрут)'

  if SP_Agree.Eof then exit;

  str_bargain_id := SP_Agree.FieldByName('bargain_id').AsString;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, 0);
  if retActSettings[0] = -9 then
    exit;

  // Данный акт всегда в рублях
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;
  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_new;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := SP_Agree.FieldByName('contract_id').Value;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];
  SP_Balance.ExecProc;

  if SP_Balance.Parameters.ParamByName('@contract_id').Value = -9 then begin
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Первичный платёж установлен позже указанного периода. Начальное сальдо не сформировано', 'Внимание', MB_OK);
    SP_Balance.Free;
    Exit;
  end;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon)); // 'Акт сверки расчетов.xls'
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['B3'].Value := 'взаимных расчетов за период: ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. - ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.'#10 +
                             'между ' + VarToStr(retActSettings[12][1]) + #10 +
                             'и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;

  exWks.Range['acts_date'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B6'].Value := 'Мы, нижеподписавшиеся, ________________ ' + VarToStr(retActSettings[12][1]) +
                             ' _______________________, с одной стороны, и ________________ ' + SP_Agree.FieldByName('firm_customer_name_short').AsString +
                             ' _______________________, с другой стороны, составили настоящий акт сверки в том, ' +
                             'что состояние взаимных расчетов по данным учета следующее:';
  AutoFitMergeCell(exWks.Range['B6']);

  exWks.Range['B8'].Value := 'По данным ' + VarToStr(retActSettings[12][1]) + ', руб.';
  exWks.Range['J8'].Value := 'По данным ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', руб.';
  exWks.Range['B19'].Value := 'От ' + VarToStr(retActSettings[12][1]);
  exWks.Range['J19'].Value := 'От ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;



  if SP_Balance.Parameters.ParamByName('@out_balance_begin').Value < 0 then
    exWks.Range['E10'].Value := -SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000))
  else
    exWks.Range['G10'].Value := SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000));
  SP_Balance.Free;

  Query_Pay := TADOQuery.Create(nil);
  Query_Pay.Connection := Fconnect;
  Query_Pay.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  Query_Pay.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query_Pay.SQL.Add('FROM view_pay');
  Query_Pay.SQL.Add('WHERE type_pay = 0');
  Query_Pay.SQL.Add('AND (set_return = 0)');
  Query_Pay.SQL.Add('AND contract_id = :contract_id');
  Query_Pay.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query_Pay.SQL.Add('ORDER BY pay_date, pay_num');
  Query_Pay.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query_Pay.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query_Pay.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query_Pay.Open;

  Query_Act := TADOQuery.Create(nil);
  Query_Act.Connection := Fconnect;
  Query_Act.SQL.Add('SELECT acts_cod, acts_date, acts_sum = ROUND(acts_sum * dbo.func_GetExchangeNew_Period(' + IntToStr(retActSettings[7][0]) + ', acts_currency_id, NULL, NULL, NULL, acts_date, 0), 2)');
  Query_Act.SQL.Add('FROM view_acts');
  Query_Act.SQL.Add('WHERE contract_id = :contract_id');
  Query_Act.SQL.Add('AND acts_date between :date_begin AND :date_end');
  Query_Act.SQL.Add('AND acts_sum IS NOT NULL ');
  Query_Act.SQL.Add('ORDER BY acts_date, acts_cod');
  Query_Act.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query_Act.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query_Act.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query_Act.Open;

  recNo := 1;
  while (not Query_Pay.Eof) or (not Query_Act.Eof) do begin
    ShowTextMessage('Формирование акта... ' + IntToStr(recNo), False);
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    exWks.Rows[IntToStr(11 + recNo)].Insert;
    exWks.Rows[IntToStr(10 + recNo)].Copy;
    exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

    if (not Query_Act.Eof) and (Query_Pay.Eof or (Query_Act.FieldByName('acts_date').AsDateTime < Query_Pay.FieldByName('pay_date').AsDateTime)) then begin
      exWks.Range['B' + IntToStr(10 + recNo)].Value := Query_Act.FieldByName('acts_date').Value;
      exWks.Range['C' + IntToStr(10 + recNo)].Value := 'Продажа (' + Query_Act.FieldByName('acts_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Act.FieldByName('acts_date').AsDateTime) + ')';
      exWks.Range['E' + IntToStr(10 + recNo)].Value := Query_Act.FieldByName('acts_sum').Value;
      Query_Act.Next;
    end else begin
      exWks.Range['G' + IntToStr(10 + recNo)].Value := Query_Pay.FieldByName('pay_date').Value;
      exWks.Range['C' + IntToStr(10 + recNo)].Value := 'Оплата (' + Query_Pay.FieldByName('incomming_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_Pay.FieldByName('pay_date').AsDateTime) + ')';
      exWks.Range['G' + IntToStr(10 + recNo)].Value := Query_Pay.FieldByName('pay_sum').Value;
      Query_Pay.Next;
    end;

    inc(recNo);
  end;
  Query_Act.Free;
  Query_Pay.Free;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else
    inc(recNo);

  if exWks.Range['E' + IntToStr(11 + recNo)].Value < 0 then begin
    exWks.Range['E' + IntToStr(11 + recNo) + ':F' + IntToStr(11 + recNo)].ClearContents;
    exWks.Range['B' + IntToStr(14 + recNo)].Value :=
      'на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) +
      ' задолженность в пользу ' + SP_Agree.FieldByName('firm_customer_name_short').AsString +
      ' ' + VarToStr(exWks.Range['G' + IntToStr(11 + recNo)].Text) + ' руб. ' +
      '(' + GetSumScript_RUS(exWks.Range['G' + IntToStr(11 + recNo)].Value, retActSettings[7][0]) + ')'
  end else begin
    exWks.Range['G' + IntToStr(11 + recNo) + ':I' + IntToStr(11 + recNo)].ClearContents;
    exWks.Range['B' + IntToStr(14 + recNo)].Value :=
      'на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) +
      ' задолженность в пользу ' + VarToStr(retActSettings[12][1]) +
      ' ' + VarToStr(exWks.Range['E' + IntToStr(11 + recNo)].Text) + ' руб. ' +
      '(' + GetSumScript_RUS(exWks.Range['E' + IntToStr(11 + recNo)].Value, retActSettings[7][0]) + ')'
  end;
  AutoFitMergeCell(exWks.Range['B' + IntToStr(14 + recNo)]);

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton27Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks    : Variant;
  sp_Report_return_rate  : TADOStoredProc;
  Query_tmp              : TADOQuery;
  recNo, i               : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..3] of string;

  date_begin, date_end   : TDate; // Даты начала и окончания пятидневки
  date_begin_prev, date_end_prev   : TDate; // Даты начала и окончания пятидневки (предыдущая запись)

  cod_shablon            : integer;

  client_brief_name      : string;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 203 - Отчет Вознаграждение (по пятидневкам).xls

  if SP_Agree.Eof then exit;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_EXCHANGE);
  if retActSettings[0] = -9 then
    exit;

  // Отчет фоормируется в рублях
  // retActSettings[7]  := VarArrayOf([currency_id, brief_name]);
  client_brief_name := retActSettings[7][1]; // сохраним валюту клиента
  retActSettings[7]  := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
  //exApp.Visible := True;

  // Заполняем шапку и подписи

  exWks.Range['B3'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['G4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                             ', с другой стороны, составили настоящий Расчет о нижеследующем:';
  AutoFitMergeCell(exWks.Range['B6']);

  str_expeditor[3] := 'Расчет стоимости Платежно-финансовых услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я');

  exWks.Range['C9'].Value := 'Общая Стоимость услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', согласованая в Приложении';
  exWks.Range['E9'].Value := 'Общая сумма стоимости услуг ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', согласованая в Приложении, росс. рубль';
  exWks.Range['G9'].Value := 'Фактически понесенные ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + '  расходы, росс. рубль';

  exWks.Range['B15'].Value := 'Итого за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  exWks.Range['B19'].Value := 'Настоящий Расчет составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                              SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  AutoFitMergeCell(exWks.Range['B19']);

  exWks.Range['B22'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['G22'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks.Range['B24'].Value := VarToStr(retActSettings[14][1]) + ' ________________________ /' + VarToStr(retActSettings[13][1]) + '/'
  else
    exWks.Range['B24'].Value := Null;
  if retActSettings[13][5] = True then
    exWks.Range['B26'].Value := VarToStr(retActSettings[14][4]) + ' ________________________ /' + VarToStr(retActSettings[13][4]) + '/'
  else
    exWks.Range['B26'].Value := Null;
  if retActSettings[13][8] = True then
    exWks.Range['G24'].Value := VarToStr(retActSettings[14][7]) + ' ________________________ /' + VarToStr(retActSettings[13][7]) + '/'
  else
    exWks.Range['G24'].Value := Null;
  if retActSettings[13][11] = True then
    exWks.Range['G26'].Value := VarToStr(retActSettings[14][10]) + ' ________________________ /' + VarToStr(retActSettings[13][10]) + '/'
  else
    exWks.Range['G26'].Value := Null;

  // Выводить эквивалент
  if retActSettings[6][1] = True then begin
    if client_brief_name = 'RUB' then client_brief_name := 'росс. рубль';
    exWks.Range['E9'].Value := VarToStr(exWks.Range['E9'].Value) + '/' + client_brief_name;
    exWks.Range['G9'].Value := VarToStr(exWks.Range['G9'].Value) + '/' + client_brief_name;
    exWks.Range['I9'].Value := VarToStr(exWks.Range['I9'].Value) + '/' + client_brief_name;
  end else begin
    exWks.Columns['C:C'].ColumnWidth := 25.01;
    exWks.Columns['E:E'].ColumnWidth := 25.01;
    exWks.Columns['G:G'].ColumnWidth := 25.01;
    exWks.Columns['I:I'].ColumnWidth := 25.01;

    exWks.Columns['D:D'].Hidden := True;
    exWks.Columns['F:F'].Hidden := True;
    exWks.Columns['H:H'].Hidden := True;
    exWks.Columns['J:J'].Hidden := True;
  end;

  ShowTextMessage('Подготовка данных ...', False);

  sp_Report_return_rate := TADOStoredProc.Create(nil);
  sp_Report_return_rate.Connection := Fconnect;
  sp_Report_return_rate.CommandTimeout := 120;
  sp_Report_return_rate.ProcedureName := 'sp_Report_return_tarif_5days';
  sp_Report_return_rate.Parameters.Refresh;
  sp_Report_return_rate.Parameters.ParamByName('@str_bargain_id'   ).Value := str_bargain_id;
  sp_Report_return_rate.Open;

  recNo := 11; i := 0;
  date_begin_prev := Now; date_end_prev := Now;
  while not sp_Report_return_rate.Eof do begin
    // Вычислим даты пятидневки
    case IndexText(sp_Report_return_rate.FieldByName('five_days_zfto_cod').AsString,
      ['001', '002', '003', '004', '005', '006',
      '112', '113', '114', '115', '116',
      '123', '124', '125', '126',
      '134', '135', '136',
      '145', '146',
      '156']) of
      -1: begin // пятидневка не определена (весь месяц)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
            date_end := EndOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
          end;

      0 : begin // 1-5 (1 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 4;
          end;
      1 : begin // 6-10 (2 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 5;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 9;
          end;
      2 : begin // 11-15 (3 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 10;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 14;
          end;
      3 : begin // 16-20 (4 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 15;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 19;
          end;
      4 : begin // 21-25 (5 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 20;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 24;
          end;
      5 : begin // 26-28..31 (6 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 25;
            date_end := EndOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
          end;

      6 : begin // 1-10 (1-2 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 9;
          end;
      7 : begin // 1-15 (1-3 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 14;
          end;
      8 : begin // 1-20 (1-4 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 19;
          end;
      9 : begin // 1-25 (1-5 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 24;
          end;
     10 : begin // 1-28..31 (1-6 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
            date_end := EndOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
          end;

     11 : begin // 6-15 (2-3 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 5;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 14;
          end;
     12 : begin // 6-20 (2-4 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 5;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 19;
          end;
     13 : begin // 6-25 (2-5 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 5;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 24;
          end;
     14 : begin // 6-28..31 (2-6 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 5;
            date_end := EndOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
          end;

     15 : begin // 11-20 (3-4 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 10;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 19;
          end;
     16 : begin // 11-25 (3-5 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 10;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 24;
          end;
     17 : begin // 11-28..31 (3-6 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 10;
            date_end := EndOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
          end;

     18 : begin // 16-25 (4-5 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 15;
            date_end := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 24;
          end;
     19 : begin // 16-28..31 (4-6 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 15;
            date_end := EndOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
          end;

     20 : begin // 21-28..31 (5-6 пятидневка)
            date_begin := StartOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime) + 20;
            date_end := EndOfTheMonth(sp_Report_return_rate.FieldByName('date_period').AsDateTime);
          end;
    end;

    // Новый блок
    if (date_begin <> date_begin_prev) or (date_end <> date_end_prev) then begin
      if i > 0 then begin
        // Не первый блок, сдвигаем
        exWks.Rows[IntToStr(recNo)].Delete;
        exWks.Rows[IntToStr(recNo)].Delete;
        inc(recNo, 5);
      end;
      // Копируем блок
      exWks.Rows[IntToStr(recNo + 4) + ':' + IntToStr(recNo + 10)].Insert;
      exWks.Rows[IntToStr(recNo - 3) + ':' + IntToStr(recNo + 3)].Copy;
      exWks.Rows[IntToStr(recNo + 4) + ':' + IntToStr(recNo + 10)].PasteSpecial(1);
      // Заполняем шапку
      inc(i);
      exWks.Range['B' + IntToStr(recNo - 3)].Value := IntToStr(i) + '. ' + str_expeditor[3] + ' с ' + FormatDateTime('dd.mm.yyyy', date_begin) + 'г. по ' + FormatDateTime('dd.mm.yyyy', date_end) + 'г.';
      // Запоминаем даты
      date_begin_prev := date_begin; date_end_prev := date_end;
    end;

    // Копируем строку
    exWks.Rows[IntToStr(recNo + 1)].Insert;
    exWks.Rows[IntToStr(recNo)].Copy;
    exWks.Rows[IntToStr(recNo + 1)].PasteSpecial(1);

    exWks.Range['B' + IntToStr(recNo)].Value := sp_Report_return_rate.FieldByName('route_name').AsString;
    exWks.Range['C' + IntToStr(recNo)].Value := sp_Report_return_rate.FieldByName('client_rate').Value;
    exWks.Range['D' + IntToStr(recNo)].Value := sp_Report_return_rate.FieldByName('client_rate1').Value;
    exWks.Range['E' + IntToStr(recNo)].Value := sp_Report_return_rate.FieldByName('client_sum').Value;
    exWks.Range['F' + IntToStr(recNo)].Value := sp_Report_return_rate.FieldByName('client_sum1').Value;
    exWks.Range['G' + IntToStr(recNo)].Value := sp_Report_return_rate.FieldByName('agent_sum').Value;
    exWks.Range['H' + IntToStr(recNo)].Value := sp_Report_return_rate.FieldByName('agent_sum1').Value;
    exWks.Range['K' + IntToStr(recNo)].Value := sp_Report_return_rate.FieldByName('client_calc_weight').AsFloat;

    Inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_rate.RecordCount - sp_Report_return_rate.RecNo), False);
    sp_Report_return_rate.Next;
  end;

  // Убираем лишние строки (при необходимости)
  if i > 0 then begin
    // Не первый блок, сдвигаем
    exWks.Rows[IntToStr(recNo)].Delete;
    exWks.Rows[IntToStr(recNo)].Delete;
    inc(recNo, 5);
  end;
  // Убираем лишний блок
  exWks.Rows[IntToStr(recNo - 3) + ':' + IntToStr(recNo + 3)].Delete;

  sp_Report_return_rate.Free;

  Dec(recNo, 3); // сдвигаем на итоговую строку
  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['F' + IntToStr(recNo)].Value);

//  exWks.Range['A1'].Select;

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton29Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;

  str_expeditor       : array [1..2] of string;
  str_agreement       : string;
  ClientDS_distance   : TClientDataSet;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  //206 = 'Акт выполненных работ (Совфрахт-Приволжск)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['B3'].Value := 'по договору транспортной экспедиции № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['G5'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B7'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] +'"' +
                             ', в лице ' + VarToStr(retActSettings[5][2]) + ', с другой стороны' +
                             ', совместно в дальнейшем именуемые "Стороны", подписали настоящий Акт о нижеследующем:';

  exWks.Range['B9'].Value := ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги по организации перевозок грузов ' +
                             ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ', во внутригосударственном сообщении, ' +
                             'в собственном (арендованном) подвижном составе, в следующих направлениях:';

  // Получим список приложений
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT DISTINCT doc_describe');
  Query_tmp.SQL.Add('FROM view_doc_blob');
  Query_tmp.SQL.Add('WHERE doc_id IN (SELECT agreement_id FROM bargain WHERE bargain_id IN (' + str_bargain_id + '))');
  Query_tmp.SQL.Add('AND doc_type_cod = ''2''');
  Query_tmp.SQL.Add('AND doc_describe IS NOT NULL');
  Query_tmp.Open;
  if Query_tmp.RecordCount = 0 then begin
    str_agreement := 'Настоящий акт составлен на основании договора транспортной экспедиции № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  end else begin
    str_agreement := '';
    while not Query_tmp.Eof do begin
      if str_agreement <> '' then str_agreement := str_agreement + ', ';
      str_agreement := str_agreement + '№ ' + Query_tmp.FieldByName('doc_describe').AsString;
      Query_tmp.Next;
    end;
    if Query_tmp.RecordCount = 1 then
      str_agreement := 'Настоящий акт составлен на основании Приложения ' + str_agreement
    else
      str_agreement := 'Настоящий акт составлен на основании Приложений ' + str_agreement;
    str_agreement := str_agreement + ' к договору транспортной экспедиции № ' +
                     SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  end;
  exWks.Range['B19'].Value := str_agreement;
  Query_tmp.Free;

  exWks.Range['B20'].Value := 'Настоящий акт после его подписания представителями Сторон свидетельствует о том' +
                              ', что услуги оказаны ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' в полном объеме ' +
                              'и приняты ' + ReplaceStr(str_expeditor[2] + 'ом', 'ьо', 'е') + ' без замечаний.';

  exWks.Range['B25'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['I25'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['brief_name'].Value := VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['F11'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B9']);
  AutoFitMergeCell(exWks.Range['B19']);
  AutoFitMergeCell(exWks.Range['B20']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH';

  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin').Value     := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end').Value       := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon').Value   := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 12;
  while not SP_Balans_Detail.Eof do begin
    // Выводим только основные записи
    // Все Доп. Сборы считаем Как сумму НДС
    if (SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1) then begin
      exWks.Rows[IntToStr(1 + recNo)].Insert;
      exWks.Rows[IntToStr(0 + recNo)].Copy;
      exWks.Rows[IntToStr(1 + recNo)].PasteSpecial(1);

      exWks.Range['A' + IntToStr(recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString;
      exWks.Range['C' + IntToStr(recNo)].Value := SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['D' + IntToStr(recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['F' + IntToStr(recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;
      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['G' + IntToStr(recNo)].Value := null
      else
        exWks.Range['G' + IntToStr(recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;
      exWks.Range['H' + IntToStr(recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;
      exWks.Range['L' + IntToStr(recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['J' + IntToStr(recNo)].Value := Query_NDS.FieldByName('nds_name_full').AsString;

      exWks.Range['E' + IntToStr(recNo)].Value := null;
      if exWks.Range['E:E'].EntireColumn.Hidden = False then begin
        // Заполняем, если колонка не спрятана
        // Расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('node_begin_cod').AsString, SP_Balans_Detail.FieldByName('node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_period').AsDatetime);
          ClientDS_distance.Post;
        end;
        exWks.Range['E' + IntToStr(recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
      end;

      inc(recNo);
    end;

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(recNo)].Delete;
  if recNo > 12 then
    exWks.Rows[IntToStr(recNo)].Delete
  else begin
    exWks.Rows[IntToStr(recNo)].ClearContents;
    inc(recNo);
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  // Сумма прописью
  exWks.Range['G' + IntToStr(3 + recNo)].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['L' + IntToStr(recNo)].Value)), retActSettings[7][0]);
  exWks.Range['G' + IntToStr(3 + recNo)].Value := exWks.Range['G' + IntToStr(3 + recNo)].Value + ', в т.ч. НДС по ставке 18% - ' + FormatFloat('#,##0.00', exWks.Range['K' + IntToStr(recNo)].Value) + ' ' + exWks.Range['brief_name'].Text;
  AutoFitMergeCell(exWks.Range['G' + IntToStr(3 + recNo)]);

  exWks.Select;
  exWks.Range['A1'].Select;

  // Отчет к Акту
  if cod_shablon = 206 then begin
    Report_SFHPrivolzhsk(cod_shablon, retActSettings, exWkb, str_bargain_id, retActSettings[6][11]);
    exWks.Select;
  end;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['L' + IntToStr(recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton2Click(Sender: TObject);
begin
  GroupBox4.Visible := dxBarButton2.Down;
  Splitter1.Visible := dxBarButton2.Down;

  GroupBox1.Visible := dxBarButton2.Down;
  Splitter1.Visible := dxBarButton2.Down;

  if dxBarButton2.Down then begin
    RefreshProcedureDetail;
  end;
end;

procedure TfmAgree2.dxBarButton30Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  str_tmp             : string;
  nds_rate            : Currency;
  sum_act             : Variant;

  str_expeditor       : array [1..2] of string;
  PrintArea           : string;

  ClientDS_distance   : TClientDataSet;
  cod_shablon         : integer;

  contract_agent_id   : integer;
  contract_agent_cod  : string;
  firm_agent_name     : string;
  contract_agent_date : TDate;
begin
  cod_shablon := abs(TComponent(Sender).Tag);
  //415 = 'Акт оказанных услуг (НС-ТРАНС) (подрядчик)'

  if SP_Agree.Eof then exit;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  // Выбор контракта подрядчика
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT DISTINCT contract_id = contract_agent_id, contract_cod = contract_agent_cod, firm_customer_name = firm_agent_name');
  Query_tmp.SQL.Add('FROM view_shaping_rate');
  Query_tmp.SQL.Add('WHERE bargain_id in (' + str_bargain_id + ')');
  Query_tmp.Open;

  contract_agent_id := -9;
  if Query_tmp.RecordCount = 1 then contract_agent_id  := Query_tmp.FieldByName('contract_id').AsInteger;
  if Query_tmp.RecordCount > 1 then begin
    fmFilter := TfmFilter.Create(0, Query_tmp, 'contract_id', 'contract_cod', 'firm_customer_name');
    fmFilter._SetContract4FactIncChoose := True;
    if fmFilter.ShowModal = mrOk then contract_agent_id := fmFilter.GetId;
    fmFilter.Free;
  end;
  Query_tmp.Free;

  if contract_agent_id = -9 then begin
    Screen.Cursor := crDefault;
    Application.MessageBox('Не выбран подрядчик', 'ВНИМАНИЕ', MB_OK);
    Exit;
  end;

  // --- данные контракта подрядчика -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod, contract_cod, date_begin, firm_customer_name_full ');
  Query_tmp.SQL.Add('FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_id));
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  contract_agent_cod  := Query_tmp.FieldByName('contract_cod').AsString;
  contract_agent_date := Query_tmp.FieldByName('date_begin').AsDateTime;
  firm_agent_name     := Query_tmp.FieldByName('firm_customer_name_full').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE, contract_agent_id);
  if retActSettings[0] = -9 then
    exit;

  // Валюта всегда рубли
  retActSettings[7] := VarArrayOf([3, 'RUB']);

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
  exWks.Select;

  exWks.EnableCalculation := False; // отключить пересчет формул

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_AfipskiyNPZ';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'       ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'     ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'       ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Заполняем шапку и подписи
  exWks.Range['acts_date'].Value := retActSettings[3][0];

  exWks.Range['B5'].Value := 'Мы, нижеподписавшиеся, ' +
                             'представитель ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') +
                             ' ' + firm_agent_name + ' в лице ' + VarToStr(retActSettings[5][2]) +
                             ', с одной стороны, и ' +
                             'представитель ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') +
                             ' ' + VarToStr(retActSettings[12][1]) + ' в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с другой стороны, составили настоящий акт о том' +
                             ', что за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. включительно' +
                             ' ' + str_expeditor[1] + ' оказал ' + SP_Balans_Detail.FieldByName('service_kind').AsString +
                             ' в соответствии с п. 1.1. Договора № ' + contract_agent_cod +
                             ' от ' + FormatDateTime('dd.mm.yyyy', contract_agent_date) + 'г.' +
                             #10'в том числе:';

  AutoFitMergeCell(exWks.Range['B5']);

  exWks.Range['B15'].Value := 'В графе 1 указывается дата, по которой, согласно настоящему договору, определяется момент оказания ' + SP_Balans_Detail.FieldByName('service_kind').AsString;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('select doc_blob.doc_describe, doc_blob.doc_image_date');
  Query_tmp.SQL.Add('from doc_blob ');
  Query_tmp.SQL.Add('where doc_blob.doc_id in (select agreement_id from SHAPING_RATE where bargain_id in (' + str_bargain_id + ') and contract_agent_id = ' + IntToStr(contract_agent_id) + ')');
  Query_tmp.SQL.Add('and doc_blob.doc_describe <> ''Договор''');
  Query_tmp.SQL.Add('order by  2, 1');
  Query_tmp.Open;
  str_tmp := 'В графе 10 указывается стоимость услуг, предусмотренная';
  if (Query_tmp.EOF) or (Query_tmp.FieldByName('doc_describe').AsString = 'Договор') then begin
    str_tmp := str_tmp + ' настоящим договором';
  end else begin
    if Query_tmp.RecordCount = 1 then
      str_tmp := str_tmp + ' Протоколом'
    else
      str_tmp := str_tmp + ' Протоколами';

    while not Query_tmp.Eof do begin
      if Query_tmp.RecNo = 1 then
        str_tmp := str_tmp + ''
      else if Query_tmp.RecNo <> Query_tmp.RecordCount then
        str_tmp := str_tmp + ','
      else
        str_tmp := str_tmp + ' и';
      str_tmp := str_tmp + ' № ' + Query_tmp.FieldByName('doc_describe').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_tmp.FieldByName('doc_image_date').AsDateTime) + 'г.';
      Query_tmp.Next;
    end;
  end;
  exWks.Range['B17'].Value := str_tmp;
  Query_tmp.Free;

  if SP_Agree.FieldByName('bargain_nds_cod').IsNull then
    exWks.Range['C20'].Value := SP_Agree.FieldByName('bargain_nds_name').AsString
  else
    exWks.Range['C20'].Value := 'в т.ч. НДС по ставке ' + SP_Agree.FieldByName('bargain_nds_name').AsString;

  exWks.Range['B23'].Value := str_expeditor[2] + ' по объему, качеству и срокам оказания услуг претензий к ' + ReplaceStr(str_expeditor[1] + 'у', 'ьу', 'ю') + ' не имеет';

  // Подписанты
  exWks.Range['B27'].Value     := 'от ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я');
  if retActSettings[13][8] = True then begin
    exWks.Range['B28'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['D29'].Value  := VarToStr(retActSettings[13][7]);
  end else begin
    exWks.Range['B28'].Value := Null;
    exWks.Range['D29'].Value  := Null;
  end;

  exWks.Range['J27'].Value     := 'от ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я');
  if retActSettings[13][2] = True then begin
    exWks.Range['J28'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['M29'].Value  := VarToStr(retActSettings[13][1]);
  end else begin
    exWks.Range['J28'].Value := Null;
    exWks.Range['M29'].Value  := Null;
  end;


  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(11 + recNo)].Insert;
    exWks.Rows[IntToStr(10 + recNo)].Copy;
    exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('datpr').Value;
    exWks.Range['C' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
    exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString;
    exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_roadabbr').AsString;
    exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_end_name').AsString;
    exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_end_roadabbr').AsString;
    // расстояние
    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('node_begin_cod').AsString, SP_Balans_Detail.FieldByName('node_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
      ClientDS_distance.Post;
    end;
    //ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []);
    // Излишний Locate - мы либо нашли расстояние, либо добавили - в любом случае сейчас мы на нужной строчке
    exWks.Range['H' + IntToStr(10 + recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
    exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;

    exWks.Range['K' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('count_vagon').AsInteger;
    exWks.Range['L' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;
    exWks.Range['M' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate_not_nds').AsFloat;
    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['Q' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

    inc(recNo);

    ShowTextMessage('Осталось: ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;

  exWks.EnableCalculation := True; // включить пересчет формул

  // сумма прописью
  exWks.Range['str_act_sum'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['act_sum'].Value)), retActSettings[7][0]);
  if SP_Agree.FieldByName('bargain_nds_cod').IsNull then
    exWks.Range['str_nds_sum'].Value := null
  else
    exWks.Range['str_nds_sum'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['nds_sum'].Value)), retActSettings[7][0]);

  exWks.Select;
  exWks.Range['A1'].Select;
  sum_act := exWks.Range['act_sum'].Value;

  ClientDS_distance.Free;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_act);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton31Click(Sender: TObject);
var     i : integer;
  comment : string;
        Q : TADOQuery;
begin
  Screen.Cursor := crHourglass;
  comment := InputBox('','Введите комментарий', '');
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  for i := 0 to cxGrid2DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
    Q.SQL.Clear;
    Q.SQL.Add('UPDATE fact SET fact_users_comment = ' + StrToSQL(comment)  + ' WHERE fact_id = ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index])) ;
    Q.ExecSQL;
    ShowTextMessage('Осталось '+IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i)+' строк...', False);
  end;
  Q.Free;
  RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');
  ShowTextMessage;
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton32Click(Sender: TObject);
var str_bargain_id : string;
    i : integer;
    Q_bargain : TADOQuery;
    Q : TADOQuery;
    users_group_cod : string;
    sp_fact_by_rate_SAVE : TADOStoredProc;
begin
  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT users_group_cod FROM view_users WHERE users_name = SYSTEM_USER;');
  Q.Open;
  users_group_cod := Q.FieldByName('users_group_cod').AsString;
  Q.Free;

  Q_bargain := TADOQuery.Create(nil);
  Q_bargain.Connection := Fconnect;
  Q_bargain.SQL.Add('SELECT * FROM view_bargain WHERE bargain_id in (' + str_bargain_id + ')');
  Q_bargain.Open;

  sp_fact_by_rate_SAVE := TADOStoredProc.Create(nil);
  sp_fact_by_rate_SAVE.Connection := Fconnect;
  sp_fact_by_rate_SAVE.ProcedureName := 'sp_fact_by_rate_SAVE';

  while not Q_bargain.Eof do begin
    ShowTextMessage('Сохранение фрахтовой карточки №' + Q_bargain.FieldByName('bargain_cod').AsString + '...' + #10 + 'Осталось ' + IntToStr(Q_bargain.RecordCount - Q_bargain.RecNo) + '...', False);

//    if (Q_bargain['date_period_finance']<>NULL) OR (Q_bargain.FieldByName('set_bargain_block').AsBoolean) then begin
//      // Перевозка закрыта
//      Application.MessageBox(PChar('Данные по фрахтовой карточке № '+Q_bargain.FieldByName('bargain_cod').AsString+' не будут сохранены! Перевозка закрыта в финансовом месяце'), 'Ошибка', MB_OK+MB_ICONWARNING);
//    end else if ((Q_bargain['agreement_id'] = NULL) AND (Q_bargain['agreement_note'] = NULL)) AND (Q_bargain['date_period'] >= EncodeDate(2009, 3, 1)) then begin
//      // Нет приложение && Перевозочный месяц от марта 2009
//      Application.MessageBox(PChar('Данные по фрахтовой карточке № '+Q_bargain.FieldByName('bargain_cod').AsString+' не будут сохранены! В перевозке не указано приложение'), 'Ошибка', MB_OK+MB_ICONWARNING);
//    end else if (Q_bargain['set_bargain_weight'] = NULL) AND (users_group_cod  = '0') then begin
//      // (Признак "Вес в сводный отчет + только для СФХ)"
//      Application.MessageBox(PChar('Данные по фрахтовой карточке № '+Q_bargain.FieldByName('bargain_cod').AsString+' не будут сохранены! В перевозке не указан признак "Вес для сводного отчёта"'), 'Ошибка', MB_OK+MB_ICONWARNING);
//    end else begin


      sp_fact_by_rate_SAVE.Parameters.Refresh;
      sp_fact_by_rate_SAVE.Parameters.ParamByName('@bargain_id').Value := Q_bargain.FieldByName('bargain_id').Value;
      try
        sp_fact_by_rate_SAVE.ExecProc;
      except
      end;
//    end;

    Q_bargain.Next;
  end;

  sp_fact_by_rate_SAVE.Free;
  Q_bargain.Free;
  ShowTextMessage;

  RefreshProcedure(-9,-9);
end;

procedure TfmAgree2.dxBarButton34Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks, exWks2 : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recAct              : integer;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;
  sum_act             : Variant;

  old_bargain_id      : integer;
  old_rate            : currency;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  ClientDS_distance   : TClientDataSet;
  cod_shablon         : integer;
begin
  cod_shablon := abs(TComponent(Sender).Tag);
  //233 = 'Акт приема-передачи оказанных услуг (РН-Транс, Уяр-Дземги)'
  //258 = 'Акт приема-передачи оказанных услуг (Трансойл)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_SET_ADDSIGN or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];
  exWks2 := exWkb.WorkSheets[2];
  exWks.Select;

  exWks2.EnableCalculation := False; // отключить пересчет формул
  exWks.EnableCalculation := False; // отключить пересчет формул

  // Заполняем шапку и подписи
  exWks.Range['contract_cod'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['acts_date'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['firm_self'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['firm_customer'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks.Range['B17'].Value := VarToStr(retActSettings[14][1]) + ' _________________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks.Range['B17'].Value := Null;
  if retActSettings[13][5] = True then
    exWks.Range['B19'].Value := VarToStr(retActSettings[14][4]) + ' _____________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks.Range['B19'].Value := Null;
  if retActSettings[13][8] = True then
    exWks.Range['I17'].Value := VarToStr(retActSettings[14][7]) + ' _________________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks.Range['I17'].Value := Null;
  if retActSettings[13][11] = True then
    exWks.Range['I19'].Value := VarToStr(retActSettings[14][10]) + ' _____________________ ' + VarToStr(retActSettings[13][10]) + ''
  else
    exWks.Range['I19'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['17:20'].Copy;
    exWks.Rows['21:24'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B21'].Value := 'Дата подписания';
    exWks.Range['B23'].Value := '"____" __________________ 201__';
    exWks.Range['I21'].Value := 'Дата подписания';
    exWks.Range['I23'].Value := '"____" __________________ 201__';
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['brief_name'].Value := VarToStr(retActSettings[7][1]);
  end;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recAct := 0;
  recNo := 1;
  old_bargain_id := -9; old_rate := 0;
  while not SP_Balans_Detail.Eof do begin
    if (old_bargain_id <> SP_Balans_Detail.FieldByName('bargain_id').AsInteger) or (old_rate <> SP_Balans_Detail.FieldByName('rate').AsCurrency) then begin
      // Новая строка в Акте
      Inc(recAct);

      exWks.Rows[IntToStr(9 + recAct)].Insert;
      exWks.Rows[IntToStr(8 + recAct)].Copy;
      exWks.Rows[IntToStr(9 + recAct)].PasteSpecial(1);

      exWks.Range['A' + IntToStr(8 + recAct)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(8 + recAct)].Value := recAct;
      exWks.Range['C' + IntToStr(8 + recAct)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
      exWks.Range['D' + IntToStr(8 + recAct)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
      exWks.Range['E' + IntToStr(8 + recAct)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['I' + IntToStr(8 + recAct)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      exWks.Range['K' + IntToStr(8 + recAct)].Value := RoundCurr(SP_Balans_Detail.FieldByName('rate').AsCurrency, -2);

      old_bargain_id := SP_Balans_Detail.FieldByName('bargain_id').AsInteger;
      old_rate := SP_Balans_Detail.FieldByName('rate').AsCurrency;
    end;

    exWks2.Rows[IntToStr(7 + recNo)].Insert;
    exWks2.Rows[IntToStr(6 + recNo)].Copy;
    exWks2.Rows[IntToStr(7 + recNo)].PasteSpecial(1);

    exWks2.Range['A' + IntToStr(6 + recNo)].Value := recAct;
    exWks2.Range['B' + IntToStr(6 + recNo)].Value := recNo;
    exWks2.Range['C' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').Value;
    exWks2.Range['D' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks2.Range['E' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_road_begin_name').AsString;
    exWks2.Range['F' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks2.Range['G' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_road_end_name').AsString;

    // расстояние
    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);

      ClientDS_distance.Post;
    end;
    ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []);

    exWks2.Range['H' + IntToStr(6 + recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
    exWks2.Range['I' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
    exWks2.Range['J' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks2.Range['K' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    exWks2.Range['L' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks2.Range['M' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks2.Range['N' + IntToStr(6 + recNo)].Value := null
    else
      exWks2.Range['N' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;
    exWks2.Range['O' + IntToStr(6 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
    exWks2.Range['S' + IntToStr(6 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString;

    inc(recNo);

    ShowTextMessage('Осталось вагонов: ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(9 + recAct)].Delete;
  if recAct > 0 then
    exWks.Rows[IntToStr(9 + recAct)].Delete
  else
    exWks.Rows[IntToStr(9 + recAct)].ClearContents;

  exWks2.Rows[IntToStr(6 + recNo)].Delete;
  if recNo > 1 then
    exWks2.Rows[IntToStr(6 + recNo)].Delete
  else
    exWks2.Rows[IntToStr(6 + recNo)].ClearContents;

  exWks2.EnableCalculation := True; // включить пересчет формул
  exWks.EnableCalculation := True; // включить пересчет формул

  exWks.Range['B5'].Value := 'Настоящий акт составлен на предмет того, что ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' оказаны услуги ' +
                             'по предоставлению железнодорожного подвижного состава для осуществления перевозок Грузов ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ' ' +
                             'на сумму ' + VarToStr(exWks.Range['act_sum'].Text) + ' ' +
                             '(' + GetSumScript_RUS(FloatToStr(abs(exWks.Range['act_sum'].Value)), retActSettings[7][0]) + ') ' + VarToStr(exWks.Range['brief_name'].Value) + ', ' +
                             'в том числе НДС 18% - ' + VarToStr(exWks.Range['nds_sum'].Text) + ' ' + VarToStr(exWks.Range['brief_name'].Value) + '';
  AutoFitMergeCell(exWks.Range['B5']);

  exWks2.Select;
  exWks2.Range['A1'].Select;
  exWks.Select;
  exWks.Range['A1'].Select;
  sum_act := exWks.Range['act_sum'].Value;

  ClientDS_distance.Free;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_act);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton35Click(Sender: TObject);
var          i : integer;
      str_fact_id: string;
begin
  str_fact_id := '';
  str_fact_id := cx_GetSelectedValues(cxGrid2, 'fact_id');
  if str_fact_id = '' then exit;

  for i:=0 to fmMain.MDIChildCount-1 Do
    if (fmMain.MDIChildren[i].ClassName = 'TfmFact') then begin
      fmMain.MDIChildren[i].Free;
      break;
    end;
  fmFact := TfmFact.Create(self, True);
  fmFact._SetProfitStrFactid := str_fact_id;
  fmFact.WindowState := wsMaximized;
  fmFact.Show;
end;

procedure TfmAgree2.dxBarButton37Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
//  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  //433 = 'Акт оказанных услуг (Простой)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDVAGON or ACT_SET_BASE_ADDITION );
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['N3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г. ' +
                             VarToStr(retActSettings[16]);

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['J18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:G20'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E22'].Value := retActSettings[13][4];
  end else
    exWks.Range['B22:G22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['J20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['M20'].Value := retActSettings[13][7];
  end else
    exWks.Range['J20:O20'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['J22'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['M22'].Value := retActSettings[13][10];
  end else
    exWks.Range['J22:O22'].ClearContents;

  exWks.Range['J10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['L10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['M10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['N10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['O10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['H10'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH_Arenda';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon').Value   := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_rsvagon').Value    := False;
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(11 + recNo)].Insert;
    exWks.Rows[IntToStr(10 + recNo)].Copy;
    exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

    if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
      exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
    else // Доп. сбор.
      exWks.Range['A' + IntToStr(10 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
    exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
    exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;

    exWks.Range['H' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;
    exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt_days').Value;

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['K' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

//    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
    exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate_no_nds').AsCurrency;
    exWks.Range['L' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;

//    exWks.Range['M' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa_no_nds').AsCurrency;
    exWks.Range['O' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

    AutoFitMergeCell(exWks.Range['D' + IntToStr(10 + recNo)]);

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['O' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton3Click(Sender: TObject);
begin
  fmPeriod := TfmPeriod.Create(Application, Fdate1, Fdate2, 3);
  if fmPeriod.ShowModal=mrOK then begin
    Screen.Cursor := crHourglass;
    Fdate1 := fmPeriod._GetMonth;
    Fdate2 := IncMonth(Fdate1, 1) - 1;
    dxBarSubItem3.Caption := FormatDateTime('mmmm yyyy', Fdate1);

    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.dxBarButton4Click(Sender: TObject);
begin
  fmPeriod := TfmPeriod.Create(Application, Fdate1, Fdate2, 2);
  if fmPeriod.ShowModal=mrOK then begin
    Screen.Cursor := crHourglass;
    Fdate1 := fmPeriod._GetMonthBegin;
    Fdate2 := fmPeriod._GetMonthEnd;
    dxBarSubItem3.Caption := FormatDateTime('mmm yy', Fdate1) + ' - ' + FormatDateTime('mmm yy', Fdate2);

    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.dxBarButton53Click(Sender: TObject);
var
  retActSettings      : Variant;

  str_bargain_id      : string;
  exApp, exWkb, exWks : Variant;
  SP_Balance          : TADOStoredProc;
  Query               : TADOQuery;
  recNo               : integer;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 106 = 'Акт сверки расчетов (РН-Транс, Новокуйбышевск)'

  if SP_Agree.Eof then exit;

  str_bargain_id := SP_Agree.FieldByName('bargain_id').AsString;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, 0);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  SP_Balance := TADOStoredProc.Create(nil);
  SP_Balance.Connection := Fconnect;
  SP_Balance.ProcedureName := 'sp_invoice_balance_GET_new;1';
  SP_Balance.Parameters.Refresh;
  SP_Balance.Parameters.ParamByName('@contract_id').Value := SP_Agree.FieldByName('contract_id').Value;
  SP_Balance.Parameters.ParamByName('@currency_id').Value := retActSettings[7][0];
  SP_Balance.Parameters.ParamByName('@date_begin').Value  := retActSettings[3][1];
  SP_Balance.Parameters.ParamByName('@date_end').Value    := retActSettings[3][2];
  SP_Balance.ExecProc;

  if SP_Balance.Parameters.ParamByName('@contract_id').Value = -9 then begin
    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
    Application.MessageBox('Первичный платёж установлен позже указанного периода. Начальное сальдо не сформировано', 'Внимание', MB_OK);
    SP_Balance.Free;
    Exit;
  end;

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon)); // 'Акт сверки расчетов.xls'
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['B2'].Value := 'Акт сверки взаиморасчетов по договору ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + #10 +
                             'между ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ' и ' + VarToStr(retActSettings[12][1]) + #10 +
                             'за ' + FormatDateTime('mmmm yyyy', retActSettings[3][2]) + ' г.';

  exWks.Range['I4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['F6'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['H6'].Value := VarToStr(retActSettings[12][1]);

  exWks.Range['B14'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['G14'].Value := VarToStr(retActSettings[12][1]);

  exWks.Range['B8'].Value := 'Сальдо на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + ' составляет';
  exWks.Range['B12'].Value := 'Сальдо на ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2] + 1) + ' составляет';

  if SP_Balance.Parameters.ParamByName('@out_balance_begin').Value < 0 then
    exWks.Range['G8'].Value := -SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000))
  else
    exWks.Range['F8'].Value := SP_Balance.Parameters.ParamByName('@out_balance_begin').Value  + iif(LisCheck(Fconnect.ConnectionString), 0, random(50000));
  SP_Balance.Free;

  recNo := 1;

  // Отчет строится в рулях
  // С-ф (обычные) (верхняя-левая часть)
  ShowTextMessage('Формирование отчета: Шаг 1 из 3', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(3, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(3, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_return = 0 AND set_clearing = 0 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(9 + recNo)].Insert;
    exWks.Rows[IntToStr(8 + recNo)].Copy;
    exWks.Rows[IntToStr(9 + recNo)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(8 + recNo)].Value := 'счет-фактура'
    else
      exWks.Range['B' + IntToStr(8 + recNo)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(8 + recNo)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(8 + recNo)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['G' + IntToStr(8 + recNo)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  // Платежи (обычные) (верхняя-правая часть)
  // Как положительные так и отридцательные
  ShowTextMessage('Формирование отчета: Шаг 2 из 3', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT pay_date = dbo.func_DateOnly(pay_date), pay_num, type_nds_name, incomming_cod, ');
  //Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(' + IntToStr(retActSettings[7][0]) + ', currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('ROUND(pay_sum * dbo.func_GetExchangeNew(3, currency_id, exchange_USD_val, exchange_CHF_val, exchange_EUR_val), 2) pay_sum');
  Query.SQL.Add('FROM view_pay');
  Query.SQL.Add('WHERE type_pay = 0');
  Query.SQL.Add('AND (set_return = 0)');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND (dbo.func_DateOnly(pay_date) between :date_begin AND :date_end)');
  Query.SQL.Add('ORDER BY pay_date');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := retActSettings[3][1];
  Query.Parameters.ParamByName('date_end').Value := retActSettings[3][2];
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(9 + recNo)].Insert;
    exWks.Rows[IntToStr(8 + recNo)].Copy;
    exWks.Rows[IntToStr(9 + recNo)].PasteSpecial(1);

    if Query.FieldByName('pay_sum').AsCurrency >= 0  then
      exWks.Range['B' + IntToStr(8 + recNo)].Value := 'платежное поручение'
    else
      exWks.Range['B' + IntToStr(8 + recNo)].Value := 'платежное поручение на возврат денежных средств';
    exWks.Range['C' + IntToStr(8 + recNo)].Value := Query.FieldByName('incomming_cod').AsString;
    exWks.Range['D' + IntToStr(8 + recNo)].Value := Query.FieldByName('pay_date').Value;

    if Query.FieldByName('pay_sum').AsCurrency >= 0  then
      exWks.Range['F' + IntToStr(8 + recNo)].Value := Query.FieldByName('pay_sum').Value
    else
      exWks.Range['G' + IntToStr(8 + recNo)].Value := -Query.FieldByName('pay_sum').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  // С-ф (взаимозачёт)  (верхняя-правая часть; вместе с обычными платежами)
  ShowTextMessage('Формирование отчета: Шаг 3 из 3', False);

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT invoice_score.invoice_score_id, score_cod, score_date, currency_id, tax_rate_id, inf_obj_name,');
//  Query.SQL.Add('summa = ROUND(SUM(cost_with_nds) * dbo.func_GetExchangeNew_Period(3, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add('summa = ROUND(score_sum * dbo.func_GetExchangeNew_Period(3, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, score_date, 0), 2)');
  Query.SQL.Add(', invoice_score.score_doc_type_name');
  Query.SQL.Add('FROM invoice_score');
  Query.SQL.Add('JOIN invoice_score_table ON invoice_score.invoice_score_id = invoice_score_table.invoice_score_id');
  Query.SQL.Add('LEFT JOIN inf_obj ON tax_rate_id = inf_obj_id');
  Query.SQL.Add('WHERE type_invoice_score = 0 AND set_clearing = 1 AND set_avance = 0');
  Query.SQL.Add('AND contract_id = :contract_id');
  Query.SQL.Add('AND score_period_date BETWEEN :date_begin AND :date_end');
  Query.SQL.Add('GROUP BY invoice_score.invoice_score_id, score_cod, score_date, score_sum, currency_id, exchange_val_USD, exchange_val_CHF, exchange_val_EUR, tax_rate_id, inf_obj_name, invoice_score.score_doc_type_name');
  Query.SQL.Add('ORDER BY invoice_score.invoice_score_id, tax_rate_id');
  Query.Parameters.ParamByName('contract_id').Value := SP_Agree.FieldByName('contract_id').AsInteger;
  Query.Parameters.ParamByName('date_begin').Value := StartOfTheMonth(retActSettings[3][1]);
  Query.Parameters.ParamByName('date_end').Value := EndOfTheMonth(retActSettings[3][2]);
  Query.Open;

  while not Query.Eof do begin
    exWks.Rows[IntToStr(9 + recNo)].Insert;
    exWks.Rows[IntToStr(8 + recNo)].Copy;
    exWks.Rows[IntToStr(9 + recNo)].PasteSpecial(1);

    if Query.FieldByName('score_doc_type_name').IsNull then
      exWks.Range['B' + IntToStr(8 + recNo)].Value := 'счет-фактура (возмещение расходов)'
    else
      exWks.Range['B' + IntToStr(8 + recNo)].Value := Query.FieldByName('score_doc_type_name').AsString;
    exWks.Range['C' + IntToStr(8 + recNo)].Value := Query.FieldByName('score_cod').AsString;
    exWks.Range['D' + IntToStr(8 + recNo)].Value := Query.FieldByName('score_date').Value;
    exWks.Range['F' + IntToStr(8 + recNo)].Value := Query.FieldByName('summa').Value;

    Query.Next;
    inc(recNo);
  end;
  Query.Free;

  if (recNo <> 1) then exWks.Rows[IntToStr(8 + recNo)].Delete
  else recNo := recNo + 1;

  exWks.Rows[IntToStr(8 + recNo)].Delete;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, '', NULL);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton55Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Q                   : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;

  str_expeditor       : array [1..2] of string;

  cod_shablon         : integer;

  contract_agent_id   : integer;
  contract_agent_cod  : string;
  firm_agent_name     : string;
  contract_agent_date : TDate;
begin
  cod_shablon := TComponent(Sender).Tag;
  //108 = 'Акт по расходам (возмещение)(СТС) = СТС №2'

  if SP_Agree.Eof then exit;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  // Выбор контракта подрядчика
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_id = contract_agent_id, contract_cod = contract_agent_cod, firm_customer_name = firm_agent_name');
  Q.SQL.Add('FROM view_shaping_rate');
  Q.SQL.Add('WHERE bargain_id in (' + str_bargain_id + ')');
  Q.Open;

  contract_agent_id := -9;
  if Q.RecordCount = 1 then contract_agent_id  := Q.FieldByName('contract_id').AsInteger;
  if Q.RecordCount > 1 then begin
    fmFilter := TfmFilter.Create(0, Q, 'contract_id', 'contract_cod', 'firm_customer_name');
    fmFilter._SetContract4FactIncChoose := True;
    if fmFilter.ShowModal = mrOk then contract_agent_id := fmFilter.GetId;
    fmFilter.Free;
  end;
  Q.Free;

  if contract_agent_id = -9 then begin
    Screen.Cursor := crDefault;
    Application.MessageBox('Не выбран подрядчик', 'ВНИМАНИЕ', MB_OK);
    Exit;
  end;

  // --- данные контракта подрядчика -----
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT contract_cod, date_begin, firm_customer_name_full ');
  Q.SQL.Add('FROM view_contract WHERE contract_id = ' + IntToStr(contract_agent_id));
  Q.Open;
  str_expeditor[1]    := 'Заказчик';
  str_expeditor[2]    := 'Исполнитель';
  contract_agent_cod  := Q.FieldByName('contract_cod').AsString;
  contract_agent_date := Q.FieldByName('date_begin').AsDateTime;
  firm_agent_name     := Q.FieldByName('firm_customer_name_full').AsString;
  Q.Free;

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, 0, contract_agent_id);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['B3'].Value := 'по договору оказания услуг № ' + contract_agent_cod + ' от ' + FormatDateTime('dd.mm.yyyy', contract_agent_date) + 'г.';
  exWks.Range['K5'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B7'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + firm_agent_name + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, вместе именуемые "Стороны", подписали настоящий Отчет о следующем:';

  case cod_shablon of
    108:begin
          exWks.Range['B9'].Value := '"' + str_expeditor[1] + '" понес расходы, связанные с подготовкой цистерн ' +
                                     'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г., ' +
                                     'подлежащие возмещению, согласно Приложению № 148 от 31.12.2009г. ' +
                                     'к Договору № ' + contract_agent_cod + ' от ' + FormatDateTime('dd.mm.yyyy', contract_agent_date) + 'г. ' +
                                     'Данные расходы приведены в таблице:';
        end;
  end;

  exWks.Range['C19'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['C26'].Value := firm_agent_name;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['H13'].Value := VarToStr(retActSettings[7][1]);
    exWks.Range['H14'].Value := VarToStr(retActSettings[7][1]);
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B9']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  case cod_shablon of
    108: SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  end;
  SP_Balans_Detail.Parameters.Refresh;
//  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := SP_Agree.FieldByName('contract_id').Value; // передаем контракт клиента
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := contract_agent_id; // передаем контракт подрядчика
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(13 + recNo)].Insert;
    exWks.Rows[IntToStr(12 + recNo)].Copy;
    exWks.Rows[IntToStr(13 + recNo)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(12 + recNo)].Value := recNo;
    exWks.Range['C' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks.Range['D' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('type_kargo_name').AsString;
    exWks.Range['E' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;

    exWks.Range['K' + IntToStr(12 + recNo)].Value := -(SP_Balans_Detail.FieldByName('summa').Value + SP_Balans_Detail.FieldByName('add').Value);

    if SP_Balans_Detail.FieldByName('num_vagon').AsString = '' then
      exWks.Range['E' + IntToStr(12 + recNo) + ':G' + IntToStr(12 + recNo)].ClearContents;

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(12 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(12 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(12 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;

  // Сумма пропистью
  exWks.Range['B' + IntToStr(14 + recNo)].Value := 'Общая сумма понесенных расходов ' + VarToStr(retActSettings[12][1]) + ' составила: ';
  exWks.Range['B' + IntToStr(14 + recNo)].Value := exWks.Range['B' + IntToStr(14 + recNo)].Value + exWks.Range['I' + IntToStr(12 + recNo)].Text + ' ' + exWks.Range['H13'].Text;
  exWks.Range['B' + IntToStr(14 + recNo)].Value := exWks.Range['B' + IntToStr(14 + recNo)].Value + ' (' + GetSumScript_RUS(FloatToStr(abs(exWks.Range['I' + IntToStr(12 + recNo)].Value)), retActSettings[7][0]) + ')';
  exWks.Range['B' + IntToStr(14 + recNo)].Value := exWks.Range['B' + IntToStr(14 + recNo)].Value + ', кроме того НДС ';
  exWks.Range['B' + IntToStr(14 + recNo)].Value := exWks.Range['B' + IntToStr(14 + recNo)].Value + exWks.Range['J' + IntToStr(12 + recNo)].Text + ' ' + exWks.Range['H13'].Text;
  exWks.Range['B' + IntToStr(14 + recNo)].Value := exWks.Range['B' + IntToStr(14 + recNo)].Value + ' (' + GetSumScript_RUS(FloatToStr(abs(exWks.Range['J' + IntToStr(12 + recNo)].Value)), retActSettings[7][0]) + ')';
  exWks.Range['B' + IntToStr(14 + recNo)].Value := exWks.Range['B' + IntToStr(14 + recNo)].Value + ', Итого с учетом НДС ';
  exWks.Range['B' + IntToStr(14 + recNo)].Value := exWks.Range['B' + IntToStr(14 + recNo)].Value + exWks.Range['K' + IntToStr(12 + recNo)].Text + ' ' + exWks.Range['H13'].Text;
  exWks.Range['B' + IntToStr(14 + recNo)].Value := exWks.Range['B' + IntToStr(14 + recNo)].Value + ' (' + GetSumScript_RUS(FloatToStr(abs(exWks.Range['K' + IntToStr(12 + recNo)].Value)), retActSettings[7][0]) + ')';
  AutoFitMergeCell(exWks.Range['B' + IntToStr(14 + recNo)]);

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['K' + IntToStr(12 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);

  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton5Click(Sender: TObject);
begin
  case Ftype_open_form of
   -9 : begin
          try
            Fstr_bargain_id := GetStrIdNumDoc(cxGrid1DBBandedTableView1bargain_id,',');
            if not dxBarButton2.Down then begin
              fmAgree2.dxBarButton2.Down := True;
              fmAgree2.dxBarButton2Click(nil);
            end;

            if not SP_shaping_rate_get_list.Eof then ModalResult := mrOk else begin
              Application.MessageBox('НЕ ВЫБРАНА СТАВКА СУБПОДРЯДЧИКА', 'ВНИМАНИЕ', MB_OK);
              ModalResult := mrNone;
            end;
          except
            ModalResult := mrOk;
          end;
        end;
    1 : begin
          Fstr_bargain_id := GetStrId(cxGrid1DBBandedTableView1bargain_id,',');
          ModalResult := mrOk;
        end;
  end;
end;

procedure TfmAgree2.dxBarButton70Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo_Vagon         : integer;
  recNo_Bargain       : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;

  PrintArea           : string;

  cod_shablon         : integer;
begin
  //120 = 'Акт оказанных услуг (Аренда)'

  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;

  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

/////// Вкладка АКТ

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['L3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B12'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B13'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['self_name'].Value     := VarToStr(retActSettings[12][1]);
  exWks.Range['customer_name'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B18'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E18'].Value := retActSettings[13][1];
  end else
    exWks.Range['B18:F18'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E20'].Value := retActSettings[13][4];
  end else
    exWks.Range['B20:F20'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['H18'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['K18'].Value := retActSettings[13][7];
  end else
    exWks.Range['H18:M18'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['H20'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['K20'].Value := retActSettings[13][10];
  end else
    exWks.Range['H20:M20'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['18:20'].Copy;
    exWks.Rows['22:24'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B22'].Value := 'Дата подписания';
    exWks.Range['B24'].Value := '"____" __________________ 201__';
    exWks.Range['J22'].Value := 'Дата подписания';
    exWks.Range['J24'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['H7'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['J7'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['K7'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['L7'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['M7'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Объединяем ячейки
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B13']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;

  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH_Arenda';

  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_rsvagon').Value    := True;
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // RS с вагонами
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Recordset := SP_Balans_Detail.NextRecordset(recNo_Vagon);
  // RS с вагонами

  // Перевозки
  recNo_Bargain := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(8 + recNo_Bargain)].Insert;
    exWks.Rows[IntToStr(7 + recNo_Bargain)].Copy;
    exWks.Rows[IntToStr(8 + recNo_Bargain)].PasteSpecial(1);

    if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
      exWks.Range['A' + IntToStr(7 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
    else // Доп. сбор.
      exWks.Range['A' + IntToStr(7 + recNo_Bargain)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(7 + recNo_Bargain)].Value := FormatDateTime('mmm yy', SP_Balans_Detail.FieldByName('date_period').AsDatetime);
    exWks.Range['C' + IntToStr(7 + recNo_Bargain)].Value := recNo_Bargain;
    exWks.Range['D' + IntToStr(7 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
    exWks.Range['E' + IntToStr(7 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('type_kontener_name').AsString;

    exWks.Range['F' + IntToStr(7 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('cnt').Value;
    exWks.Range['G' + IntToStr(7 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('cnt_days').Value;

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['I' + IntToStr(7 + recNo_Bargain)].Value := Query_NDS.FieldByName('nds_name').AsString;
//    if SP_Balans_Detail.FieldByName('bargain_nds_cod').IsNull then
//      exWks.Range['I' + IntToStr(7 + recNo_Bargain)].Value := 'Без НДС'
//    else
//      exWks.Range['I' + IntToStr(7 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString;

    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
    exWks.Range['H' + IntToStr(7 + recNo_Bargain)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
    exWks.Range['J' + IntToStr(7 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;
    exWks.Range['M' + IntToStr(7 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

    ShowTextMessage('Перевозки: Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + #10#13 + 'Вагоны: Осталось ' + IntToStr(Query_tmp.RecordCount), False);
    SP_Balans_Detail.Next;
    inc(recNo_Bargain);
  end;

  exWks.Rows[IntToStr(7 + recNo_Bargain)].Delete;
  if recNo_Bargain > 1 then
    exWks.Rows[IntToStr(7 + recNo_Bargain)].Delete
  else begin
    exWks.Rows[IntToStr(7 + recNo_Bargain)].ClearContents;
    recNo_Bargain := 2;
  end;

  SP_Balans_Detail.Free;
//  exWks.Range['A1'].Select;

/////// Вкладка ВАГОНЫ
  exWks := exWkb.WorkSheets[2];

  exWks.Range['B4'].Value := VarToStr(retActSettings[12][1]) + ' - ' + str_expeditor[1];
  exWks.Range['B5'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString + ' - ' + str_expeditor[2];

  AutoFitMergeCell(exWks.Range['B16']);

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['K7'].Value := 'Сумма (в т.ч. 18%), ' + VarToStr(retActSettings[7][1]);
  end;

  recNo_Vagon := 1;
  while not Query_tmp.Eof do begin
    exWks.Rows[IntToStr(9 + recNo_Vagon)].Insert;
    exWks.Rows[IntToStr(8 + recNo_Vagon)].Copy;
    exWks.Rows[IntToStr(9 + recNo_Vagon)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('fact_id').Value;
    exWks.Range['B' + IntToStr(8 + recNo_Vagon)].Value := FormatDateTime('mmm yy', Query_tmp.FieldByName('date_period').AsDatetime);
    exWks.Range['C' + IntToStr(8 + recNo_Vagon)].Value := recNo_Vagon;
    exWks.Range['D' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('service_kind').AsString;
    exWks.Range['E' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('num_vagon').AsString;

    exWks.Range['F' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('date_begin').Value;
    exWks.Range['G' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('date_end').Value;
    exWks.Range['H' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('cnt').Value;
    exWks.Range['I' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('cnt_days').Value;

    exWks.Range['J' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('rate').AsCurrency;
    exWks.Range['K' + IntToStr(8 + recNo_Vagon)].Value := Query_tmp.FieldByName('summa').AsCurrency;

    ShowTextMessage('Перевозки: Осталось 0' + #10#13 + 'Вагоны: Осталось ' + IntToStr(Query_tmp.RecordCount - Query_tmp.RecNo), False);
    Query_tmp.Next;
    inc(recNo_Vagon);
  end;

  exWks.Rows[IntToStr(8 + recNo_Vagon)].Delete;
  if recNo_Vagon > 1 then
    exWks.Rows[IntToStr(8 + recNo_Vagon)].Delete
  else begin
    exWks.Rows[IntToStr(8 + recNo_Vagon)].ClearContents;
    recNo_Vagon := 2;
  end;

  Query_tmp.Free;
  exWks.Select;
  exWks.Range['A1'].Select;

/////// Сохранение акта
  exWks := exWkb.WorkSheets[1];
  exWks.Select;
  exWks.Range['A1'].Select;
  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['M' + IntToStr(7 + recNo_Bargain)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton71Click(Sender: TObject);
begin
  UsersSettingModify(TComponent(Sender).Tag, TForm(self).Name, TcxControl(cxDBPivotGrid1), fmMain.Lis);
end;

procedure TfmAgree2.dxBarButton7Click(Sender: TObject);
var            i : integer;
  str_bargain_id : string;
begin
  str_bargain_id := '';
  for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1.GetColumnByFieldName('bargain_id').Index]);
  Delete(str_bargain_id, 1, 2);

//  fmAgreeFactInc := TfmAgreeFactInc.Create(Application, cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger);
  fmAgreeFactInc := TfmAgreeFactInc.Create(Application, str_bargain_id);
  if fmAgreeFactInc.SetFrahtFact() = mrOk then
    fmAgreeFactInc.ShowModal
  else
    fmAgreeFactInc.Close;
end;

procedure TfmAgree2.dxBarButton80Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo_Bargain       : integer;
  str_bargain_id      : string;
  str_tmp             : string;

  str_expeditor       : array [1..2] of string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 420 = 'Акт ВОХР (Афипский НПЗ, Вознаграждение)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTE_n_KARGOFROMFACT);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['acts_date'].Value := FormatDateTime('dd ' + array_month_balance[MonthOf(retActSettings[3][0])] + ' yyyy г.', retActSettings[3][0]);

  exWks.Range['B6'].Value := 'Мы, нижеподписавшиеся, представитель ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') +
                             ' ' + VarToStr(retActSettings[12][1]) + ' в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и представитель ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') +
                             ' ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ' в лице ' + VarToStr(retActSettings[5][2]) +
                             ', с другой стороны, составили настоящий акт о том' +
                             ', что за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. включительно' +
                             ' ' + str_expeditor[1] + ' оказал' +
                             ' Услуги за осуществление расчетов с ФГП "Ведомственная охрана железнодорожного транспорта РФ" (кратко - ФГП ВО ЖДТ РФ)' +
                             ' за услуги по сменному сопровождению и охране в пути следования Грузов, перевозимых железнодорожным транспортом по территории РФ,' +
                             ' в том числе - при задержках в пути  по предоставлению ЖД ПС и ТЭУ для перевозки грузов в пределах территории РФ' +
                             ' в соответствии с п. 1.1. Договора № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' +
                             #10'в том числе:';

  // Атовыравнивание по высоте
  AutoFitMergeCell(exWks.Range['B6']);

  exWks.Range['brief_name'].Value := 'Валюта договора ' + VartoStr(retActSettings[7][1]);

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('select distinct bargain.agreement_note, doc_blob.doc_describe, doc_blob.doc_image_date');
  Query_tmp.SQL.Add('from shaping_rate ');
  Query_tmp.SQL.Add('left join doc_blob ');
  Query_tmp.SQL.Add('on doc_blob.doc_id = shaping_rate.agreement_id');
  Query_tmp.SQL.Add('and doc_blob.doc_describe <> ''Договор''');
  Query_tmp.SQL.Add('where isnull(shaping_rate.agreement_note, doc_blob.doc_describe) is not null ');
  Query_tmp.SQL.Add('and shaping_rate.bargain_id in (' + str_bargain_id + ')');
  Query_tmp.SQL.Add('and shaping_rate.service_type = 0');
  Query_tmp.SQL.Add('order by  1, 3, 2');
  Query_tmp.Open;
  str_tmp := 'В графе 6 указывается стоимость услуг, предусмотренная';
  if (Query_tmp.EOF) or (Query_tmp.FieldByName('doc_describe').AsString = 'Договор') then begin
    str_tmp := str_tmp + ' настоящим договором';
  end else begin
    while not Query_tmp.Eof do begin
      if Query_tmp.RecNo = 1 then
        str_tmp := str_tmp + ''
      else if Query_tmp.RecNo <> Query_tmp.RecordCount then
        str_tmp := str_tmp + ','
      else
        str_tmp := str_tmp + ' и';

      if not Query_tmp.FieldByName('agreement_note').IsNull then
        str_tmp := str_tmp + Query_tmp.FieldByName('agreement_note').AsString
      else
        str_tmp := str_tmp + Query_tmp.FieldByName('doc_describe').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', Query_tmp.FieldByName('doc_image_date').AsDateTime) + 'г.';

      Query_tmp.Next;
    end;
    str_tmp := str_tmp + ' к настоящемум договору';
  end;
  exWks.Range['B19'].Value := str_tmp;
  Query_tmp.Free;

  if SP_Agree.FieldByName('bargain_nds_cod').IsNull then begin
    exWks.Range['B15'].Value := SP_Agree.FieldByName('bargain_nds_name').AsString;
    exWks.Range['B22'].Value := null;
    exWks.Range['D22'].Value := null;
  end else begin
    exWks.Range['B15'].Value := 'НДС по ставке ' + SP_Agree.FieldByName('bargain_nds_name').AsString;
    exWks.Range['B22'].Value := 'в т.ч. НДС по ставке ' + SP_Agree.FieldByName('bargain_nds_name').AsString;
  end;

  exWks.Range['B25'].Value := str_expeditor[2] + ' по объему, качеству и срокам оказания услуг претензий к ' + ReplaceStr(str_expeditor[1] + 'у', 'ьу', 'ю') + ' не имеет';

  exWks.Range['B31'].Value := VarToStr(str_expeditor[1]);
  exWks.Range['B32'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['K31'].Value := VarToStr(str_expeditor[2]);
  exWks.Range['K32'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;


  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B34'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['C35'].Value := VarToStr(retActSettings[13][1]);
  end else
    exWks.Range['B34:G35'].ClearContents;

  if retActSettings[13][8] = True then begin
    exWks.Range['K34'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['M35'].Value := VarToStr(retActSettings[13][7]);
  end else
    exWks.Range['K34:P35'].ClearContents;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;

  SP_Balans_Detail.ProcedureName := 'sp_act_report_AfipskiyNPZ_VOHR;1';

  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@type_result'       ).Value := 1;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'       ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'       ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Перевозки
  recNo_Bargain := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(12 + recNo_Bargain)].Insert;
    exWks.Rows[IntToStr(11 + recNo_Bargain)].Copy;
    exWks.Rows[IntToStr(12 + recNo_Bargain)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
    exWks.Range['C' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString;
    exWks.Range['D' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('node_begin_roadabbr').AsString;
    exWks.Range['E' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('node_end_name').AsString;
    exWks.Range['F' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('node_end_roadabbr').AsString;
    exWks.Range['G' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString;
    exWks.Range['H' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('node_begin_roadabbr').AsString;
    exWks.Range['I' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('node_end_name').AsString;
    exWks.Range['J' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('node_end_roadabbr').AsString;

    exWks.Range['K' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('cnt_fact').Value;
    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks.Range['L' + IntToStr(11 + recNo_Bargain)].Value := null
    else
      exWks.Range['L' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    exWks.Range['M' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('rep_rate_not_nds').AsCurrency;
    exWks.Range['N' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('rep_sum_not_nds').AsCurrency;
    exWks.Range['O' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('rep_sum').AsCurrency - SP_Balans_Detail.FieldByName('rep_sum_not_nds').AsCurrency;
    exWks.Range['P' + IntToStr(11 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('rep_sum').AsCurrency;

    ShowTextMessage('Перевозки: Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
    inc(recNo_Bargain);
  end;

  exWks.Rows[IntToStr(11 + recNo_Bargain)].Delete;
  if recNo_Bargain > 1 then
    exWks.Rows[IntToStr(11 + recNo_Bargain)].Delete
  else begin
    exWks.Rows[IntToStr(11 + recNo_Bargain)].ClearContents;
    recNo_Bargain := 2;
  end;

  // Сумма прописью
  exWks.Range['str_acts_sum'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum'].Value)), retActSettings[7][0]);
  exWks.Range['str_acts_sum_nds'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum_nds'].Value)), retActSettings[7][0]);

  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton81Click(Sender: TObject);
var  str_bargain_id : string;
             i, row : integer;
                 SP : TADOStoredProc;
exApp, exWkb, exWks : Variant;
  ClientDS_distance : TClientDataSet;
             d1, d2 : TDateTime;
begin
  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  fmPeriod := TfmPeriod.Create(Application, Fdate1, Fdate2, 1);
  if fmPeriod.ShowModal=mrOK then begin
    d1 := fmPeriod._GetDateBegin;
    d2 := fmPeriod._GetDateEnd;
  end else exit;

  SP := TADOStoredProc.Create(nil);
  SP.Connection := Fconnect;
  SP.ProcedureName := 'sp_Report_UTS';
  SP.Parameters.Refresh;
  SP.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  try
    SP.Open;
  except
    SP.Free;
    exit;
  end;


  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, 135));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  exWks.Range['C1'].Value := 'ОТЧЕТ О РАСХОДАХ ПОДЛЕЖАЩИХ ВОЗМЕЩЕНИЮ №';



  exWks.Range['C2'].Value := 'по Договору №' + SP.FieldByName('contract_cod').AsString + ' от ' + LowerCase(FormatDateTime('dd.mm.yyyy', SP.FieldByName('contract_date_begin').AsDateTime)) + 'г.' + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', d1) + 'г. по ' + FormatDateTime('dd.mm.yyyy', d2) + 'г.';

  exWks.Range['O3'].Value := FormatDateTime('dd.mm.yyyy', d2) + 'г.';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', d1) + 'г. по ' + FormatDateTime('dd.mm.yyyy', d2) + 'г. Исполнителем понесены затраты за возврат порожних вагонов от станции ' +
                             ' выгрузки до станции назначения отличной от станции предшествующей погрузки  в соответствии с  с пунктом 3 Приложения № 1 от 30.12.2009 г. к ' +
                             'Договору №' + SP.FieldByName('contract_cod').AsString + ' от ' + LowerCase(FormatDateTime('dd.mm.yyyy', SP.FieldByName('contract_date_begin').AsDateTime)) + 'г.';

  exWks.Range['B22'].Value := 'Настоящий Отчет составлен в двух экземплярах для каждой из Сторон и является неотъемлемой частью договора № ' + SP.FieldByName('contract_cod').AsString + ' от ' + LowerCase(FormatDateTime('dd.mm.yyyy', SP.FieldByName('contract_date_begin').AsDateTime)) + 'г.';

  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  row := 12;
  while not SP.Eof do begin
    exWks.Rows[IntToStr(row + 1)].Insert;
    exWks.Rows[IntToStr(row + 0)].Copy;
    exWks.Rows[IntToStr(row + 1)].PasteSpecial(1);

    exWks.Range['B' + IntToStr(row)].Value := SP.RecNo + 1;
    exWks.Range['C' + IntToStr(row)].Value := SP.FieldByName('service_kind').AsString;

    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP.FieldByName('node_begin_cod').AsString, SP.FieldByName('node_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP.FieldByName('node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP.FieldByName('node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, False, SP.FieldByName('date_from_to').AsDateTime);
      ClientDS_distance.Post;
    end;
    exWks.Range['D' + IntToStr(row)].Value := ClientDS_distance.FieldByName('distance').Value;
    exWks.Range['E' + IntToStr(row)].Value := SP.FieldByName('kargoETSNG_name').AsString;
    exWks.Range['F' + IntToStr(row)].Value := SP.FieldByName('num_vagon').AsString;
    exWks.Range['G' + IntToStr(row)].Value := SP.FieldByName('date_from_to').AsDateTime;
    exWks.Range['H' + IntToStr(row)].Value := SP.FieldByName('num_document').AsString;
    exWks.Range['I' + IntToStr(row)].Value := SP.FieldByName('node_begin_name').AsString;
    exWks.Range['J' + IntToStr(row)].Value := SP.FieldByName('node_end_name').AsString;

    exWks.Range['K' + IntToStr(row)].Value := SP.FieldByName('pr_num_document').AsString;
    exWks.Range['L' + IntToStr(row)].Value := SP.FieldByName('pr_date_from_to').AsString;
    exWks.Range['M' + IntToStr(row)].Value := SP.FieldByName('pr_node_end_name').AsString;
    if SP.FieldByName('bargain_nds_cod').AsString = '18' then
      exWks.Range['N' + IntToStr(row)].Value := '=ROUND(RC[2]/1.18,2)'
    else
      exWks.Range['N' + IntToStr(row)].Value := '=ROUND(RC[2],2)';

    exWks.Range['P' + IntToStr(row)].Value := SP.FieldByName('client_sum').AsFloat;
    exWks.Range['Q' + IntToStr(row)].Value := SP.FieldByName('fact_num').AsString;
    if not SP.FieldByName('fact_date').IsNull then
      exWks.Range['R' + IntToStr(row)].Value := SP.FieldByName('fact_date').AsDateTime;

    row := row + 1;

    ShowTextMessage('Осталось вагонов ' + IntToStr(SP.RecordCount - SP.RecNo), False);
    SP.Next;
  end;

  exWks.Range['F' + IntToStr(row + 3)].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['E' + IntToStr(row + 3)].Value)), 3);
  exWks.Range['F' + IntToStr(row + 4)].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['E' + IntToStr(row + 4)].Value)), 3);
  exWks.Rows[IntToStr(row)].Delete;
  exWks.Rows[IntToStr(row)].Delete;





  SP.Free;
  exWks.Range['A1'].Select;
  exApp.CutCopyMode := False;

  ClientDS_distance.Free;
  Screen.Cursor := crDefault;
  ShowTextMessage;
  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton84Click(Sender: TObject);
var
  retActSettings      : Variant;
  exApp, exWkb, exWks : Variant;
  Query_tmp           : TADOQuery;
  str_bargain_id      : string;
  str_expeditor       : array [1..2] of string;
  cod_shablon         : integer;
  norm_sum  : currency;
  norm_days : integer;
  norm_nds  : currency;
  i : integer;
  str_num_vagon, s : string;
  date_begin, date_end : TDateTime;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 366 = 'Простои на станции выгрузки'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT * FROM view_fact WHERE set_main = 1 and bargain_id in (' + str_bargain_id + ')');
  Query_tmp.Open;
  str_num_vagon := '';
  date_begin := Query_tmp.FieldByName('date_from_to').AsDateTime;
  date_end   := Query_tmp.FieldByName('date_from_to').AsDateTime;
  while not Query_tmp.Eof do begin
    str_num_vagon := str_num_vagon + ',' + Query_tmp.FieldByName('num_vagon').AsString;

    if not Query_tmp.FieldByName('date_from_to').IsNull then begin
      if date_begin > Query_tmp.FieldByName('date_from_to').AsDateTime then date_begin := Query_tmp.FieldByName('date_from_to').AsDateTime;
      if date_end < Query_tmp.FieldByName('date_from_to').AsDateTime then date_end := Query_tmp.FieldByName('date_from_to').AsDateTime;
    end;

    if not Query_tmp.FieldByName('datpr').IsNull then begin
      if date_begin > Query_tmp.FieldByName('datpr').AsDateTime then date_begin := Query_tmp.FieldByName('datpr').AsDateTime;
      if date_end < Query_tmp.FieldByName('datpr').AsDateTime then date_end := Query_tmp.FieldByName('datpr').AsDateTime;
    end;


    Query_tmp.Next;
  end;
  Delete(str_num_vagon, 1, 1);
  Query_tmp.Free;

  date_begin := IncDay(date_begin, -2);
  date_end := IncDay(date_end, 2);

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, -9, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE or ACT_SET_DATEDELIVERY);
  if retActSettings[0] = -9 then
    exit;


  date_begin := retActSettings[3][1];
  date_end   := retActSettings[3][2];

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exApp.DisplayAlerts := False;
//  exApp.Visible := True;

  exApp.ActiveWindow.View := 1;
  exApp.ScreenUpdating := False;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT c.norm_days, c.norm_sum_without_nds, ISNULL(CAST(i.inf_obj_cod AS money), 0) AS norm_nds FROM contract_norm c ');
  Query_tmp.SQL.Add('INNER JOIN inf_obj i ON c.nds_id = i.inf_obj_id ');
  Query_tmp.SQL.Add('WHERE ' + DateToSQL(date_begin) + ' between c.date_begin and isnull(c.date_end, getdate()) and c.contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  if Query_tmp.RecordCount > 0 then begin
    norm_days := Query_tmp.FieldByName('norm_days').AsInteger;
    norm_sum  := Query_tmp.FieldByName('norm_sum_without_nds').AsCurrency;
    norm_nds  := Query_tmp.FieldByName('norm_nds').AsCurrency;
  end else begin
    norm_days := 2;
    norm_sum  := 0;
    norm_nds  := 0;
  end;
  Query_tmp.Free;

  if cod_shablon = 1366 then
    PrintReport1366(retActSettings, exWkb, cod_shablon, Fconnect, str_num_vagon, date_begin, date_end, '', '', '', norm_days, norm_sum, norm_nds)
  else
    PrintReport366_367(retActSettings, exWkb, cod_shablon, Fconnect, str_num_vagon, date_begin, date_end, '', '', '', norm_days, norm_sum, norm_nds);


  exWks := exWkb.WorkSheets[1];
  exWks.Select;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  exApp.ScreenUpdating := True;
  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton8Click(Sender: TObject);
begin
  cxPageControl2.Visible := dxBarButton8.Down;
  Splitter5.Visible      := dxBarButton8.Down;

  if (dxBarButton8.Down) then begin
    RefreshProcedureDetail;
  end;
end;

procedure TfmAgree2.dxBarButton90Click(Sender: TObject);
begin
  if Query_Acts.RecordCount <= 0 then begin
    Application.MessageBox('Нет выделенных записей.', 'Внимание', MB_OK + MB_ICONWARNING);
    exit;
  end;

  GetActsView(cxGrid5DBBandedTableView1acts_id.DataBinding.Field.AsInteger, Fconnect, False);
end;

procedure TfmAgree2.dxBarButton92Click(Sender: TObject);
var sp_shaping_rate_block : TADOStoredProc;
                   i : integer;
 date_period_finance : TDateTime;
                   Q : TADOQuery;
        dt, dt2, dt3 : TDateTime;
              cxGrid : TcxGridDBBandedTableView;
begin
  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT TOP 1 cast(cast(year(dateadd(mm,1,max(finance_date))) as varchar)+'+
                      'RIGHT(''0''+cast(month(dateadd(mm,1,max(finance_date))) as varchar),2)+''01'' as datetime) AS finance_date '+
                      'FROM view_finance_period ORDER BY finance_date DESC');
  Q.Open;

  dt := Q.FieldByName('finance_date').AsDateTime;

  StoreRegistryDate(rgLoad, '\Software\Lis1\DateTime\FinDate', dt2, dt3);

  if dt2 > dt then dt := dt2;


  fmPeriod := TfmPeriod.Create(Application, dt, dt, 3);
  if fmPeriod.ShowModal = mrOk then begin
    Screen.Cursor := crHourglass;
    date_period_finance := fmPeriod._GetMonth;

    if dt > date_period_finance then begin
      if Application.MessageBox(PChar('Финансовый месяц "'+ FormatDateTime('mmmm yyyy', date_period_finance) + '" закрыт.'+#13+'Вы уверены?'), 'Внимание', MB_OKCANCEL) = IDCANCEL then begin
        Screen.Cursor := crDefault;
        exit;
      end;
    end;

    case cxPageControl1.ActivePageIndex of
      0 : cxGrid := cxGrid7DBBandedTableView1;
      1 : cxGrid := cxGrid3DBBandedTableView1
    end;
    sp_shaping_rate_block := TADOStoredProc.Create(Application);
    sp_shaping_rate_block.Connection := Fconnect;
    sp_shaping_rate_block.ProcedureName := 'sp_shaping_rate_block';
    sp_shaping_rate_block.Parameters.Refresh;
    for i := 0 to cxGrid.Controller.SelectedRowCount-1 do begin
      try
        sp_shaping_rate_block.Parameters.ParamByName('@shaping_rate_id'    ).Value := cxGrid.Controller.SelectedRows[i].Values[cxGrid.GetColumnByFieldName('shaping_rate_id').Index];
        sp_shaping_rate_block.Parameters.ParamByName('@date_period_finance').Value := date_period_finance;
        sp_shaping_rate_block.ExecProc;
      except
      end;
    end;
    sp_shaping_rate_block.Free;


    StoreRegistryDate(rgSave, '\Software\Lis1\DateTime\FinDate', date_period_finance, date_period_finance);

    RefreshProcedureDetail();
//    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
    Screen.Cursor := crDefault;
  end;

  Q.Free;
end;

procedure TfmAgree2.dxBarButton93Click(Sender: TObject);
var              i : integer;
  sp_shaping_rate_block : TADOStoredProc;
begin
  if Application.MessageBox('Вы точно уверены?', 'Внимание', MB_OKCANCEL) = ID_OK then begin;
    Screen.Cursor := crHourglass;

    sp_shaping_rate_block := TADOStoredProc.Create(Application);
    sp_shaping_rate_block.Connection := Fconnect;
    sp_shaping_rate_block.ProcedureName := 'sp_shaping_rate_block';
    sp_shaping_rate_block.Parameters.Refresh;
    for i := 0 to cxGrid7DBBandedTableView1.Controller.SelectedRowCount-1 do begin
      try
        sp_shaping_rate_block.Parameters.ParamByName('@shaping_rate_id'    ).Value := cxGrid7DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid7DBBandedTableView1.GetColumnByFieldName('shaping_rate_id').Index];
        sp_shaping_rate_block.Parameters.ParamByName('@date_period_finance').Value := null;
        sp_shaping_rate_block.ExecProc;
      except
      end;
    end;
    sp_shaping_rate_block.Free;
    RefreshProcedureDetail();
  end;
end;

procedure TfmAgree2.dxBarButton94Click(Sender: TObject);
var str_contract_id : string;
                  i : integer;
begin
  str_contract_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
    cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Focused := True;
    str_contract_id := str_contract_id + ', ' + IntToStr(cxGrid1DBBandedTableView1contract_id.DataBinding.Field.AsInteger);
  end;
  Delete(str_contract_id, 1, 2);

  for i:=0 to fmMain.MDIChildCount-1 do
    if (fmMain.MDIChildren[i].ClassName = 'TfmFirmBalance') then begin
      if TfmFirmBalance(fmMain.MDIChildren[i])._GetTypeBalance = TControl(Sender).Tag then begin
        fmMain.MDIChildren[i].Free;
        Break;
      end;
    end;
  fmFirmBalance := TfmFirmBalance.Create(Application, TControl(Sender).Tag, False);
  fmFirmBalance._SetBalance(Fdate1, Fdate2, str_contract_id);
end;

procedure TfmAgree2.dxBarButton95Click(Sender: TObject);
begin
  SetRecordColor('acts_id', cxGrid5DBBandedTableView1, 'ACTS', TComponent(Sender).Tag = 1);
  RefreshQueryGrid(cxGrid5DBBandedTableView1, cxGrid5DBBandedTableView1.DataController.KeyFieldNames);
end;

procedure TfmAgree2.dxBarButton97Click(Sender: TObject);
begin
  fmActs := TfmActs.Create(Application, False);
  fmActs._SetFilterActs(-9, Fdate1, Fdate2, cxGrid5DBBandedTableView1acts_id.DataBinding.Field.AsString, -9, True);
  fmActs.ShowModal;
  fmActs.Free;
end;


procedure TfmAgree2.N8Click(Sender: TObject);
var              i : integer;
  SP_BargainDelete : TADOStoredProc;
begin
  if Application.MessageBox(PChar('Вы точно уверены, что хотите удалить выделенные перевозки?'+#10#13+'Будут удалены все ставки и заявки по этой перевозке, факт останется в неразнесённом.'),'Внимание',MB_OKCANCEL) = ID_OK then begin
      Screen.Cursor := -11;

      SP_BargainDelete := TADOStoredProc.Create(nil);
      SP_BargainDelete.Connection := Fconnect;
      SP_BargainDelete.ProcedureName := 'sp_bargain_modify;1';

      for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRowCount - 1 do begin

        SP_BargainDelete.Close;
        SP_BargainDelete.Parameters.Refresh;
        SP_BargainDelete.Parameters.ParamByName('@bargain_id' ).Value := cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index];
        SP_BargainDelete.Parameters.ParamByName('@type_action').Value := 2;
        try
          SP_BargainDelete.ExecProc;
          ShowTextMessage('Осталось '+IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRowCount - i)+' записей...', False);
        except
        end;
      end;

      SP_BargainDelete.Free;
      RefreshProcedure(-9,-9);
      ShowTextMessage;
  end;
end;

procedure TfmAgree2.N96Click(Sender: TObject);
begin
  cxGrid2DBBandedTableView1.ViewData.Expand(True);
end;

procedure TfmAgree2.N98Click(Sender: TObject);
begin
  cxGrid2DBBandedTableView1.ViewData.Collapse(True);
end;

procedure TfmAgree2.N99Click(Sender: TObject);
begin
  case cxPageControl1.ActivePageIndex of
    0 : PrintFactByAgreeNew(GetStrId(cxGrid1DBBandedTableView1bargain_id, ','), Fconnect, usr_pwd);
    1 : PrintFactByAgreeNew(GetStrId(cxGrid3DBBandedTableView1bargain_id, ','), Fconnect, usr_pwd);
  end;
end;

procedure TfmAgree2.N9Click(Sender: TObject);
var  SP_BargainCorrectRestore : TADOStoredProc;
begin
  if Application.MessageBox(PChar('Если с корр. перевозкой производились какие-либо действия то, необходимо заново произвести:'+#13+
                                  ' - сверку с подрядчиком '+#13+
                                  ' - сформировать фрах. карточку '+#13+
                                  'Вы уверены?')  , 'Внимание', MB_OKCANCEL) = ID_OK then begin
    Screen.Cursor := crHourglass;
    SP_BargainCorrectRestore := TADOStoredProc.Create(Application);
    SP_BargainCorrectRestore.Connection := Fconnect;
    SP_BargainCorrectRestore.CommandTimeout := 400;
    SP_BargainCorrectRestore.ProcedureName  := 'sp_Bargain_Correct_Restore;1';
    SP_BargainCorrectRestore.Parameters.Refresh;
    SP_BargainCorrectRestore.Parameters.ParamByName('@restore_bargain_id').Value := -9;
    SP_BargainCorrectRestore.Parameters.ParamByName('@bargain_correct_group').Value := cxGrid1DBBandedTableView1bargain_correct_group.DataBinding.Field.AsInteger;
    try
      SP_BargainCorrectRestore.ExecProc;
    except
    end;
    RefreshProcedure(SP_BargainCorrectRestore.Parameters.ParamByName('@restore_bargain_id').Value,-9);
    SP_BargainCorrectRestore.Free;
  end;
end;

procedure TfmAgree2.Act_basic_SFHClick(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;
  ClientDS_distance   : TClientDataSet;
  Query_Currency      : TADOQuery;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 58 = 'Акт оказанных услуг (RUS)'
  // 441 = 'Акт оказанных услуг (Вознаграждение, НЗНП)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDVAGON or ACT_SET_ADDSIGN or ACT_SET_OTHER_EXCHANGE or ACT_SET_PRINTCOMMENT or ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['P3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['M18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:G20'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E22'].Value := retActSettings[13][4];
  end else
    exWks.Range['B22:G22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['M20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['P20'].Value := retActSettings[13][7];
  end else
    exWks.Range['M20:Q20'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['M22'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['P22'].Value := retActSettings[13][10];
  end else
    exWks.Range['M22:Q22'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['20:22'].Copy;
    exWks.Rows['24:26'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B24'].Value := 'Дата подписания';
    exWks.Range['B26'].Value := '"____" __________________ 201__';
    exWks.Range['M24'].Value := 'Дата подписания';
    exWks.Range['M26'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['L10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['N10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['O10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['P10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['Q10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
    if (cod_shablon = 441) then
      exWks.Range['Q10'].Value := 'сумма в т.ч. НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Валюта эквивалента
  if (retActSettings[6][7] <> null) then begin
    // Валюта отчета
    if retActSettings[7][0] <> 3 then begin
      exWks.Range['R9'].Value := 'Курс ' + VarToStr(retActSettings[7][1]);
    end else begin
      exWks.Columns['R:R'].Hidden := True; // Если рубли, то скрываем столбец
    end;
    // Валюта эквивалента
    if retActSettings[6][7] <> 3 then begin
      Query_Currency := TADOQuery.Create(nil);
      Query_Currency.Connection := Fconnect;
      Query_Currency.SQL.Add('SELECT * FROM currency');
      Query_Currency.Open;
      Query_Currency.Locate('currency_id', retActSettings[6][7], []);

      exWks.Range['S9'].Value := 'Курс '         + Query_Currency.FieldByName('brief_name').AsString;
      exWks.Range['T9'].Value := 'Cумма с НДС, ' + Query_Currency.FieldByName('brief_name').AsString;
      Query_Currency.Free;
    end else begin
      exWks.Columns['S:S'].Hidden := True; // Если рубли, то скрываем столбец
    end;
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['I10'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Особые условия
  if (retActSettings[6][9] = True) then begin
    exWks.Rows['15'].Insert;
    exWks.Rows['16'].Copy;
    exWks.Rows['15'].PasteSpecial(1);

    exWks.Range['B15'].Value := ReplaceStr(VarToStr(retActSettings[11]), #13, '');
    AutoFitMergeCell(exWks.Range['B15']);
  end;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'        ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'      ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'         ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'           ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'        ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'       ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
//  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact' ).Value := retActSettings[6][6];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    if (SP_Balans_Detail.FieldByName('bargain_correct_type').AsInteger = 1) or (SP_Balans_Detail.FieldByName('summa').AsCurrency > 0) then begin
      exWks.Rows[IntToStr(11 + recNo)].Insert;
      exWks.Rows[IntToStr(10 + recNo)].Copy;
      exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

      if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
        exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
      else // Доп. сбор.
        exWks.Range['A' + IntToStr(10 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
      exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
      if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
      else
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;

      exWks.Range['H' + IntToStr(10 + recNo)].Value := null;
      if exWks.Range['H:H'].EntireColumn.Hidden = False then begin
        // Заполняем, если колонка не спрятана
        // Расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('node_begin_cod').AsString, SP_Balans_Detail.FieldByName('node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_period').AsDatetime);
          ClientDS_distance.Post;
        end;
        exWks.Range['H' + IntToStr(10 + recNo)].Value := ClientDS_distance.FieldByName('distance').Value;
      end;

      exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['J' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['K' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['K' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['M' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['L' + IntToStr(10 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      exWks.Range['N' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;

      exWks.Range['Q' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

      // Валюта эквивалента
      if retActSettings[6][7] <> Null then begin
        case retActSettings[7][0] of
          1 : exWks.Range['R' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_USD_val').AsFloat;
          3 : exWks.Range['R' + IntToStr(10 + recNo)].Value := 1;
          5 : exWks.Range['R' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_CHF_val').AsFloat;
          6 : exWks.Range['R' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_EUR_val').AsFloat;
        end;
        case retActSettings[6][7] of
          1 : exWks.Range['S' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_USD_val').AsFloat;
          3 : exWks.Range['S' + IntToStr(10 + recNo)].Value := 1;
          5 : exWks.Range['S' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_CHF_val').AsFloat;
          6 : exWks.Range['S' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_EUR_val').AsFloat;
        end;
      end;

      inc(recNo);
    end;

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  // Валюта эквивалента
  if retActSettings[6][7] = Null then
    exWks.Columns['R:T'].Delete;

  exWks.Select;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['Q' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.OpenAgree4List(Adate1, Adate2 : TDate; set_finance : boolean; str_bargain_id : string);
begin
  Screen.Cursor := crHourglass;

  // Финансовый месяц
  dxBarButton6.Down := set_finance;

  if dxBarButton6.Down then begin
    dxBarButton6.ImageIndex := 25;
    dxBarManager1Bar1.Color := $00D4F0D4;
    dxBarButton6.Hint := 'Сменить режим просмотра на ПЕРЕВОЗОЧНЫЙ период';
    dxBarButton3.Caption := 'Финансовый месяц';
    dxBarButton4.Caption := 'Финансовый период';
  end else begin
    dxBarButton6.ImageIndex := 21;
    dxBarManager1Bar1.Color := clDefault;
    dxBarButton6.Hint := 'Сменить режим просмотра на ФИНАНСОВЫЙ период';
    dxBarButton3.Caption := 'Месяц перевозки';
    dxBarButton4.Caption := 'Период перевозки';
  end;

  // период
  Fdate1 := StartOfTheMonth(Adate1);
  Fdate2 := IncMonth(StartOfTheMonth(Adate2)) - 1;
  if (Fdate1 = Fdate2 - DayOf(Fdate2) + 1) then
    dxBarSubItem3.Caption := FormatDateTime('mmmm yyyy', Fdate1)
  else
    dxBarSubItem3.Caption := FormatDateTime('mmm yy', Fdate1) + ' - ' + FormatDateTime('mmm yy', Fdate2);

  // Отбор периода
  SP_Agree.Close;

  // пользователи (Все(
  Factive_users_id := -9;
  Caption := 'Перевозки по договорам (Все)';

  SP_Agree.Parameters.ParamByName('@date_begin').Value        := Fdate1;
  SP_Agree.Parameters.ParamByName('@date_end').Value        := Fdate2;
  SP_Agree.Parameters.ParamByName('@users_owner_id').Value      := Factive_users_id;
  SP_Agree.Parameters.ParamByName('@set_period_finance').Value  := dxBarButton6.Down;

  SP_Agree.Open;

  FiltercxGrid4ListID(cxGrid1DBBandedTableView1, '', str_bargain_id);

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.AddFact(string_list : TStringList);
var i, set_main : integer;
    SP_FactMove : TADOStoredProc;
     bargain_id : integer;
begin
    Screen.Cursor := crHourglass;
    fmFact.Show;
//    case Application.MessageBox('ДОБАВЛЯЕМЫЙ ФАКТ БУДЕТ ОСНОВНЫМ ?','Внимание',MB_YESNOCANCEL) of
//      6 : set_main := 1;  // YES
//      7 : set_main := 0; //  NO
//      2 : exit;         //   CANCEL
//    end;

    set_main := 1;
    bargain_id := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;

    SP_FactMove := TADOStoredProc.Create(nil);
    SP_FactMove.Connection := Fconnect;
    SP_FactMove.ProcedureName := 'sp_fact_move_bargain;1';
    SP_FactMove.Parameters.Refresh;

    for i:=0 to string_list.Count - 1 do begin
      ShowTextMessage('Осталось '+IntToStr(string_list.Count - i)+' записей...', False);
      SP_FactMove.Close;
      SP_FactMove.Parameters.Refresh;
      SP_FactMove.Parameters.ParamByName('@fact_id').Value := StrToInt(string_list[i]);
      SP_FactMove.Parameters.ParamByName('@bargain_id').Value := bargain_id;
      SP_FactMove.Parameters.ParamByName('@set_main').Value := set_main;
      try
        SP_FactMove.ExecProc;
      except
        SP_FactMove.Free;
        ShowTextMessage;
      end;
    end;

    ShowTextMessage('Обновление данных', False);
    RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id', SP_FactMove.Parameters.ParamByName('@fact_id').Value);
    SP_FactMove.Free;


    ShowTextMessage;
    Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton41Click(Sender: TObject);
var Q : TADOQuery;
    SP : TADOStoredProc;
    i: integer;
begin
  Q := TADOQuery.Create(nil);
  Q.Connection  := Fconnect;
  Q.SQL.Add('SELECT inf_obj_id, inf_obj_cod, inf_obj_name FROM inf_obj WHERE type_inf_id = 131 AND dbo.GetInfObjVisible(str_group_visible) = 1 ORDER BY inf_obj_cod');
  Q.Open;

  fmFilter := TfmFilter.Create(0, Q, 'inf_obj_id', 'inf_obj_cod', 'inf_obj_name');
  fmFilter._SetFiveDays := True;
  if fmFilter.ShowModal = mrOk then begin
    sp := TADOStoredProc.Create(nil);
    sp.Connection := Fconnect;
    sp.ProcedureName := 'sp_bargain_change_five_days';
    sp.Parameters.Refresh;

    Screen.Cursor := crHourglass;
    for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
      sp.Close;
      sp.Parameters.ParamByName('@bargain_id'        ).Value := cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index];
      sp.Parameters.ParamByName('@five_days_zfto_id' ).Value := fmFilter.GetId;
      try
        sp.ExecProc;
      except
      end;
      ShowTextMessage('Осталось '+IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRowCount - i)+' строк...', False);
    end;

    ShowTextMessage();
    sp.Free;
    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
    Screen.Cursor := crDefault;
  end;

  Q.Free;
end;

procedure TfmAgree2.dxBarButton42Click(Sender: TObject);
var
  retActSettings    : Variant;

  exApp, exWkb      : Variant;
  exWks_rep         : Variant;
  exWks_pril        : Variant;
  SP_Balans_Detail  : TADOStoredProc;
  Query_tmp         : TADOQuery;
  recRep            : integer;
  recPril           : integer;
  bargain_id        : integer;
  str_bargain_id    : string;
  str_expeditor     : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  ClientDS_distance   : TClientDataSet;
  cod_shablon       : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 226 = 'Акт оказанных услуг + Отчет (СФХ-Приволжск)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;
  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks_rep := exWkb.WorkSheets[1];
  exWks_pril := exWkb.WorkSheets[2];

  // Заполняем шапку и подписи
  if cod_shablon = 226 then
    exWks_rep.Range['title_str'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.'
  else
    exWks_rep.Range['title_str'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'оказания услуг по организации перевозки грузов' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks_rep.Range['acts_date'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  if cod_shablon = 226 then
    exWks_rep.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, совместно именуемые в дальнейшем "Стороны", составили настоящий Акт о нижеследующем:'
  else
    exWks_rep.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, совместно именуемые в дальнейшем "Стороны", составили настоящий Акт о том' +
                             ', что за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г. ' +
                             str_expeditor[1] + ' оказал ' + ReplaceStr(str_expeditor[2] + 'у', 'ьу', 'ю') + ' транспортно-экспедиторские услуги по организации перевозки грузов ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') +
                             ' в собственном, арендованном или принадлежащем на ином законном основании ' + ReplaceStr(str_expeditor[1] + 'у', 'ьу', 'ю') + ' подвижном составе (вагонах).';


  exWks_rep.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks_rep.Range['B19'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks_rep.Range['self_firm_name'].Value := VarToStr(retActSettings[12][1]);
  exWks_rep.Range['customer_firm_name'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks_rep.Range['B23'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks_rep.Range['B23'].Value := Null;
  if retActSettings[13][5] = True then
    exWks_rep.Range['B25'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks_rep.Range['B25'].Value := Null;
  if retActSettings[13][8] = True then
    exWks_rep.Range['L23'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks_rep.Range['L23'].Value := Null;
  if retActSettings[13][11] = True then
    exWks_rep.Range['L25'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
  else
    exWks_rep.Range['L25'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks_rep.PageSetup.PrintArea;
    PrintArea := exWks_rep.Range[PrintArea].Resize[exWks_rep.Range[PrintArea].Rows.Count + 4, exWks_rep.Range[PrintArea].Columns.Count].Address;
    exWks_rep.PageSetup.PrintArea := WideString(PrintArea);
    // 2. Копируем формат
    exWks_rep.Rows['23:23'].Copy;
    exWks_rep.Rows['27:29'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks_rep.Range['B27'].Value := 'Дата подписания';
    exWks_rep.Range['B29'].Value := '"____" __________________ 201__';
    exWks_rep.Range['L27'].Value := 'Дата подписания';
    exWks_rep.Range['L29'].Value := '"____" __________________ 201__';
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks_rep.Range['O10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_rep.Range['P10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_rep.Range['Q10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);

    exWks_pril.Range['M4'].Value := 'Ставка без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_pril.Range['N4'].Value := 'Стоимость услуг без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_pril.Range['O4'].Value := 'Сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks_pril.Range['P4'].Value := 'Стоимость услуг с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks_rep.Range['B5']);
  AutoFitMergeCell(exWks_rep.Range['B7']);
  AutoFitMergeCell(exWks_rep.Range['B19']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  // Заполняем
  recRep := 1; recPril := 1; bargain_id := -9;
  while not SP_Balans_Detail.Eof do begin
    if (bargain_id <> SP_Balans_Detail.FieldByName('bargain_id').AsInteger) then begin
      // Строка в Акт
      exWks_rep.Rows[IntToStr(recRep + 11)].Insert;
      exWks_rep.Rows[IntToStr(recRep + 10)].Copy;
      exWks_rep.Rows[IntToStr(recRep + 11)].PasteSpecial(1);

      exWks_rep.Range['A' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks_rep.Range['B' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks_rep.Range['D' + IntToStr(10 + recRep)].Value := recRep;
      exWks_rep.Range['E' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
      exWks_rep.Range['F' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
      exWks_rep.Range['G' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
      exWks_rep.Range['H' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks_rep.Range['J' + IntToStr(10 + recRep)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks_rep.Range['N' + IntToStr(10 + recRep)].Value := Query_NDS.FieldByName('nds_name').AsString;

      if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
        ClientDS_distance.Append;
        ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
        ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
        ClientDS_distance.FieldByName('distance').Value      := null;
        ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);

        ClientDS_distance.Post;
      end;
      exWks_rep.Range['I' + IntToStr(10 + recRep)].Value := ClientDS_distance.FieldByName('distance').Value;

      bargain_id := SP_Balans_Detail.FieldByName('bargain_id').AsInteger;
      Inc(recRep);
    end;

    // Строка в "Отчет к акту"
    exWks_pril.Rows[IntToStr(recPril + 5)].Insert;
    exWks_pril.Rows[IntToStr(recPril + 4)].Copy;
    exWks_pril.Rows[IntToStr(recPril + 5)].PasteSpecial(1);

    exWks_pril.Range['A' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks_pril.Range['B' + IntToStr(recPril + 4)].Value := recPril;
    exWks_pril.Range['C' + IntToStr(recPril + 4)].Value := exWks_rep.Range['I' + IntToStr(9 + recRep)].Value;
    exWks_pril.Range['D' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;
    exWks_pril.Range['E' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks_pril.Range['F' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
      exWks_pril.Range['G' + IntToStr(recPril + 4)].Value := null
    else
      exWks_pril.Range['G' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;
    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks_pril.Range['H' + IntToStr(recPril + 4)].Value := null
    else
      exWks_pril.Range['H' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;
    exWks_pril.Range['I' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks_pril.Range['J' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks_pril.Range['K' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
    exWks_pril.Range['L' + IntToStr(recPril + 4)].Value := exWks_rep.Range['N' + IntToStr(9 + recRep)].Value;
    exWks_pril.Range['P' + IntToStr(recPril + 4)].Value := SP_Balans_Detail.FieldByName('summa').Value;

    inc(recPril);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // удаляем лишниие
  if bargain_id = -9 then begin
    exWks_rep.Rows['12:12'].Delete;
    exWks_rep.Rows['11:11'].ClearContents;

    exWks_pril.Rows['6:6'].Delete;
    exWks_pril.Rows['5:5'].ClearContents;

    recRep := 2;
  end else begin
    exWks_rep.Rows[IntToStr(recRep + 10) + ':' + IntToStr(recRep + 11)].Delete;

    exWks_pril.Rows[IntToStr(recPril + 4) + ':' + IntToStr(recPril + 5)].Delete;
  end;

  // Сумма прописью
  exWks_rep.Range['B' + IntToStr(12 + recRep)].Value :=
      exWks_rep.Range['B' + IntToStr(12 + recRep)].Value + ' ' +
      VarToStr(exWks_rep.Range['Q' + IntToStr(10 + recRep)].Text) + ' ' +
      VarToStr(iif(retActSettings[7][0] <> 3, retActSettings[7][1], 'руб.')) + ' (' +
      GetSumScript_RUS(FloatToStr(abs(exWks_rep.Range['Q' + IntToStr(10 + recRep)].Value)), retActSettings[7][0]) + ')';
  // Автоподбор по высоте
  AutoFitMergeCell(exWks_rep.Range['B' + IntToStr(12 + recRep)]);

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exWks_pril.Select;
  exWks_pril.Range['A1'].Select;
  exWks_rep.Select;
  exWks_rep.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks_rep, retActSettings, str_bargain_id, exWks_rep.Range['Q' + IntToStr(10 + recRep)].Value);
  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks_rep); VarClear(exWks_pril); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton44Click(Sender: TObject);
begin
  RefreshProcedure(-9,-9);
end;

procedure TfmAgree2.dxBarButton47Click(Sender: TObject);
var
   BargainList : TStringList;
             i : integer;
str_bargain_id : string;
   bargain_cod : string;
  sp_Bargain_Set_0 : TADOStoredProc;
begin
  for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
    bargain_cod := cxGrid1DBBandedTableView1.Controller.SelectedRecords[i].Values[cxGrid1DBBandedTableView1bargain_cod.Index];

    if (cxGrid1DBBandedTableView1.Controller.SelectedRecords[i].Values[cxGrid1DBBandedTableView1set_bargain_block.Index] = True)
      OR (cxGrid1DBBandedTableView1.Controller.SelectedRecords[i].Values[cxGrid1DBBandedTableView1date_period_finance.Index] <> null) then begin
      Application.MessageBox(PChar('Фрахтовая карточка №' + bargain_cod + ' не будет сформирована.'+#10#13+'Перевозка закрыта в финансовом месяце или заблокирована!'), 'Внимание', MB_OK);
      exit;
    end;
  end; {for}


  // ХП в "ноль"
  if Application.MessageBox(PChar('Весь факт будет помечен как не основной'+#10#13+'Абсолютные доп. сборы будут выставлены на 0'+#10#13+#10#13+'Продолжить?'), 'Внимание', MB_YESNO) = mrNo then
    exit;

  sp_Bargain_Set_0 := TADOStoredProc.Create(nil);
  sp_Bargain_Set_0.Connection := Fconnect;
  sp_Bargain_Set_0.ProcedureName := 'sp_Bargain_Set_0';
  sp_Bargain_Set_0.Parameters.Refresh;
  sp_Bargain_Set_0.Parameters.ParamByName('@str_bargain_id').Value := cx_GetSelectedValues(cxGrid1, 'bargain_id');
  try
    sp_Bargain_Set_0.ExecProc;
  except
  end;

  // фрахтовая карточка ------------------------------------
  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  // удаление из списка печати тех приложений, для которых номер счета пустой
  Raznoe.PrintFrahtCardWeight_Multi2(Fconnect, str_bargain_id);

  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
end;

procedure TfmAgree2.dxBarButton48Click(Sender: TObject);
var
  i              : integer;
  str_bargain_id : string;
  bargain_note   : string;
  Query          : TADOQuery;
  SP             : TADOStoredProc;
begin
  if cxGrid1DBBandedTableView1.Controller.SelectedRecordCount = 0 then
    exit;

  bargain_note := '';
  bargain_note := InputBox('','Введите примечание', '');

//  if bargain_note = '' then
//    exit;

  str_bargain_id := '';

  for i := 0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
    str_bargain_id := str_bargain_id + ',' + VarToStr(cxGrid1DBBandedTableView1.Controller.SelectedRecords[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  end;
  Delete(str_bargain_id, 1, 1);

  SP := TADOStoredProc.Create(nil);
  SP.Connection := Fconnect;
  SP.ProcedureName := 'sp_bargain_change_bargain_note';
  SP.Parameters.Refresh;
  SP.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP.Parameters.ParamByName('@bargain_note').Value   := bargain_note;
  try
    SP.ExecProc;
  except
  end;
  SP.Free;

  RefreshQueryGrid(cxGrid1DBBandedTableView1, 'bargain_id');

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton49Click(Sender: TObject);
var
  tmp_path, file_name : string;
begin
  tmp_path := ExtractFilePath(ParamStr(0)) + 'Temp' + '\';

  DeleteFileFromDir();
  repeat
    file_name := 'xls_' + IntToStr(GetTickCount) + '.xls';
  until not FileExists(tmp_path + file_name);

  if TControl(Sender).Tag = 1 then
    cxExportPivotGridToExcel(tmp_path + file_name, cxDBPivotGrid1, True)
  else
    cxExportPivotGridToExcel(tmp_path + file_name, cxDBPivotGrid1, False);

  ShellExecute(HWND(nil), 'open', PChar(file_name), nil, PChar(tmp_path), SW_SHOWNORMAL);
end;

procedure TfmAgree2.dxBarButton57Click(Sender: TObject);
var SP_bargain_change_period : TADOStoredProc;
                 str_message : string;
                           i : integer;
                 date_period : TDateTime;
begin
  fmPeriod := TfmPeriod.Create(Application, Fdate1, Fdate1, 3);
  if fmPeriod.ShowModal=mrOK then begin
    date_period := fmPeriod._GetMonth;

    if TControl(Sender).Tag = 0 then str_message := 'Новый перевозочный месяц ' + FormatDateTime('mmmm yyyy',date_period) + '.' + #10 + 'Продолжить?';
    if TControl(Sender).Tag = 1 then str_message := 'Новый финансовый месяц ' + FormatDateTime('mmmm yyyy',date_period) + '.' + #10 + 'Продолжить?';

    if Application.MessageBox(PChar(str_message), 'Внимание', MB_ICONINFORMATION or MB_OKCANCEL) = ID_OK then begin
      SP_bargain_change_period := TADOStoredProc.Create(nil);
      SP_bargain_change_period.Connection := Fconnect;
      SP_bargain_change_period.ProcedureName := 'sp_bargain_change_period';

      Screen.Cursor := crHourglass;
      for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do begin
        SP_bargain_change_period.Parameters.Refresh;
        SP_bargain_change_period.Parameters.ParamByName('@bargain_id').Value := cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index];
        if TControl(Sender).Tag = 0 then SP_bargain_change_period.Parameters.ParamByName('@date_period'        ).Value := date_period + 14;
        if TControl(Sender).Tag = 1 then SP_bargain_change_period.Parameters.ParamByName('@date_period_finance').Value := date_period + 14;
        try
          SP_bargain_change_period.ExecProc;
        except
        end;
        ShowTextMessage('Осталось '+IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRowCount - i)+' строк...', False);
      end;
      ShowTextMessage();
      RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
      Screen.Cursor := crDefault;

    end;
  end;
end;

procedure TfmAgree2.dxBarButton59Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo_Vagon         : integer;
  recNo_Bargain       : integer;
  str_bargain_id      : string;
  cnt_all             : integer;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 289 = 'Акт Аренда (ПГК)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

/////// Вкладка АКТ

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['contract_cod'].Value := SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['B6'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['acts_date'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B10'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

//  exWks.Range['self_name'].Value     := SP_Agree.FieldByName('firm_self_name_short').AsString;
//  exWks.Range['customer_name'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B27'].Value := str_expeditor[1] + ':';
  exWks.Range['D27'].Value := str_expeditor[2] + ':';

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B29'].Value := VarToStr(retActSettings[14][1]) + ' _______________ (' + VarToStr(retActSettings[13][1]) + ')';
  end else
    exWks.Range['B29:B29'].ClearContents;
//  if retActSettings[13][5] = True then begin
//    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]) + ' ______________________________';
//    exWks.Range['E22'].Value := retActSettings[13][4];
//  end else
//    exWks.Range['B22:G22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['D29'].Value := VarToStr(retActSettings[14][7]) + ' _______________ (' + VarToStr(retActSettings[13][7]) + ')';
  end else
    exWks.Range['D29:F29'].ClearContents;
//  if retActSettings[13][11] = True then begin
//    exWks.Range['M22'].Value := VarToStr(retActSettings[14][10]) + ' ______________________________';
//    exWks.Range['P22'].Value := retActSettings[13][10];
//  end else
//    exWks.Range['M22:Q22'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['30:32'].Copy;
    exWks.Rows['34:36'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B34'].Value := 'Дата подписания';
    exWks.Range['B36'].Value := '"____" __________________ 201__';
    exWks.Range['D34'].Value := 'Дата подписания';
    exWks.Range['D36'].Value := '"____" __________________ 201__';
  end;

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['E12'].Value := 'Цена за единицу без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['F12'].Value := 'Стоимость услуг без НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Объединяем ячейки
  AutoFitMergeCell(exWks.Range['B10']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;

  case cod_shablon of
    289: SP_Balans_Detail.ProcedureName := 'sp_act_report_PGK_Arenda';
  end;

  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_rsvagon').Value    := True;
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // RS с вагонами
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Recordset := SP_Balans_Detail.NextRecordset(recNo_Vagon);
  // RS с вагонами

  // Акт
  recNo_Bargain := 0; cnt_all := 0;
  while not SP_Balans_Detail.Eof do begin
    inc(recNo_Bargain);

    if recNo_Bargain > 1 then begin
      exWks.Rows[IntToStr(16 + recNo_Bargain)].Insert;
      exWks.Rows[IntToStr(15 + recNo_Bargain)].Copy;
      exWks.Rows[IntToStr(16 + recNo_Bargain)].PasteSpecial(1);
    end;

    exWks.Range['A' + IntToStr(16 + recNo_Bargain)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;

    cnt_all := cnt_all + SP_Balans_Detail.FieldByName('cnt_days').AsInteger;
    exWks.Range['C' + IntToStr(16 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('cnt_days').Value;
    exWks.Range['E' + IntToStr(16 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('rate_notNDS').AsCurrency;

    ShowTextMessage('Акт: Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + #10#13 + 'Вагоны: Осталось ' + IntToStr(Query_tmp.RecordCount), False);
    SP_Balans_Detail.Next;
  end;
  exWks.Range['C15'].Value := cnt_all;

  if recNo_Bargain = 0 then begin
    exWks.Range['C17'].Value := 0;
    exWks.Range['E17'].Value := 0;
    recNo_Bargain := 1;
  end;

  // Сумма прописью
  exWks.Range['str_summa'].Value :=
    'Всего по настоящему акту подлежат оплате со стороны ' +
    SP_Agree.FieldByName('firm_customer_name_short').AsString + ' в пользу ' +
    VarToStr(retActSettings[12][1]) + ' ' +
    VarToStr(exWks.Range['acts_summa'].Text) + ' ' +
    VarToStr(iif(retActSettings[7][0] <> 3, retActSettings[7][1], 'руб.')) + ' ' +
    '(' + GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_summa'].Value)), retActSettings[7][0]) + ')';

  SP_Balans_Detail.Free;
  exWks.Range['A1'].Select;

/////// Вкладка ВАГОНЫ
  exWks := exWkb.WorkSheets[2];
  exWks.Select;

  exWks.Range['A8'].Value := str_expeditor[1] + ': ' + VarToStr(retActSettings[12][1]);
  exWks.Range['A9'].Value := str_expeditor[2] + ': ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;

  AutoFitMergeCell(exWks.Range['A17']);

  recNo_Vagon := 1;
  while not Query_tmp.Eof do begin
    exWks.Rows[IntToStr(13 + recNo_Vagon)].Insert;
    exWks.Rows[IntToStr(12 + recNo_Vagon)].Copy;
    exWks.Rows[IntToStr(13 + recNo_Vagon)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(12 + recNo_Vagon)].Value := recNo_Vagon;
    exWks.Range['B' + IntToStr(12 + recNo_Vagon)].Value := Query_tmp.FieldByName('num_vagon').AsString;

    exWks.Range['C' + IntToStr(12 + recNo_Vagon)].Value := Query_tmp.FieldByName('date_begin').Value;
    exWks.Range['G' + IntToStr(12 + recNo_Vagon)].Value := Query_tmp.FieldByName('date_end').Value;
    exWks.Range['H' + IntToStr(12 + recNo_Vagon)].Value := Query_tmp.FieldByName('cnt_days').Value;

    ShowTextMessage('Акт: Осталось 0' + #10#13 + 'Вагоны: Осталось ' + IntToStr(Query_tmp.RecordCount - Query_tmp.RecNo), False);
    Query_tmp.Next;
    inc(recNo_Vagon);
  end;

  exWks.Rows[IntToStr(12 + recNo_Vagon)].Delete;
  if recNo_Vagon > 1 then
    exWks.Rows[IntToStr(12 + recNo_Vagon)].Delete
  else begin
    exWks.Rows[IntToStr(12 + recNo_Vagon)].ClearContents;
    recNo_Vagon := 2;
  end;

  Query_tmp.Free;
  exWks.Range['A1'].Select;

/////// Сохранение акта
  exWks := exWkb.WorkSheets[1];
  exWks.Select;
  exWks.Range['A1'].Select;
  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_summa'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton61Click(Sender: TObject);
var            i : integer;
   str_num_vagon : string;
begin
  str_num_vagon := '';
  str_num_vagon := cx_GetSelectedValues(cxGrid2, 'num_vagon');

  if str_num_vagon = '' then exit;
  str_num_vagon := ReplaceStr(str_num_vagon,',,',',');
  str_num_vagon := ReplaceStr(str_num_vagon,',',#13#10);


  Screen.Cursor := crHourglass;

  for i:=0 to fmMain.MDIChildCount-1 Do
    if (fmMain.MDIChildren[i].ClassName='TfmFactTrack') then begin
      fmMain.MDIChildren[i].Free;
      Break;
    end;
  fmFactTrack := TfmFactTrack.Create(Application, False, 0);
  fmFactTrack._SetVagonSQL := ShowFactTrackVagonDlg(Application.Handle, usr_pwd, 0, str_num_vagon);

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton62Click(Sender: TObject);
type  TFunc = function(AppHand: THandle; connect: TADOConnection; bargain_id: integer; usr_pwd: PUser_pwd; set_rate: boolean; set_param: boolean): Variant;
var   i, type_kontener, attr_self : integer;
           FBargainRate : TFunc;
           handle       : THandle;
           v            : Variant;
    SP_fact_rate_modify : TADOStoredProc;
begin
  handle := LoadLibrary('FormsAdd.dll');
  @FBargainRate := GetProcAddress(handle,'CreateWndBargainRate');
  v := FBargainRate(Application.Handle, Fconnect, SP_Agree.FieldByName('bargain_id').AsInteger, usr_pwd, False, False);
  FreeLibrary(handle);


  if (v[0]<>-9) and (v[1]<>-9) then begin
    if DeleteFrahtCard(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger, Fconnect) = False then begin
      Application.MessageBox(PWideChar('Ошибка при удалении ФК №' + IntToStr(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger) + '!'),'Внимание!',MB_OK+MB_ICONWARNING);
      Exit;
    end;
    type_kontener := v[0];
    attr_self     := v[1];

    Screen.Cursor := crHourglass;
    SP_fact_rate_modify := TADOStoredProc.Create(nil);
    SP_fact_rate_modify.Connection := Fconnect;
    SP_fact_rate_modify.ProcedureName := 'sp_fact_rate_modify';
    SP_fact_rate_modify.Parameters.Refresh;

    for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount -1 do begin
      ShowTextMessage('Осталось '+IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i)+' строк...', False);
      SP_fact_rate_modify.Parameters.Refresh;
      SP_fact_rate_modify.Parameters.ParamByName('@fact_id'      ).Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      SP_fact_rate_modify.Parameters.ParamByName('@type_kontener').Value := type_kontener;
      SP_fact_rate_modify.Parameters.ParamByName('@attr_self'    ).Value := attr_self;
      SP_fact_rate_modify.ExecProc;
    end;
    SP_fact_rate_modify.Free;

    ShowTextMessage('Обновление данных...', False);

    RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);

    ShowTextMessage;
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.dxBarButton63Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  //111 = 'Акт оказанных услуг (ваг/сутки)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDVAGON or ACT_SET_ADDSIGN);
  if retActSettings[0] = -9 then
    exit;


  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['O3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['L18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:G20'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E22'].Value := retActSettings[13][4];
  end else
    exWks.Range['B22:G22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['L20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['O20'].Value := retActSettings[13][7];
  end else
    exWks.Range['L20:P20'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['L22'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['O22'].Value := retActSettings[13][10];
  end else
    exWks.Range['L22:P22'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['20:22'].Copy;
    exWks.Rows['24:26'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B24'].Value := 'Дата подписания';
    exWks.Range['B26'].Value := '"____" __________________ 201__';
    exWks.Range['L24'].Value := 'Дата подписания';
    exWks.Range['L26'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['K10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['M10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['N10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['O10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['P10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['H10'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  case cod_shablon of
    111: SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH_Arenda';
  end;
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon').Value   := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_rsvagon').Value    := False;
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(11 + recNo)].Insert;
    exWks.Rows[IntToStr(10 + recNo)].Copy;
    exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

    if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
      exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
    else // Доп. сбор.
      exWks.Range['A' + IntToStr(10 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
    exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
    exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
    if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
      exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
    else
      exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
    exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
    exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
    exWks.Range['H' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;
    exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt_days').Value;

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['L' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
    exWks.Range['K' + IntToStr(10 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
    exWks.Range['M' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;

    exWks.Range['P' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['P' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton65Click(Sender: TObject);
type
  TFunc = function(AppHand : THandle; conn: TADOConnection; bargain_id: integer; usr_pwd: PUser_pwd): Variant;
var
  FBargainList : TFunc;
  handle       : THandle;
  v            : Variant;
begin
  if not cxGrid1DBBandedTableView1set_bargain_block.DataBinding.Field.AsBoolean then
    if cxGrid1DBBandedTableView1global_copy.DataBinding.Field.AsBoolean = True then begin
      Application.MessageBox('Перевозка скопирована необходимо заново сохранить!', 'Ошибка', MB_OK+MB_ICONERROR);
      Exit;
    end;

  handle := LoadLibrary('FormsAdd.dll');
  @FBargainList := GetProcAddress(handle,'CreateWndBargainList2');
  v := FBargainList(Application.Handle, Fconnect, cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger, usr_pwd);
  FreeLibrary(handle);

  if v[0] <> -9 then begin
    RefreshProcedure(v[0],-9);
  end;
end;

procedure TfmAgree2.dxBarButton66Click(Sender: TObject);
var                 i : integer;
  str_shaping_rate_id : string;
       agreement_note : string;
                   SP : TADOStoredProc;
                Fview : TcxGridDBBandedTableView;
begin
  case TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag of
    0 : Fview := cxGrid3DBBandedTableView1;
    1 : Fview := cxGrid7DBBandedTableView1;
  end;

  agreement_note := '';

  if InputQuery('Введите № Приложения(руч.ввод) для выделенной(-ых) записей','№ Приложения (ручной ввод)', agreement_note) then begin
    str_shaping_rate_id := '';

    for i := 0 to Fview.Controller.SelectedRecordCount - 1 do begin
      str_shaping_rate_id := str_shaping_rate_id + ',' + VarToStr(Fview.Controller.SelectedRecords[i].Values[Fview.GetColumnByFieldName('shaping_rate_id').Index]);
    end;
    Delete(str_shaping_rate_id, 1, 1);

    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_bargain_change_agreement';
    SP.Parameters.Refresh;
    SP.Parameters.ParamByName('@type_action').Value    := 1;
    SP.Parameters.ParamByName('@str_shaping_rate_id').Value := str_shaping_rate_id;
    SP.Parameters.ParamByName('@agreement_note'     ).Value := iif(agreement_note='', null, agreement_note);
    SP.ExecProc;
    SP.Free;
    RefreshQueryGrid(Fview, 'shaping_rate_id');

  Screen.Cursor := crDefault;
  end else
    Exit;

end;

procedure TfmAgree2.dxBarButton109Click(Sender: TObject);
var                 i : integer;
  str_shaping_rate_id : string;
          contract_id : integer;
         contract_cod : string;
                Query : TADOQuery;
                   SP : TADOStoredProc;
                Fview : TcxGridDBBandedTableView;
begin
  case TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag of
    0 : Fview := cxGrid3DBBandedTableView1;
    1 : Fview := cxGrid7DBBandedTableView1;
  end;

  str_shaping_rate_id := '';
  contract_id := integer(Fview.Controller.SelectedRecords[0].Values[Fview.GetColumnByFieldName('contract_agent_id').Index]);
  contract_cod := VarToStr(Fview.Controller.SelectedRecords[0].Values[Fview.GetColumnByFieldName('contract_agent_cod').Index]);
  for i := 0 to Fview.Controller.SelectedRecordCount - 1 do begin
    str_shaping_rate_id := str_shaping_rate_id + ',' + VarToStr(Fview.Controller.SelectedRecords[i].Values[Fview.GetColumnByFieldName('shaping_rate_id').Index]);
    if contract_id <> integer(Fview.Controller.SelectedRecords[i].Values[Fview.GetColumnByFieldName('contract_agent_id').Index]) then
      contract_id := -9;
  end;
  Delete(str_shaping_rate_id, 1, 1);

  if contract_id = -9 then begin
    Application.MessageBox('Выбраны перевозки по нескольким договорам' + #10 + 'Продолжение операции невозможно', 'Связать с приложением', MB_OK or MB_ICONERROR);
    exit;
  end;

  Query := TADOQuery.Create(nil);
  Query.Connection := Fconnect;
  Query.SQL.Add('SELECT doc_id, doc_describe, doc_cod, date_enter');
  Query.SQL.Add('FROM view_doc_blob');
  Query.SQL.Add('WHERE doc_type_cod in (''1'',''2'')');
  Query.SQL.Add('AND contract_id = ' + IntToStr(contract_id));
  Query.SQL.Add('ORDER BY date_enter DESC');
  Query.Open;

  fmFilter := TfmFilter.Create(0, Query, 'doc_id', 'doc_cod', 'doc_describe');
  fmFilter._SetDocBlob := True;
  if fmFilter.ShowModal = mrOk then begin
    Screen.Cursor := crHourglass;

    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_bargain_change_agreement';
    SP.Parameters.Refresh;
    SP.Parameters.ParamByName('@str_shaping_rate_id').Value := str_shaping_rate_id;
    SP.Parameters.ParamByName('@agreement_id'       ).Value := fmFilter.GetId;
    SP.ExecProc;
    SP.Free;

    RefreshQueryGrid(Fview, 'shaping_rate_id');

    Screen.Cursor := crDefault;
  end;

  Query.Free;
end;

procedure TfmAgree2.dxBarButton69Click(Sender: TObject);
type
    TFunc = function(AppHand:THandle; f:boolean; usr_pwd:PUser_pwd; budget_type_cod: string; budget_id: integer) : variant;
var
    FDic     : TFunc;
    handle   : THandle;
    v        : Variant;
    SP       : TADOStoredProc;
    i        : integer;
    Fview    : TcxGridDBBandedTableView;
begin
  case TdxBarButton(Sender).ClickItemLink.Owner.Owner.Tag of
    0 : Fview := cxGrid3DBBandedTableView1;
    1 : Fview := cxGrid7DBBandedTableView1;
  end;

  if Fview.Controller.SelectedRecordCount = 0 then
    exit;

  handle := LoadLibrary('dictionary.dll');
  @FDic := GetProcAddress(handle, 'CreateWndDictService');
  v := FDic(Application.Handle, True, usr_pwd, '', -9);
  FreeLibrary(handle);

  if v[0] <> -9 then begin
    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_bargain_change_budget';
    SP.Parameters.Refresh;

    Screen.Cursor := crHourglass;
    for i := 0 to Fview.Controller.SelectedRecordCount - 1 do begin
      SP.Close;
      SP.Parameters.ParamByName('@type_action'     ).Value := 1;
      SP.Parameters.ParamByName('@shaping_rate_id' ).Value := Fview.Controller.SelectedRows[i].Values[Fview.GetColumnByFieldName('shaping_rate_id').Index];
      SP.Parameters.ParamByName('@budget_id'       ).Value := v[0];
      SP.ExecProc;

      ShowTextMessage('Осталось '+IntToStr(Fview.Controller.SelectedRowCount - i)+' строк...', False);
    end;
    RefreshQueryGrid(Fview, 'shaping_rate_id');


    ShowTextMessage();
    SP.Free;
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAgree2.dxBarButton72Click(Sender: TObject);
var SP : TADOStoredProc;
    TS : TStringList;
    i  : integer;
begin
  fmVagonArenda := TfmVagonArenda.Create(Application, True);
  fmVagonArenda.PageControl1.ActivePageIndex := TComponent(Sender).Tag;
  fmVagonArenda.PageControl1Change(nil);
  if fmVagonArenda.ShowModal = mrOk then begin
    Screen.Cursor := crHourglass;

    if fmVagonArenda._str_vagon_arenda_id = '' then exit;

    TS := TStringList.Create;
    TS.DelimitedText := fmVagonArenda._str_vagon_arenda_id;

    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_vagon_arenda_copy_to_fact';

    for i := 0 to TS.Count - 1 do begin
      SP.Parameters.Refresh;
      SP.Parameters.ParamByName('@date_begin').Value          := fmVagonArenda._date_begin;
      SP.Parameters.ParamByName('@date_end').Value            := fmVagonArenda._date_end;
      SP.Parameters.ParamByName('@str_vagon_arenda_id').Value := TS.Strings[i];
      SP.Parameters.ParamByName('@bargain_id').Value          := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
      try
        SP.ExecProc;
      except
      end;
      ShowTextMessage('Осталось ' + IntToStr(TS.Count - i) + ' записей...', False);
    end;
  end;
  //ShowTextMessage('Разнесение типов ставок по суммам...', False);
  //dxBarButton143Click(nil);
  ShowTextMessage;
  Screen.Cursor := crHourglass;
  RefreshProcedure(cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger,-9);
end;


procedure TfmAgree2.dxBarButton73Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recXls              : integer;
  str_bargain_id      : string;
  rate_name           : string;
  ClientDS_distance   : TClientDataSet;

  str_expeditor       : array [1..2] of string;
  nds_rate            : Currency;
  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 424 = 'Акт оказанных услуг (с повагонкой)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['B3'].Value := 'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B4'].Value := 'к Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['B5'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';

  exWks.Range['R6'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B8'].Value := '    Мы, нижеподписавшиеся, представитель ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', в лице ' + VarToStr(retActSettings[4][2]) + ', с одной стороны' +
                             ', и представитель ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ', в лице ' + VarToStr(retActSettings[5][2]) + ', с другой стороны' +
                             ', составили настоящий Акт о том, что ' + str_expeditor[1] + ' оказал Услуги по предоставлению железнодорожного подвижного состава для осуществления ' +
                             'перевозки грузов' + ' ' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + ':';

  rate_name := iif(retActSettings[7][0] = 3, 'руб.', retActSettings[7][1]);
  case IndexText(SP_Agree.FieldByName('ed_izm_cod').AsString, ['000', '001', '002', '004']) of
    0 : rate_name := rate_name + '/тн';
    1 : rate_name := rate_name + '/конт';
    2 : rate_name := rate_name + '/вагон';
    3 : rate_name := rate_name + '/сутки';
    else rate_name := rate_name;
  end;
  exWks.Range['N10'].Value := 'Ставка перевозки, ' + rate_name + #10'(без НДС)';
  exWks.Range['P10'].Value := 'Ставка перевозки, ' + rate_name + #10'(в т.ч. НДС)';

  exWks.Range['B16'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + ' претензий по объему, качеству и срокам оказания услуг не имеет.';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B8']);

  exWks.Range['D19'].Value := 'от "' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + '"';
  exWks.Range['M19'].Value := 'от "' + ReplaceStr(str_expeditor[2] + 'а', 'ьа', 'я') + '"';

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['D20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['F21'].Value := VarToStr(retActSettings[13][1]);
  end else
    exWks.Range['D20:I22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['M20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['P21'].Value := VarToStr(retActSettings[13][7]);
  end else
    exWks.Range['M20:R22'].ClearContents;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id').Value    := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod').Value  := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@currency_id').Value    := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
//  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recXls := 12;
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := SP_Balans_Detail.recNo;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['G' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('datpr').Value;
    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks.Range['I' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').Value;

    if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
      exWks.Range['J' + IntToStr(recXls)].Value := null
    else
      exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;
    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks.Range['K' + IntToStr(recXls)].Value := null
    else
      exWks.Range['K' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    exWks.Range['L' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;

    // Расстояние
    if exWks.Range['M:M'].EntireColumn.Hidden = False then begin
      if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
        ClientDS_distance.Append;
        ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
        ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
        ClientDS_distance.FieldByName('distance').Value      := null;
        ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
        ClientDS_distance.Post;
      end;
      exWks.Range['M' + IntToStr(recXls)].Value := ClientDS_distance.FieldByName('distance').Value;
    end;

    exWks.Range['N' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('rate_without_nds').Value;
    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['O' + IntToStr(recXls)].Value := Query_NDS.FieldByName('nds_name').AsString;
    exWks.Range['P' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('rate').Value;

    // Сумма без ндс - зададим формулу в зависимости от типа перевозки
    case IndexText(SP_Balans_Detail.FieldByName('bargain_ed_izm_cod').AsString, ['000', '001', '002', '004']) of
           // ed_izm_cod = '000' // тонны (тн)
      0 :  exWks.Range['Q' + IntToStr(recXls)].Value := '=ROUND(RC[-6]*RC[-3],2)';
           // ed_izm_cod = '001' // контейнер (конт)
      1 :  exWks.Range['Q' + IntToStr(recXls)].Value := '=RC[-3]';
           // ed_izm_cod = '002' // вагон (вагон)
      2 :  exWks.Range['Q' + IntToStr(recXls)].Value := '=RC[-3]';
           // ed_izm_cod = '004' // вагоно-сутки (сутки)
      3 :  exWks.Range['Q' + IntToStr(recXls)].Value := '=RC[-3]*' + IntToStr(SP_Balans_Detail.FieldByName('quantity').AsInteger);
      else exWks.Range['Q' + IntToStr(recXls)].Value := '=RC[-3]';
    end;

    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  // при необходимости удаляем лишнии записи
  if recXls > 12 then begin
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].Delete;
  end else begin
    exWks.Rows[IntToStr(recXls + 0) + ':' + IntToStr(recXls + 1)].ClearContents;
    inc(recXls, 2);
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exApp.CutCopyMode := False;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['sum_act'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton74Click(Sender: TObject);
var   str_bargain_id : string;
         i, line_cnt : integer;
 exApp, exWkb, exWks : Variant;
 sp_Report_oper_certificate : TADOStoredProc;
 date1, date2 : TDateTime;
begin
  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  fmPeriod := TfmPeriod.Create(Application, Fdate1, Fdate2, 1);
  if fmPeriod.ShowModal=mrOK then begin
    date1 := fmPeriod._GetDateBegin;
    date2 := fmPeriod._GetDateEnd;
  end else exit;

  ShowTextMessage('Запуск Excel ...', False);

  sp_Report_oper_certificate := TADOStoredProc.Create(nil);
  sp_Report_oper_certificate.Connection := Fconnect;
  sp_Report_oper_certificate.ProcedureName := 'sp_Report_oper_certificate';
  sp_Report_oper_certificate.Parameters.Refresh;
  sp_Report_oper_certificate.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  sp_Report_oper_certificate.Parameters.ParamByName('@date_begin'    ).Value := date1;
  sp_Report_oper_certificate.Parameters.ParamByName('@date_end'      ).Value := date2;
  sp_Report_oper_certificate.Open;

  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, 175));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];



  // Заполняем шапку и подписи
  exWks.Range['F1'].Value := 'Оперативная справка № ___/ ' + FormatDateTime('mmmm yyyy', date1);
  exWks.Range['I4'].Value := 'Дата ' + FormatDateTime('dd.mm.yyyy', date2)+ 'г.';
  exWks.Range['F18'].Value := 'Отгрузки в ' + AnsiLowerCase(array_month_RUS[MonthOf(date1)])  + ' по ' + FormatDateTime('dd.mm.yyyy', date2) + ' включительно';
  exWks.Range['F19'].Value := 'Оплачено в ' + AnsiLowerCase(array_month_RUS[MonthOf(date1)])  + ' за перевозки ' + FormatDateTime('mmmm yyyy', date1) + 'г.';
  exWks.Range['F20'].Value := 'Задолженность по состоявшимся отгрузкам  в ' + AnsiLowerCase(array_month_RUS[MonthOf(date1)]) + ' ' + IntToStr(YearOf(date1)) + 'г.';

  line_cnt := 0;
  while not sp_Report_oper_certificate.Eof do begin
    exWks.Rows[IntToStr(7 + line_cnt)].Insert;
    exWks.Rows[IntToStr(6 + line_cnt)].Copy;
    exWks.Rows[IntToStr(7 + line_cnt)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(6 + line_cnt) + ':K' + IntToStr(6 + line_cnt)].Borders[9].LineStyle := 1;
    exWks.Range['A' + IntToStr(7 + line_cnt) + ':K' + IntToStr(7 + line_cnt)].Borders[9].LineStyle := 1;

    exWks.Range['A' + IntToStr(6 + line_cnt)].Value := sp_Report_oper_certificate.RecNo;
    exWks.Range['B' + IntToStr(6 + line_cnt)].Value := sp_Report_oper_certificate.FieldByName('date_from_to').Value;
    exWks.Range['C' + IntToStr(6 + line_cnt)].Value := sp_Report_oper_certificate.FieldByName('node_begin_name').AsString;
    exWks.Range['E' + IntToStr(6 + line_cnt)].Value := sp_Report_oper_certificate.FieldByName('node_end_name').AsString;
    exWks.Range['F' + IntToStr(6 + line_cnt)].Value := sp_Report_oper_certificate.FieldByName('client_sum').Value;
    exWks.Range['G' + IntToStr(6 + line_cnt)].Value := sp_Report_oper_certificate.FieldByName('client_sum').Value;
    exWks.Range['H' + IntToStr(6 + line_cnt)].Value := sp_Report_oper_certificate.FieldByName('client_cnt').Value;
    exWks.Range['I' + IntToStr(6 + line_cnt)].Value := sp_Report_oper_certificate.FieldByName('client_weight').Value;
    ShowTextMessage('Осталось ' + IntToStr(sp_Report_oper_certificate.RecordCount - sp_Report_oper_certificate.RecNo) + '...', False);
    sp_Report_oper_certificate.Next;
    line_cnt := line_cnt + 1;
  end;
  exWks.Rows[IntToStr(6+line_cnt)].Delete;
  exWks.Rows[IntToStr(6+line_cnt)].Delete;

  sp_Report_oper_certificate.Free;
  Screen.Cursor := crDefault;
  exWks.Range['A1'].Select;
  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
  ShowTextMessage;
end;

procedure TfmAgree2.dxBarButton98Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo_Bargain       : integer;
  str_bargain_id      : string;

  str_expeditor       : array [1..2] of string;
  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 419 = 'Отчет ВОХР (Афипский НПЗ)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;

  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ROUTE_n_KARGOFROMFACT);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Заполняем шапку и подписи
  exWks.Range['L3'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['acts_date'].Value := FormatDateTime('dd ' + array_month_balance[MonthOf(retActSettings[3][0])] + ' yyyy г.', retActSettings[3][0]);

  exWks.Range['B6'].Value := 'На основании договора № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' +
                             ' заключенного между сторонами ' + VarToStr(retActSettings[12][1]) +
                             ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B7'].Value := VarToStr(retActSettings[12][1]) + ', в лице ' + VarToStr(retActSettings[4][2]) +
                             ' составил настоящий ОТЧЕТ о выполнении поручения ' + SP_Agree.FieldByName('firm_customer_name_short').AsString +
                             ' выданного согласно договора № ' + SP_Agree.FieldByName('contract_cod').AsString +
                             ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' +
                             ' о нижеследующем:';

  exWks.Range['C22'].Value :='указывается сумма расходов, понесенная ' + VarToStr(retActSettings[12][1]) +
                             ' по исполнению поручения ' + SP_Agree.FieldByName('firm_customer_name_short').AsString +
                             ', подлежащая последним возмещению';
  exWks.Range['B26'].Value :='при предоставлении ' + VarToStr(retActSettings[12][1]) + ' оправдательных документов';

  exWks.Range['B33'].Value := 'от ' + VarToStr(retActSettings[12][1]);
  exWks.Range['R33'].Value := 'от ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Атовыравнивание по высоте
  AutoFitMergeCell(exWks.Range['B6']);
  AutoFitMergeCell(exWks.Range['B7']);

  // НДС
  if SP_Agree.FieldByName('bargain_nds_cod').IsNull then
    exWks.Range['B28'].Value := SP_Agree.FieldByName('bargain_nds_name').AsString
  else
    exWks.Range['B28'].Value := 'НДС по ставке ' + SP_Agree.FieldByName('bargain_nds_name').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B36'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['J36'].Value := VarToStr(retActSettings[13][1]);
  end else
    exWks.Range['B36:N36'].ClearContents;

  if retActSettings[13][8] = True then begin
    exWks.Range['R36'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['W36'].Value := VarToStr(retActSettings[13][7]);
  end else
    exWks.Range['R36:Z36'].ClearContents;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;

  SP_Balans_Detail.ProcedureName := 'sp_act_report_AfipskiyNPZ_VOHR;1';

  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@type_result'       ).Value := 0;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'       ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'       ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Перевозки
  recNo_Bargain := 1;
  while not SP_Balans_Detail.Eof do begin
    exWks.Rows[IntToStr(13 + recNo_Bargain)].Insert;
    exWks.Rows[IntToStr(12 + recNo_Bargain)].Copy;
    exWks.Rows[IntToStr(13 + recNo_Bargain)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(12 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(12 + recNo_Bargain)].Value := recNo_Bargain;
    exWks.Range['C' + IntToStr(12 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
    exWks.Range['M' + IntToStr(12 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks.Range['N' + IntToStr(12 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('ed_izm_name').AsString;

    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks.Range['O' + IntToStr(12 + recNo_Bargain)].Value := null
    else
      exWks.Range['O' + IntToStr(12 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    exWks.Range['P' + IntToStr(12 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('cnt_fact').Value;
    exWks.Range['Q' + IntToStr(12 + recNo_Bargain)].Value := VartoStr(retActSettings[7][1]);

    exWks.Range['R' + IntToStr(12 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('rep_sum_not_nds').AsCurrency;
    exWks.Range['S' + IntToStr(12 + recNo_Bargain)].Value := SP_Balans_Detail.FieldByName('rep_sum').AsCurrency - SP_Balans_Detail.FieldByName('rep_sum_not_nds').AsCurrency;

    ShowTextMessage('Перевозки: Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
    inc(recNo_Bargain);
  end;

  exWks.Rows[IntToStr(12 + recNo_Bargain)].Delete;
  if recNo_Bargain > 1 then
    exWks.Rows[IntToStr(12 + recNo_Bargain)].Delete
  else begin
    exWks.Rows[IntToStr(12 + recNo_Bargain)].ClearContents;
    recNo_Bargain := 2;
  end;

  // Сумма прописью
  exWks.Range['str_acts_sum'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum'].Value)), retActSettings[7][0]);
  exWks.Range['str_acts_sum_nds'].Value := GetSumScript_RUS(FloatToStr(abs(exWks.Range['acts_sum_nds'].Value)), retActSettings[7][0]);

  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['acts_sum'].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton79Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 132 = 'Акт оказанных услуг + Вагон (RUS)'
  // 217 = 'Акт оказанных услуг + Вагон (Совфрахт-Приволжск)'
  // 307 = 'Акт оказанных услуг + Вагон (Совфрахт-Приволжск, НДС)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1,
    ACT_SET_ADDSIGN or ACT_SET_ROUTE_n_KARGOFROMFACT or iif((cod_shablon = 217) or (cod_shablon = 307), ACT_SET_RECALC_DISTANCE, 0));
  if retActSettings[0] = -9 then
    exit;


  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['L3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['M18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks.Range['B20'].Value := Null;
  if retActSettings[13][5] = True then
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks.Range['B22'].Value := Null;
  if retActSettings[13][8] = True then
    exWks.Range['M20'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks.Range['M20'].Value := Null;
  if retActSettings[13][11] = True then
    exWks.Range['M22'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
  else
    exWks.Range['M22'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['20:22'].Copy;
    exWks.Rows['24:26'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B24'].Value := 'Дата подписания';
    exWks.Range['B26'].Value := '"____" __________________ 201__';
    exWks.Range['M24'].Value := 'Дата подписания';
    exWks.Range['M26'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['M10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['O10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['P10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['Q10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['R10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['J10'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  case cod_shablon of
    132: SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
    217: SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
    307: SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
  end;
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'       ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'     ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'        ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'          ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'       ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'      ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    if (SP_Balans_Detail.FieldByName('bargain_correct_type').AsInteger = 1) or (SP_Balans_Detail.FieldByName('summa').AsCurrency > 0) then begin
      exWks.Rows[IntToStr(11 + recNo)].Insert;
      exWks.Rows[IntToStr(10 + recNo)].Copy;
      exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

      if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
        exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
      else // Доп. сбор.
        exWks.Range['A' + IntToStr(10 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
      exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
      if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
      else
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
      // Номера вагонов и накладных выводим только в случае не спрятанных колонок
      if exWks.Range['H:H'].EntireColumn.Hidden = False then
        exWks.Range['H' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('vagon_name').AsString;
      if exWks.Range['I:I'].EntireColumn.Hidden = False then
        exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('doc_name').AsString;

      exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['K' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['K' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['L' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['L' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['N' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['M' + IntToStr(10 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      exWks.Range['O' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;

      // Для СФХ-Приволжск - не считем не сумму, а сумму без НДС
      if cod_shablon = 307 then
        exWks.Range['P' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa_no_nds').AsCurrency;
      // Для СФХ-Приволжск - не считем не сумму, а сумму без НДС
      if cod_shablon <> 307 then
        exWks.Range['R' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

      inc(recNo);
    end;

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;
  exWks.Select;
  exWks.Range['A1'].Select;

  // Отчет к Акту
  if (cod_shablon = 217) or ((cod_shablon = 307)) then begin
    Report_SFHPrivolzhsk(cod_shablon, retActSettings, exWkb, str_bargain_id, retActSettings[6][11]);
    exWks.Select;
  end;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['R' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton87Click(Sender: TObject);
var exWks, exApp : Variant;
           row_0 : integer;
              SP : TADOStoredProc;
  str_bargain_id : string;
     date1,date2 : TDateTime;

begin
  Screen.Cursor := crHourglass;
  date1 := Date;
  date2 := Date;
  fmPeriod := TfmPeriod.Create(Application, date1, date2, 1);

  if fmPeriod.ShowModal=mrOK then begin
    date1 := fmPeriod._GetDateBegin;
    date2 := fmPeriod._GetDateEnd;
  end else exit;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  ShowTextMessage('Запуск Excel...', False);
  exApp := CreateOleObject('Excel.Application');
  exApp.Workbooks.Add(GetDocBlob(Fconnect, 140, 9, True)); // 'Анализ простоя'
  exWks := exApp.ActiveWorkbook.WorkSheets[1];

  SP := TADOStoredProc.Create(nil);
  SP.Connection := Fconnect;
  SP.ProcedureName := 'sp_Report_analiz_fact';
  SP.Parameters.Refresh;
  SP.Parameters.ParamByName('@str_bargain_id').Value := str_bargain_id;
  SP.Parameters.ParamByName('@date1').Value := date1;
  SP.Parameters.ParamByName('@date2').Value := date2;

  SP.Open;

  exWks.Range['B3'].Value := 'по дате отпр. за период с ' + DateToStr(date1) + ' - ' + DateToStr(date2);

  row_0 := 6;

  while not SP.EOF do begin
    exWks.Range['B' + IntToStr(row_0)].Value := SP.FieldByName('bargain_cod').AsString;
    exWks.Range['C' + IntToStr(row_0)].Value := SP.FieldByName('firm_customer_name').AsString;
    exWks.Range['D' + IntToStr(row_0)].Value := SP.FieldByName('num_vagon').Value;
    exWks.Range['E' + IntToStr(row_0)].Value := SP.FieldByName('node_begin_name').AsString;
    exWks.Range['F' + IntToStr(row_0)].Value := SP.FieldByName('node_end_name').AsString;
    exWks.Range['G' + IntToStr(row_0)].Value := SP.FieldByName('kargoETSNG_name').AsString;

    exWks.Range['H' + IntToStr(row_0)].Value := OleVariant(iif(VarIsNull(SP.FieldByName('date_end_last').Value),' ',SP.FieldByName('date_end_last').Value));
    exWks.Range['I' + IntToStr(row_0)].Value := SP.FieldByName('date_from_to').Value;

    exWks.Range['M' + IntToStr(row_0)].Value := SP.FieldByName('datpr').Value;
    exWks.Range['N' + IntToStr(row_0)].Value := SP.FieldByName('date_begin_next').Value;
    exWks.Range['K' + IntToStr(row_0)].Value := SP.FieldByName('free_idle_day').Value;
    exWks.Range['P' + IntToStr(row_0)].Value := SP.FieldByName('free_idle_day').Value;
    SP.Next;
    if not SP.Eof then begin
      xCopyRow(exApp,row_0 + 1,row_0 +1);
      inc(row_0);
    end;
  end;

  exApp.Rows[IntToStr(row_0 + 1) + ':' + IntToStr(row_0 + 1)].Select;
  exApp.Selection.Delete;

  exApp.Visible := True;
  exApp.Range['A1'].Select;
  VarClear(exWks); VarClear(exApp);
  SP.Free;
  ShowTextMessage('', True);
  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton88Click(Sender: TObject);
var    exApp, exWkb, exWks : OleVariant;
                         i : integer;
                date1,date2: TDateTime;
                        SP : TADOStoredProc;
                OpenDialog : TOpenDialog;
                 file_name : string;
               contract_id : integer;
                       str : string;
begin
  fmContract := TfmContract.Create(Application, True, 0);
  fmContract.cxPageControl1.ActivePageIndex := 1;
  fmContract.Visible := False;

  if fmContract.ShowModal=mrOk then begin
    contract_id :=  fmContract._GetContractId;
  end else exit;

  fmContract.Free;

  fmPeriod := TfmPeriod.Create(Application, Fdate1, Fdate2, 1);
  if fmPeriod.ShowModal = mrOK then begin
    Screen.Cursor := crHourglass;
    date1 := fmPeriod._GetDateBegin;
    date2 := fmPeriod._GetDateEnd;
  end else exit;

  fmPeriod.Free;

  OpenDialog := TOpenDialog.Create(nil);
  OpenDialog.Filter := 'Excel файлы|*.xls';
  OpenDialog.DefaultExt := 'xls';

  if OpenDialog.Execute then begin
    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.ProcedureName := 'sp_Report_analiz_arenda';

    file_name := OpenDialog.FileName;
    ShowTextMessage('Запуск сервера автоматизации...',False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Open(file_name);
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];

    exWks.Range['J1:N1'].Interior.ColorIndex := 35;
    exWks.Range['A1:N1'].AutoFilter;
    exWks.Range['A1:N1'].AutoFilter;

    exWks.Range['J1'].Value := '№ Вагона';
    exWks.Range['K1'].Value := 'Аренда, дн.';
    exWks.Range['L1'].Value := '№ Перевозки';
    exWks.Range['M1'].Value := '№Записи перевозки';
    exWks.Range['N1'].Value := '№Записи факта';

    i := 2;
    while True do begin
      if (TVarData(exWks.Cells[i, 3].Value).VType = varEmpty) then
        break
      else begin
        try
          str := iif(VarToStr(exWks.Cells[i, 3].Value) = '', null, exWks.Cells[i, 3].Value);
          SP.Close;
          SP.Parameters.Refresh;
          SP.Parameters.ParamByName('@num_vagon').Value   := str;
          SP.Parameters.ParamByName('@contract_id').Value := contract_id;
          SP.Parameters.ParamByName('@date_begin').Value  := date1;
          SP.Parameters.ParamByName('@date_end').Value    := date2;

          try
            SP.Open;
            exWks.Cells[i, 10].Value := SP.FieldByName('num_vagon').Value;
            exWks.Cells[i, 11].Value := SP.FieldByName('sum_quantity').Value;
            exWks.Cells[i, 12].Value := SP.FieldByName('str_bargain_cod').AsString;
            exWks.Cells[i, 13].Value := SP.FieldByName('str_bargain_id').Value;
            exWks.Cells[i, 14].Value := SP.FieldByName('str_fact_id').Value;
            exWks.Cells[i, 15].Value := '  ';
          except
            Application.MessageBox(PChar('Ошибка. Строка №'+IntToStr(i)+'.'), 'Ошибка', MB_OK or MB_ICONSTOP);
          end;

          ShowTextMessage('Обработано ' + IntToStr(i) + ' записей.', False);
          i := i+1;
        except
          on E: Exception do begin
            Application.MessageBox(PChar('Ошибка в Excel файле. Строка №'+IntToStr(i)+'.' + #10 + E.Message), 'Ошибка', MB_OK or MB_ICONSTOP);
            exWkb.Saved := True;
            exApp.Quit;
            VarClear(exWkb); VarClear(exApp); VarClear(exWks);
            Screen.Cursor := crDefault;
            ShowTextMessage();
            OpenDialog.Free;
            exit;
          end;
        end;
      end;
    end;
    exWks.Range['K1:K' + IntToStr(i)].NumberFormat := Olevariant('0');
    exWks.Range['J1:J' + IntToStr(i)].NumberFormat := Olevariant('@');
    exWks.Range['L1:L' + IntToStr(i)].NumberFormat := Olevariant('@');
    exWks.Range['M1:M' + IntToStr(i)].NumberFormat := Olevariant('@');
    exWks.Range['N1:N' + IntToStr(i)].NumberFormat := Olevariant('@');


    exWks.Range['J1:N'+IntToStr(i)].Borders[1].LineStyle := 1;
    exWks.Range['J1:N'+IntToStr(i)].Borders[2].LineStyle := 1;
    exWks.Range['J1:N'+IntToStr(i)].Borders[9].LineStyle := 1;

    exApp.Range['A1'].Select;
    exApp.Visible := True;
    VarClear(exWkb); VarClear(exApp); VarClear(exWks);
    Screen.Cursor := crDefault;
    ShowTextMessage();
    OpenDialog.Free;
  end else begin
    Screen.Cursor := crDefault;
    ShowTextMessage();
    OpenDialog.Free;
    exit;
  end;
  SP.Free;
end;

procedure TfmAgree2.LocateBargainID(bargain_id: integer);
var Q : TADOQuery;
begin
  Screen.Cursor := crHourGlass;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT * FROM view_bargain_rights WHERE bargain_id = ' + IntToStr(bargain_id));
  Q.Open;

  if Q.RecordCount > 0 then begin
    Fdate1 := Q.FieldByName('date_period').AsDateTime;
    Fdate1 := Fdate1 - DayOf(Fdate1) + 1;
    Fdate2 := IncMonth(Fdate1, 1) - 1;
    dxBarSubItem3.Caption := FormatDateTime('mmmm yyyy', Fdate1);

    Factive_users_id := Q.FieldByName('users_owner_id').AsInteger;
    Caption := 'Перевозки по договорам (' + Q.FieldByName('FIO_users_owner').AsString +')';

    RefreshProcedure(bargain_id,-9);
  end else begin
    Application.MessageBox('Перевозка не найдена.', 'Сообщение', MB_ICONINFORMATION or MB_OK);
  end;

  Q.Free;
  Screen.Cursor := crDefault;

end;

procedure TfmAgree2.dxBarButton_GetFactSumClick(Sender: TObject);
begin
  Screen.Cursor := crHourglass;
  set_FactSum := TControl(Sender).Tag;

  SP_FactClient.Close;
  SP_FactClient.Parameters.ParamByName('set_main').Value := set_main;
  SP_FactClient.Parameters.ParamByName('type_fact_sum').Value := set_FactSum;
  SP_FactClient.Open;
  case set_FactSum of
    0 : begin
          cxLabel6.Caption := 'Установлен фильтр "Факт с привязкой к С-Ф."';
          Panel1.Visible := True;
        end;
    1 : begin
          cxLabel6.Caption := 'Установлен фильтр "Факт без привязки к С-Ф."';
          Panel1.Visible := True;
        end;
    2 : begin
          cxLabel6.Caption := '                             ';
          if (dxBarButton12.Down and dxBarButton_AllFactSum.Down ) then
            Panel1.Visible := False;
        end;
  end;

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton_GotoSumFactClick(Sender: TObject);
var           i : integer;
    str_fact_id : string;
begin
  str_fact_id := GetStrId(cxGrid2DBBandedTableView1fact_id, ',');
  if str_fact_id = '' then begin
    Application.MessageBox('Выберите вагоны!', 'Внимание', MB_ICONWARNING or MB_OK);
    exit;
  end;


  for i:=0 to MDIChildCount-1 Do
    if (MDIChildren[i].ClassName = 'TfmFactSum') then begin
      MDIChildren[i].Free;
      break;
    end;

  fmFactSum := TfmFactSum.Create(Application, False);
  fmFactSum._SetFactID := str_fact_id;
end;

procedure TfmAgree2.dxBarButton_ToZFTOScoreClick(Sender: TObject);
var                  Q : TADOQuery;
                     i : integer;
             show_form : boolean;
   zfto_score_table_id : integer;
begin
  try
    zfto_score_table_id := -9;
    Q := TADOQuery.Create(nil);
    Q.Connection := Fconnect;
    Q.SQL.Add('DECLARE @vagon_num varchar(200), @number_doc varchar(200), @st_src varchar(200)');
    Q.SQL.Add('SELECT @vagon_num = :vagon_num, @number_doc = :number_doc, @st_src = :st_src');
    Q.SQL.Add('');
    Q.SQL.Add('SELECT DISTINCT(v.number_doc) AS number_doc , v.zfto_score_id, v.fact_num, ROW_NUMBER() OVER (ORDER BY v.number_doc ASC) row_num, v.fact_date, v.number_doc, v.number_act, v.zfto_score_act_id, c.firm_customer_name, v.vagon_num, v.zfto_score_table_id ');
    Q.SQL.Add(' FROM view_ZFTO_score_table v INNER JOIN view_contract c ON v.contract_id = c.contract_id');
    Q.SQL.Add(' WHERE LTRIM(v.number_doc) = LTRIM(@number_doc)');
    Q.SQL.Add(' AND (');
    Q.SQL.Add('   (v.vagon_num = @vagon_num)'); // Совпадение по вагону
    Q.SQL.Add('   OR');
    Q.SQL.Add('   (v.st_src = @st_src AND NULLIF(v.vagon_num, '''') IS NULL)'); // Совпадение по направлению (вагон = пустой)
    Q.SQL.Add('   OR');
    Q.SQL.Add('   (v.numact_cor IS NOT NULL AND NULLIF(v.vagon_num, '''') IS NULL)'); // Корр с/ф (вагон пустой, акт ЦФТО корр.)
    Q.SQL.Add(' )');
    Q.SQL.Add(' GROUP BY v.number_doc, v.zfto_score_id, v.fact_num, v.fact_date, v.number_doc, v.number_act, v.zfto_score_act_id, c.firm_customer_name, v.vagon_num, v.zfto_score_table_id');


    Q.Parameters.ParamByName('vagon_num' ).Value := cxGrid2DBBandedTableView1num_vagon.DataBinding.Field.AsInteger;
    Q.Parameters.ParamByName('number_doc').Value := cxGrid2DBBandedTableView1num_document_pref.DataBinding.Field.AsString + cxGrid2DBBandedTableView1num_document.DataBinding.Field.AsString;
    Q.Parameters.ParamByName('st_src'    ).Value := cxGrid2DBBandedTableView1node_begin_cod.DataBinding.Field.AsString;
    Q.Open;

    case Q.RecordCount of
      0 : begin
            Application.MessageBox('ПОИСК НЕ ДАЛ РЕЗУЛЬТАТОВ ', 'ВНИМАНИЕ', MB_OK);
            exit;
          end;
      1 : begin
            if Q.FieldByName('zfto_score_table_id') <> nil then
              zfto_score_table_id := Q.FieldByName('zfto_score_table_id').AsInteger;
          end;
      else
          begin
            fmFilter := TfmFilter.Create(0, Q, 'row_num', 'number_doc', 'zfto_score_id');
            fmFilter._SetInvoiceScoreZFTO('row_num', 'number_doc', 'zfto_score_id', 'fact_date','fact_num','','number_act', 'firm_customer_name');
            if fmFilter.ShowModal = mrOk then begin
              Screen.Cursor := crHourglass;
              Q.Locate('row_num', fmFilter.GetId, [loCaseInsensitive]);
              if Q.FieldByName('zfto_score_table_id') <> nil then
                zfto_score_table_id := Q.FieldByName('zfto_score_table_id').AsInteger;
            end else begin
              fmFilter.free;
              exit;
            end;
          end;
    end;
    show_form := False;
    for i:=0 to fmMain.MDIChildCount-1 do begin
      if (fmMain.MDIChildren[i].ClassName = 'TfmZFTOScore') then begin
        fmMain.MDIChildren[i].Show;
        show_form := True;
      end;
    end;
    if not show_form then
      fmZFTOScore := TfmZFTOScore.Create(Application, False);

    fmZFTOScore._SetFactInc(Q.FieldByName('zfto_score_id').AsInteger);
    if zfto_score_table_id <> -9 then
      fmZFTOScore._SetFactIncTable(Q.FieldByName('zfto_score_table_id').AsInteger);
  finally
    Q.Free;
  end;
end;

procedure TfmAgree2.dxBarButton_TransportPayRefreshClick(Sender: TObject);
var str_fact_id : string;
              Q : TADOQuery;
             SP : TADOStoredProc;
              i : integer;
begin
  Screen.Cursor := crHourglass;
  if Application.MessageBox(PChar('Значение поля "Сумма", для выделенных вагонов, будет изменена!' + Chr(13) + 'Пересчитать?'), 'Внимание', MB_OKCANCEL + MB_ICONWARNING) = ID_CANCEL then
    exit;

  str_fact_id := cx_GetSelectedValues(cxGrid2, 'fact_id');

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT count(*) AS cnt FROM view_etran_link_fact');
  Q.SQL.Add('WHERE fact_id IN (' + str_fact_id + ')');
  Q.SQL.Add('AND (xml_reply_id IS NOT NULL)');
  Q.Open;

  if (Q.RecordCount > 0) then begin
    Application.MessageBox('Невозможно обновить вагоны Этран.', 'Ошибка', MB_ICONERROR or MB_OK);
    Q.Free;
    Screen.Cursor := crDefault;
    exit;
  end;
  Q.Free;

  SP := TADOStoredProc.Create(nil);
  SP.Connection := Fconnect;
  SP.CommandTimeout := 120;
  SP.ProcedureName := 'sp_fact_update';

  for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
    ShowTextMessage('Осталось ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i) + ' записей...', False);
    try
      SP.Parameters.Refresh;
      SP.Parameters.ParamByName('@fact_id').Value     := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      SP.Parameters.ParamByName('@type_action').Value := TComponent(Sender).Tag;
      SP.ExecProc;
    except
    end;
  end;

  SP.Free;
  RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');
  ShowTextMessage;

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarPopupMenu4Popup(Sender: TObject);
begin
  dxBarSubItem18.Tag := TdxBarPopupMenu(Sender).Tag;
end;

procedure TfmAgree2.dxBarButton_AddSFClick(Sender: TObject);
var str_fact_id : string;
begin
  str_fact_id := cx_GetSelectedValues(cxGrid2, 'fact_id');
  if str_fact_id = '' then
    exit;
  fmZFTOScoreAdd := TfmZFTOScoreAdd.Create(Application);
  fmZFTOScoreAdd._SetCopyFact := str_fact_id;
  if fmZFTOScoreAdd.ShowModal = mrOk then begin
  end;
end;

procedure TfmAgree2.dxBarButton_RefreshWeightClick(Sender: TObject);
var  _fmAgree2 :  TfmAgree2;
            SP : TADOStoredProc;
             i : integer;
begin
  if cxGrid2DBBandedTableView1.Controller.SelectedRowCount = 0  then begin
    Application.MessageBox('Выделите вагоны.', 'Внимание', MB_ICONWARNING or MB_OK);
    exit;
  end;

  if DeleteFrahtCard(cxGrid2DBBandedTableView1.Controller.SelectedRows[0].Values[cxGrid2DBBandedTableView1bargain_id.Index], Fconnect) = False then
    Exit;

  _fmAgree2 := TfmAgree2.Create(Application, True);
  _fmAgree2._SetTypeOpenForm := 1;
  if _fmAgree2.ShowModal <> mrOk then begin
    exit;
  end;
    Fstr_bargain_id := _fmAgree2._GetStrBargainId;

  try
    SP := TADOStoredProc.Create(nil);
    SP.Connection := Fconnect;
    SP.CommandTimeout := 120;
    SP.ProcedureName := 'sp_vagon_weight_modify';
    for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount-1 do begin
      SP.Parameters.Refresh;
      SP.Parameters.ParamByName('@type_action').Value := 0;
      SP.Parameters.ParamByName('@fact_id').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];
      SP.Parameters.ParamByName('@str_bargain_id').Value := Fstr_bargain_id;
      SP.ExecProc;
      ShowTextMessage('Осталось обновить'+ IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount-i) + ' записей...', False);
    end;
    RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');
  finally
    ShowTextMessage();
    SP.free;
  end;
end;

procedure TfmAgree2.dxBarButton145Click(Sender: TObject);
var str_fact_id : string;
              Q : TADOQuery;
             SP : TADOStoredProc;
              i : integer;
begin
  Screen.Cursor := crHourglass;

  if cxGrid2DBBandedTableView1.Controller.SelectedRowCount = 0  then begin
    Application.MessageBox('Выделите вагоны.', 'Внимание', MB_ICONWARNING or MB_OK);
    exit;
  end;

  str_fact_id := cx_GetSelectedValues(cxGrid2, 'fact_id');

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT count(*) AS cnt FROM view_etran_link_fact');
  Q.SQL.Add('WHERE fact_id IN (' + str_fact_id + ')');
  Q.SQL.Add('AND (xml_reply_id IS NOT NULL)');
  Q.Open;


  if (Q.RecordCount > 0) AND (TComponent(Sender).Tag = 1) then begin
    Application.MessageBox('Невозможно обновить вагоны Этран.', 'Ошибка', MB_ICONERROR or MB_OK);
    Q.Free;
    Screen.Cursor := crDefault;
    exit;
  end;

  if DeleteFrahtCard(cxGrid2DBBandedTableView1.Controller.SelectedRows[0].Values[cxGrid2DBBandedTableView1bargain_id.Index], Fconnect) = False then
    Exit;


  SP := TADOStoredProc.Create(nil);
  SP.Connection := Fconnect;
  SP.CommandTimeout := 120;
  SP.ProcedureName := 'sp_fact_update';

  for i:=0 to cxGrid2DBBandedTableView1.Controller.SelectedRowCount - 1 do begin
    ShowTextMessage('Осталось ' + IntToStr(cxGrid2DBBandedTableView1.Controller.SelectedRowCount - i) + ' записей...', False);

    //try
      SP.Parameters.Refresh;
      SP.Parameters.ParamByName('@type_action').Value := 5;
      SP.Parameters.ParamByName('@fact_id').Value := cxGrid2DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid2DBBandedTableView1fact_id.Index];;
      SP.ExecProc;
    //finally
     // SP.free;
  //  end;
  end;

  RefreshQueryGrid(cxGrid2DBBandedTableView1, 'fact_id');
  ShowTextMessage;

  Screen.Cursor := crDefault;
end;

procedure TfmAgree2.dxBarButton147Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
//  firm_property_cod   : string;
  PrintArea           : string;
  Query_Currency      : TADOQuery;
  ClientDS_distance   : TClientDataSet;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 58  = 'Акт оказанных услуг (RUS)'
  // 384 = 'Акт оказанных услуг (RUS) (СФ по расстояниям)'
  // 426 = 'Акт оказанных услуг + Расчет объема оказанных услуг'
  // 438 = 'Акт оказанных услуг + Расчет объема оказанных услуг (НЗНП)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDVAGON or ACT_SET_ADDSIGN or ACT_SET_OTHER_EXCHANGE or ACT_SET_PRINTCOMMENT or ACT_SET_ROUTE_n_KARGOFROMFACT or ACT_SET_RECALC_DISTANCE);
  if retActSettings[0] = -9 then
    exit;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['P3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B15'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B16'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B18'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['M18'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B20'].Value := VarToStr(retActSettings[14][1]);
    exWks.Range['E20'].Value := retActSettings[13][1];
  end else
    exWks.Range['B20:G20'].ClearContents;
  if retActSettings[13][5] = True then begin
    exWks.Range['B22'].Value := VarToStr(retActSettings[14][4]);
    exWks.Range['E22'].Value := retActSettings[13][4];
  end else
    exWks.Range['B22:G22'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['M20'].Value := VarToStr(retActSettings[14][7]);
    exWks.Range['P20'].Value := retActSettings[13][7];
  end else
    exWks.Range['M20:Q20'].ClearContents;
  if retActSettings[13][11] = True then begin
    exWks.Range['M22'].Value := VarToStr(retActSettings[14][10]);
    exWks.Range['P22'].Value := retActSettings[13][10];
  end else
    exWks.Range['M22:Q22'].ClearContents;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['20:22'].Copy;
    exWks.Rows['24:26'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B24'].Value := 'Дата подписания';
    exWks.Range['B26'].Value := '"____" __________________ 201__';
    exWks.Range['M24'].Value := 'Дата подписания';
    exWks.Range['M26'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['L10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
  exWks.Range['N10'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['O10'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['P10'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['Q10'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // Валюта эквивалента
  if (retActSettings[6][7] <> null) then begin
    // Валюта отчета
    if retActSettings[7][0] <> 3 then begin
      exWks.Range['R9'].Value := 'Курс ' + VarToStr(retActSettings[7][1]);
    end else begin
      exWks.Columns['R:R'].Hidden := True; // Если рубли, то скрываем столбец
    end;
    // Валюта эквивалента
    if retActSettings[6][7] <> 3 then begin
      Query_Currency := TADOQuery.Create(nil);
      Query_Currency.Connection := Fconnect;
      Query_Currency.SQL.Add('SELECT * FROM currency');
      Query_Currency.Open;
      Query_Currency.Locate('currency_id', retActSettings[6][7], []);

      exWks.Range['S9'].Value := 'Курс '         + Query_Currency.FieldByName('brief_name').AsString;
      exWks.Range['T9'].Value := 'Cумма с НДС, ' + Query_Currency.FieldByName('brief_name').AsString;
      Query_Currency.Free;
    end else begin
      exWks.Columns['S:S'].Hidden := True; // Если рубли, то скрываем столбец
    end;
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['I10'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B16']);

  // Особые условия
  if (retActSettings[6][9] = True) then begin
    exWks.Rows['15'].Insert;
    exWks.Rows['16'].Copy;
    exWks.Rows['15'].PasteSpecial(1);

    exWks.Range['B15'].Value := ReplaceStr(VarToStr(retActSettings[11]), #13, '');
    AutoFitMergeCell(exWks.Range['B15']);
  end;

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_basic_SFH;1';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'        ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'      ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'         ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'           ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'        ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'       ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
//  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact' ).Value := retActSettings[6][6];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    if (SP_Balans_Detail.FieldByName('bargain_correct_type').AsInteger = 1) or (SP_Balans_Detail.FieldByName('summa').AsCurrency > 0) then begin
      exWks.Rows[IntToStr(11 + recNo)].Insert;
      exWks.Rows[IntToStr(10 + recNo)].Copy;
      exWks.Rows[IntToStr(11 + recNo)].PasteSpecial(1);

      if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
        exWks.Range['A' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
      else // Доп. сбор.
        exWks.Range['A' + IntToStr(10 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks.Range['C' + IntToStr(10 + recNo)].Value := recNo;
      exWks.Range['D' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('service_kind').AsString;
      if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
      else
        exWks.Range['E' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['F' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['G' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;

      exWks.Range['H' + IntToStr(10 + recNo)].Value := null;
      if exWks.Range['H:H'].EntireColumn.Hidden = False then begin
        // Заполняем, если колонка не спрятана
        // Расстояние
        if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('node_begin_cod').AsString, SP_Balans_Detail.FieldByName('node_end_cod').AsString]), []) then begin
          ClientDS_distance.Append;
          ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('node_begin_cod').AsString;
          ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('node_end_cod').AsString;
          ClientDS_distance.FieldByName('distance').Value      := null;
          ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_period').AsDatetime);
          ClientDS_distance.Post;
        end;
        exWks.Range['H' + IntToStr(10 + recNo)].Value := ClientDS_distance.FieldByName('distance').Value;

      end;

      exWks.Range['I' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['J' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['J' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['K' + IntToStr(10 + recNo)].Value := null
      else
        exWks.Range['K' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['M' + IntToStr(10 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['L' + IntToStr(10 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);
      exWks.Range['N' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('rate').AsCurrency;

      exWks.Range['Q' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('summa').AsCurrency;

      // Валюта эквивалента
      if retActSettings[6][7] <> Null then begin
        case retActSettings[7][0] of
          1 : exWks.Range['R' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_USD_val').AsFloat;
          3 : exWks.Range['R' + IntToStr(10 + recNo)].Value := 1;
          5 : exWks.Range['R' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_CHF_val').AsFloat;
          6 : exWks.Range['R' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_EUR_val').AsFloat;
        end;
        case retActSettings[6][7] of
          1 : exWks.Range['S' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_USD_val').AsFloat;
          3 : exWks.Range['S' + IntToStr(10 + recNo)].Value := 1;
          5 : exWks.Range['S' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_CHF_val').AsFloat;
          6 : exWks.Range['S' + IntToStr(10 + recNo)].Value := SP_Balans_Detail.FieldByName('exchange_EUR_val').AsFloat;
        end;
      end;

      inc(recNo);
    end;

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(10 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(10 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(10 + recNo)].ClearContents;
    recNo := 2;
  end;

  // Выравнивание по ширине (суммы и вес)
  exWks.Range['J10:K' + IntToStr(10 + recNo)].Columns.AutoFit;
  exWks.Range['O10:Q' + IntToStr(10 + recNo)].Columns.AutoFit;
  // после автовыравнивания, спрятанная колонка может появится
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Валюта эквивалента
  if retActSettings[6][7] = Null then
    exWks.Columns['R:T'].Delete;

  // Отчет к Акту
  if (cod_shablon = 426) or (cod_shablon = 438) then
    Report_WorkVolume(retActSettings, exWkb, str_bargain_id, SP_Balans_Detail);

  exWks.Select;
  exWks.Range['A1'].Select;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['Q' + IntToStr(10 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton149Click(Sender: TObject);
begin
  PrintcxGridToXML(cxGrid1DBBandedTableView1);
end;



procedure TfmAgree2.dxBarButton150Click(Sender: TObject);
var            i : integer;
   QuerySettings : Variant;
              SP : TADOStoredProc;
               Q : TADOQuery;
     str_trip_id : string;
begin

  if cxGrid1DBBandedTableView1bargain_id.DataBinding.Field <> nil then
    if cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.Value <> null then begin

      QuerySettings := ShowFactTrackVagonDlg(Application.Handle, usr_pwd, 1);
      if QuerySettings[0] = -9 then exit;

      fmFactTrack := TfmFactTrack.Create(Application, True, 1);
      fmFactTrack._SetVagonSQL := QuerySettings;
      if fmFactTrack.ShowModal = mrOk then begin
        str_trip_id := fmFactTrack._GetStrTrip_id;
        ShowTextMessage('Обновление информации ...', False);
        try
          SP := TADOStoredProc.Create(nil);
          SP.Connection := fmMain.Lis;
          SP.ProcedureName := 'sp_fact_insert_from_fact_track';
          SP.Parameters.Refresh;
          Q := TADOQuery.Create(nil);
          Q.Connection := fmMain.Lis;
          Q.SQL.Add('SELECT * FROM dbo.StrToTbl(''' + str_trip_id + ''', default)') ;
          Q.Open;

          while not Q.Eof do begin
            SP.Close;
            SP.Parameters.ParamByName('@fact_track_id').Value := Q.FieldByName('cod').AsInteger;
            SP.Parameters.ParamByName('@bargain_id').Value    := cxGrid1DBBandedTableView1bargain_id.DataBinding.Field.AsInteger;
            SP.Parameters.ParamByName('@type_action').Value   := 4;
            SP.ExecProc;

            ShowTextMessage('Осталось '+IntToStr(Q.RecordCount - Q.RecNo)+' записей...', False);
            Q.Next;
          end;
          ShowTextMessage('Обновление информации ...', False);
          ShowTextMessage('', True);
        finally
          SP.Free;
          Q.Free;
          ShowTextMessage('', True);
        end;
      end;
      RefreshProcedure(-9,-9);
    end;
end;

procedure TfmAgree2.dxBarButton151Click(Sender: TObject);
var
  exApp, exWkb, exWks : Variant;
  SP_Report           : TADOStoredProc;
  recNo               : integer;
  acts_id             : integer;

  cod_shablon         : integer;

  _fmActs             : TfmActs;
  ClientDS_distance   : TClientDataSet;
begin
  cod_shablon := TComponent(Sender).Tag;
  // 272 = 'Приложение к порожнему рейсу'

  Application.MessageBox('Для формирования отчета необходимо выбрать АКТ-основание', 'Внимание', MB_OK or MB_ICONINFORMATION);
  _fmActs := TfmActs.Create(Application, False);
  _fmActs._SetFilterActs(-9, Fdate1, Fdate2, '', -9, False);
  if _fmActs.ShowModal <> mrOk then exit;
  acts_id := _fmActs._GetActsID;

  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  ShowTextMessage('Подготовка данных ...', False);

  SP_Report := TADOStoredProc.Create(nil);
  SP_Report.Connection := Fconnect;
  case cod_shablon of
    272 : SP_Report.ProcedureName := 'sp_Report_AttachFromAct_EmptyTrip';
  end;
  SP_Report.Parameters.Refresh;
  SP_Report.Parameters.ParamByName('@acts_id').Value := acts_id;
  SP_Report.CommandTimeout := 100;
  SP_Report.Open;

  // Шапка
  exWks.Range['D3'].Value := 'ПРИЛОЖЕНИЕ К АКТУ № ' +
                             VarToStr(SP_Report.Parameters.ParamByName('@acts_cod').Value) +
                             ' от ' +
                             FormatDateTime('dd.mm.yyyy г.', SP_Report.Parameters.ParamByName('@acts_date').Value);

  // Заполняем таблицу

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  recNo := 7;
  while not SP_Report.Eof do begin
    exWks.Rows[IntToStr(1 + recNo)].Insert;
    exWks.Rows[IntToStr(0 + recNo)].Copy;
    exWks.Rows[IntToStr(1 + recNo)].PasteSpecial(1);

    exWks.Range['B' + IntToStr(recNo)].Value := SP_Report.RecNo;
    exWks.Range['C' + IntToStr(recNo)].Value := SP_Report.FieldByName('num_vagon').Value;
    exWks.Range['D' + IntToStr(recNo)].Value := SP_Report.FieldByName('node_begin_name').AsString;
    exWks.Range['E' + IntToStr(recNo)].Value := SP_Report.FieldByName('node_end_name').AsString;
    exWks.Range['F' + IntToStr(recNo)].Value := SP_Report.FieldByName('prev_kargoETSNG_name').AsString;
    exWks.Range['G' + IntToStr(recNo)].Value := SP_Report.FieldByName('prev_node_begin_name').AsString;
    exWks.Range['H' + IntToStr(recNo)].Value := SP_Report.FieldByName('prev_date_from_to').Value;
    exWks.Range['I' + IntToStr(recNo)].Value := SP_Report.FieldByName('prev_num_document').AsString;
    exWks.Range['J' + IntToStr(recNo)].Value := SP_Report.FieldByName('date_from_to').Value;
    exWks.Range['K' + IntToStr(recNo)].Value := SP_Report.FieldByName('date_delivery').Value;
    exWks.Range['L' + IntToStr(recNo)].Value := SP_Report.FieldByName('num_document').AsString;
    exWks.Range['M' + IntToStr(recNo)].Value := SP_Report.FieldByName('prev_fact_weight').Value;
    exWks.Range['N' + IntToStr(recNo)].Value := SP_Report.FieldByName('our_rate_val').Value;

    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Report.FieldByName('prev_node_begin_cod').AsString, SP_Report.FieldByName('prev_node_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Report.FieldByName('prev_node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Report.FieldByName('prev_node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, False, SP_Report.FieldByName('date_from_to').Value);

      ClientDS_distance.Post;
    end;
    exWks.Range['O' + IntToStr(recNo)].Value := ClientDS_distance.FieldByName('distance').Value;

    inc(recNo);

    ShowTextMessage('Осталось ' + IntToStr(SP_Report.RecordCount - SP_Report.RecNo), False);
    SP_Report.Next;
  end;

  exWks.Rows[IntToStr(recNo)].Delete;
  if SP_Report.RecordCount > 0 then exWks.Rows[IntToStr(recNo)].Delete;
  SP_Report.Free;

  exWks.Range['A1'].Select;

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton157Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp           : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  nds_rate            : Currency;

  str_expeditor       : array [1..2] of string;
  PrintArea           : string;

  cod_shablon         : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  //275 = 'Акт оказанных услуг (ТАИФ)'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
//  firm_property_cod:= Query_tmp.FieldByName('firm_property_cod').AsString;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := cx_GetSelectedValues(cxGrid1, 'bargain_id');

  retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ALLPARAMFROMFACT);
  if retActSettings[0] = -9 then
    exit;


  Screen.Cursor := crHourglass;
  ShowTextMessage('Формирование отчёта...', False);

  ShowTextMessage('Запуск Excel ...', False);
  exApp := CreateOleObject('Excel.Application');
  exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
  exWkb := exApp.ActiveWorkbook;
  exWks := exWkb.WorkSheets[1];

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['C2'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                             'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                             'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
  exWks.Range['O3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                             ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                             ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

  exWks.Range['B7'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                             'указанные ниже, ' +
                             'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B16'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
  exWks.Range['B17'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                              'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B19'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['L19'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // Подписанты
  if retActSettings[13][2] = True then
    exWks.Range['B21'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
  else
    exWks.Range['B21'].Value := Null;
  if retActSettings[13][5] = True then
    exWks.Range['B23'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
  else
    exWks.Range['B23'].Value := Null;
  if retActSettings[13][8] = True then
    exWks.Range['L21'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
  else
    exWks.Range['L21'].Value := Null;
  if retActSettings[13][11] = True then
    exWks.Range['L23'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
  else
    exWks.Range['L23'].Value := Null;

  if retActSettings[6][2] = True then begin
    // 1. Раздвинем область печати на 4 строки вниз
    PrintArea := exWks.PageSetup.PrintArea;
    if PrintArea <> '' then begin
      PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
      exWks.PageSetup.PrintArea := WideString(PrintArea);
    end;
    // 2. Копируем формат
    exWks.Rows['21:23'].Copy;
    exWks.Rows['25:27'].PasteSpecial(Paste:=-4122);
    // 3. Добавим нужные нам строки
    exWks.Range['B25'].Value := 'Дата подписания';
    exWks.Range['B27'].Value := '"____" __________________ 201__';
    exWks.Range['L25'].Value := 'Дата подписания';
    exWks.Range['L27'].Value := '"____" __________________ 201__';
  end;

  exWks.Range['K11'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', без НДС';
//  exWks.Range['M11'].Value := 'ставка ' + ReplaceStr(str_expeditor[1] + 'а', 'ьа', 'я') + ', с НДС';

  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['N11'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['O11'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
    exWks.Range['P11'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
  end;

  // ed_izm_cod = '001' // контейнер
  if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
    exWks.Range['H11'].Value := 'кол-во контейнеров';

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B5']);
  AutoFitMergeCell(exWks.Range['B7']);
  AutoFitMergeCell(exWks.Range['B17']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_TAIF';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'        ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@acts_type_cod'      ).Value := cod_shablon;
  SP_Balans_Detail.Parameters.ParamByName('@date_begin'         ).Value := StartOfTheMonth(retActSettings[3][1]);
  SP_Balans_Detail.Parameters.ParamByName('@date_end'           ).Value := EndOfTheMonth(retActSettings[3][2]);
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'        ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_addvagon'       ).Value := retActSettings[6][0];
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact'  ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact'  ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact' ).Value := retActSettings[6][6];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'     ).Value := str_bargain_id;
  SP_Balans_Detail.CommandTimeout := 200;
  SP_Balans_Detail.Open;

  recNo := 1;
  while not SP_Balans_Detail.Eof do begin
    if (SP_Balans_Detail.FieldByName('bargain_correct_type').AsInteger = 1) or (SP_Balans_Detail.FieldByName('summa').AsCurrency > 0) then begin
      exWks.Rows[IntToStr(12 + recNo)].Insert;
      exWks.Rows[IntToStr(11 + recNo)].Copy;
      exWks.Rows[IntToStr(12 + recNo)].PasteSpecial(1);

      if SP_Balans_Detail.FieldByName('type_rec').AsInteger = 1 then
        exWks.Range['A' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value
      else // Доп. сбор.
        exWks.Range['A' + IntToStr(11 + recNo)].Value := -SP_Balans_Detail.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('date_period').AsDatetime;
      exWks.Range['C' + IntToStr(11 + recNo)].Value := recNo;

      exWks.Range['B8'].Value := 'Вид услуги: ' + SP_Balans_Detail.FieldByName('service_kind').AsString;

      if (SP_Balans_Detail.FieldByName('node_begin_name').AsString = '') or (SP_Balans_Detail.FieldByName('node_end_name').AsString = '') then
        exWks.Range['D' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + SP_Balans_Detail.FieldByName('node_end_name').AsString
      else
        exWks.Range['D' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('node_begin_name').AsString + ' - ' + SP_Balans_Detail.FieldByName('node_end_name').AsString;
      exWks.Range['E' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;
      exWks.Range['F' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['G' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('doc_name').AsString;
      exWks.Range['H' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['I' + IntToStr(11 + recNo)].Value := null
      else
        exWks.Range['I' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['J' + IntToStr(11 + recNo)].Value := null
      else
        exWks.Range['J' + IntToStr(11 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
      exWks.Range['L' + IntToStr(11 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      exWks.Range['K' + IntToStr(11 + recNo)].Value := RoundCurr((SP_Balans_Detail.FieldByName('rate').AsCurrency * 100 / (100 + nds_rate)), -2);

      inc(recNo);
    end;

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(11 + recNo)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(11 + recNo)].Delete
  else begin
    exWks.Rows[IntToStr(11 + recNo)].ClearContents;
    recNo := 2;
  end;

  SP_Balans_Detail.Free;

  exWks.Select;
  exWks.Range['A1'].Select;

  SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['O' + IntToStr(11 + recNo)].Value);

  Screen.Cursor := crDefault;
  ShowTextMessage('', True);
//  exApp.Visible := True;
  VarClear(exWks); VarClear(exWkb); VarClear(exApp);
end;

procedure TfmAgree2.dxBarButton158Click(Sender: TObject);
var
  retActSettings         : Variant;
  exApp, exWkb, exWks, exWks2    : Variant;
  sp_Report_return_tarif : TADOStoredProc;
  sp_Report_return_rate  : TADOStoredProc;
  sp_Report_return_zfto  : TADOStoredProc;
  Query_tmp, Q           : TADOQuery;
  recNo, i               : integer;
  contract_agent_id      : integer;
  str_bargain_id         : string;
  str_expeditor          : array [1..2] of string;
  zfto_score_id          : integer;
  rec_begin              : integer;
  fact_no                : integer;
  sum_str                : string;
  str_num, str_text      : string;
  str_zfto_score_id      : string;

  sum_rep                : Variant;
  currency_id            : integer; // Валюта отчета (Валюта подрядчика)
  brief_name             : string;
  client_currency_id     : integer; // Валюта эквивалента (Валюта договора клиента)
  client_brief_name      : string;

  cod_shablon            : integer;
  sp_name                : string;
  PrintArea              : string;
begin
  // 276 - Отчет по возмещению тарифа (ТАИФ) (Вознаграждение)
  // 278 - Отчет по возмещению тарифа (ТАИФ)

  cod_shablon := TComponent(Sender).Tag;

  if SP_Agree.Eof then exit;

  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Close;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Подрядчик, чьи расходы перевыставляем';
  if fmFilter.ShowModal = mrOk then begin

    contract_agent_id := fmFilter.GetId;

    // Проверка на одну валюту для всех выбранных подрядчиков
    // Без проверки (сами виноваты, если получится бред)
    // Берем первую попавшеюся валюту в качестве наименования колонок
    Query_tmp.SQL.Clear;
    Query_tmp.SQL.Add('SELECT DISTINCT currency_id, brief_name FROM view_shaping_rate WHERE bargain_id in (' + str_bargain_id + ') AND contract_agent_id = ' + IntToStr(contract_agent_id));
    Query_tmp.Open;
    currency_id := Query_tmp.FieldByName('currency_id').AsInteger;
    brief_name  := Query_tmp.FieldByName('brief_name').AsString;
    Query_tmp.Free;

    // Имя ХП
    sp_name := 'sp_Report_return_tarif_TAIF';

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1,
                        ACT_SET_ADDSIGN or ACT_SET_COPYREPORT or ACT_SET_ALLPARAMFROMFACT,
                        -9, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    // Запомним валюту договора клиента (она возвращается из процедуры SaveActsBegin)
    client_currency_id := retActSettings[7][0];
    client_brief_name  := retActSettings[7][1];
    // В качестве валюты отчета запишем валюту подрядчика (ибо отчет формируется по этой валюте)
    retActSettings[7]  := VarArrayOf([currency_id, brief_name]);

    // Составим список перечней и если их болше 1, то предложим выбор
    ShowTextMessage('Получение списка перечней...', False);
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := sp_name;
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := null;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 7;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.Parameters.ParamByName('@set_scorezftofromfactinc' ).Value := retActSettings[6][8];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;
    ShowTextMessage;

    if sp_Report_return_zfto.RecordCount = 0 then str_zfto_score_id := '';
    if sp_Report_return_zfto.RecordCount = 1 then str_zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').AsString;
    if sp_Report_return_zfto.RecordCount > 1 then begin
      fmFilter := TfmFilter.Create(0, sp_Report_return_zfto, 'zfto_score_id', 'ktgrm_cod', 'ktgrm_text');
      fmFilter._SetChooseZFTO4Report := True;
      if fmFilter.ShowModal = mrOk then
        str_zfto_score_id := fmFilter._GetStrId
      else
        str_zfto_score_id := '';
    end;
    sp_Report_return_zfto.Free;

    // Запомним выбор для формирования с\ф
    retActSettings[15] := str_zfto_score_id;
    ShowTextMessage;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];
    exWks2 := exWkb.WorkSheets[2];
    //exApp.Visible := True;
    // для ускорения - отключимся от принтера
    try
      exWks2.Select;
      exApp.ActiveWindow.View := 1;
      exWks.Select;
      exApp.PrintCommunication := False;
    except
    end;

    // Перед заполнением спрячем не нужные колонки - если это необходимо
    if VarToStr(retActSettings[10]) <> '' then
      exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

    // Заполняем шапку и подписи

    exWks.Range['B2'].Value := 'о произведенных расходах, подлежащих возмещению, по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                               'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                               'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
    exWks.Range['R3'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

    exWks.Range['B5'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                               ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', именуемое в дальнейшем "' + str_expeditor[2] + '" ,в лице ' + VarToStr(retActSettings[5][2]) +
                               ', с другой стороны, составили настоящий Отчет о нижеследующем :';

    exWks.Range['B6'].Value := '1. ' + str_expeditor[1] + ' во исполнение обязательств по договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г. понес следующие расходы, подлежащие возмещению:';

    exWks.Range['B32'].Value := 'Настоящий Отчет составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                                SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';


    exWks.Range['B15'].Value := 'ВСЕГО подлежит возмещению в адрес ' + VarToStr(retActSettings[12][1]);
    exWks.Range['B35'].Value := VarToStr(retActSettings[12][1]);
    exWks.Range['K35'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

    // Подписанты
    if retActSettings[13][2] = True then begin
      exWks.Range['B37'].Value := VarToStr(retActSettings[14][1]);
      exWks.Range['E37'].Value := retActSettings[13][1];
    end else
      exWks.Range['B37:G37'].ClearContents;
    if retActSettings[13][5] = True then begin
      exWks.Range['B39'].Value := VarToStr(retActSettings[14][4]);
      exWks.Range['E39'].Value := retActSettings[13][4];
    end else
      exWks.Range['B39:G39'].ClearContents;
    if retActSettings[13][8] = True then begin
      exWks.Range['K37'].Value := VarToStr(retActSettings[14][7]);
      exWks.Range['N37'].Value := retActSettings[13][7];
    end else
      exWks.Range['K37:P37'].ClearContents;
    if retActSettings[13][11] = True then begin
      exWks.Range['K39'].Value := VarToStr(retActSettings[14][10]);
      exWks.Range['N39'].Value := retActSettings[13][10];
    end else
      exWks.Range['K39:P39'].ClearContents;

    if retActSettings[6][2] = True then begin
      // 1. Раздвинем область печати на 4 строки вниз
      PrintArea := exWks.PageSetup.PrintArea;
      if PrintArea <> '' then begin
        PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
        exWks.PageSetup.PrintArea := WideString(PrintArea);
      end;
      // 2. Копируем формат
      exWks.Rows['37:39'].Copy;
      exWks.Rows['41:43'].PasteSpecial(Paste:=-4122);
      // 3. Добавим нужные нам строки
      exWks.Range['B41'].Value := 'Дата подписания';
      exWks.Range['B43'].Value := '"____" __________________ 201__';
      exWks.Range['K41'].Value := 'Дата подписания';
      exWks.Range['K43'].Value := '"____" __________________ 201__';
    end;

    // Наименование валюты
    if (currency_id <> 3) then begin
      exWks.Range['L12'].Value := 'Сумма без НДС, ' + brief_name;
      exWks.Range['M12'].Value := 'Сумма НДС, ' + brief_name;
      exWks.Range['N12'].Value := 'Сумма с НДС, ' + brief_name;
    end;

    ShowTextMessage('Подготовка данных ...', False);

    // Нижня таблица - присутсвует только для Отчете № 276
    if (cod_shablon = 276) then begin
      sp_Report_return_rate := TADOStoredProc.Create(nil);
      sp_Report_return_rate.Connection := Fconnect;
      sp_Report_return_rate.ProcedureName := sp_name;
      sp_Report_return_rate.Parameters.Refresh;
      sp_Report_return_rate.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
      sp_Report_return_rate.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
      sp_Report_return_rate.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
      sp_Report_return_rate.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
      sp_Report_return_rate.Parameters.ParamByName('@type_result'              ).Value := 1;
      sp_Report_return_rate.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
      sp_Report_return_rate.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
      sp_Report_return_rate.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
      sp_Report_return_rate.CommandTimeout := 100;
      sp_Report_return_rate.Open;

      recNo := 1;
      while not sp_Report_return_rate.Eof do begin
        exWks.Rows[IntToStr(23 + recNo)].Insert;
        exWks.Rows[IntToStr(22 + recNo)].Copy;
        exWks.Rows[IntToStr(23 + recNo)].PasteSpecial(1);

        exWks.Range['C' + IntToStr(22 + recNo)].Value := sp_Report_return_rate.FieldByName('route_name').AsString;
        exWks.Range['D' + IntToStr(22 + recNo)].Value := sp_Report_return_rate.FieldByName('precalc_rate_nonds').Value;
        exWks.Range['E' + IntToStr(22 + recNo)].Value := sp_Report_return_rate.FieldByName('client_sum_nonds').Value;
        exWks.Range['F' + IntToStr(22 + recNo)].Value := sp_Report_return_rate.FieldByName('client_sum').Value;
        exWks.Range['G' + IntToStr(22 + recNo)].Value := sp_Report_return_rate.FieldByName('agent_sum').Value;
        exWks.Range['I' + IntToStr(22 + recNo)].Value := sp_Report_return_rate.FieldByName('client_calc_weight').AsFloat;

        recNo := recNo + 1;
        ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_rate.RecordCount - sp_Report_return_rate.RecNo), False);
        sp_Report_return_rate.Next;
      end;

      exWks.Rows[IntToStr(22 + recNo)].Delete;
      exWks.Rows[IntToStr(22 + recNo)].Delete;

      sp_Report_return_rate.Free;
    end else begin
      exWks.Rows['18:30'].Delete;
    end;

    // Верхня таблица - повагонка
    sp_Report_return_tarif := TADOStoredProc.Create(nil);
    sp_Report_return_tarif.Connection := Fconnect;
    sp_Report_return_tarif.ProcedureName := sp_name;
    sp_Report_return_tarif.Parameters.Refresh;
    sp_Report_return_tarif.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_tarif.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_tarif.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_tarif.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_tarif.Parameters.ParamByName('@type_result'              ).Value := 0;
    sp_Report_return_tarif.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_tarif.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_tarif.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_tarif.CommandTimeout := 100;
    sp_Report_return_tarif.Open;


    recNo       := 1;
    while not sp_Report_return_tarif.Eof do begin

      exWks.Rows[IntToStr(13 + recNo)].Insert;
      exWks.Rows[IntToStr(12 + recNo)].Copy;
      exWks.Rows[IntToStr(13 + recNo)].PasteSpecial(1);

      // Формулы
      exWks.Range['M' + IntToStr(12 + recNo)].Value := '=RC[1]*SUM(RC[-2])/(SUM(RC[-2])+100)';
      exWks.Range['L' + IntToStr(12 + recNo)].Value := '=RC[2]-RC[1]';

      exWks.Range['A' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('bargain_id').Value;
      exWks.Range['B' + IntToStr(12 + recNo)].Value := recNo;
      exWks.Range['C' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('route_name').AsString;
      exWks.Range['D' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['E' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('cnt_fact').Value;
      exWks.Range['F' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('num_document').AsString;
      exWks.Range['G' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('fact_weight').AsFloat;
      exWks.Range['H' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('calc_weight').AsFloat;
      exWks.Range['I' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_from_to').Value;
      exWks.Range['J' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('date_delivery').Value;
      if sp_Report_return_tarif.FieldByName('date_delivery').IsNull then exWks.Range['J' + IntToStr(12 + recNo)].Value := '---';

      Query_NDS.Locate('nds_id', sp_Report_return_tarif.FieldByName('shaping_rate_nds_id').Value, []);
      exWks.Range['K' + IntToStr(12 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;

      exWks.Range['N' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('precalc_sum').Value;

      // Рублевый эквивалент
      if retActSettings[6][1] = True then begin
        exWks.Range['O' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('exchange_RUB_agent').Value;
        exWks.Range['P' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('exchange_RUB_client').Value;
      end;

      exWks.Range['R' + IntToStr(12 + recNo)].Value := sp_Report_return_tarif.FieldByName('agreement_describe').AsString;

      recNo := recNo + 1;

      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_tarif.RecordCount - sp_Report_return_tarif.RecNo), False);
      sp_Report_return_tarif.Next;
    end;

    exWks.Range[IntToStr(12 + 1) + ':' + IntToStr(12 + recNo)].EntireRow.AutoFit;

    exWks.Rows[IntToStr(12 + recNo)].Delete;
    exWks.Rows[IntToStr(12 + recNo)].Delete;

    // Рублевый эквивалент
    if retActSettings[6][1] = False then
      exWks.Columns['O:Q'].Delete;

    sum_rep := 0;
    try
      sum_rep := exWks.Range['N' + IntToStr(12 + recNo)].Value;
      if TVarData(sum_rep).VType = varError then
        sum_rep := 0;
    except
    end;

    // Второй лист - копия первого
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    exWks2.Rows['4:7'].Copy;
    exWks2.Rows['11:14'].PasteSpecial(1);

    exWks2.Range['F14'].Value := fact_no - 1;
    exWks2.Range['G14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    exWks2.Range['H14'].Value := '=SUM(R[-3]C:R[-1]C)/2';
    // Добавим нужное кол-во строк
    fact_no := fact_no - 1;
    if fact_no > 0 then
      exWks2.Rows['13:' + IntToStr(12 + fact_no)].Insert;
    exWks2.Rows['12'].Delete;
    exWks2.Rows['12'].Delete;
    // копируем колонки
    if fact_no > 0 then begin
      exWks.Range['F10:F' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['E12:E' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['E10:E' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['F12:F' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['M10:M' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['G12:G' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
      exWks.Range['N10:N' + IntToStr(9 + fact_no)].Copy;
      exWks2.Range['H12:H' + IntToStr(11 + fact_no)].PasteSpecial(-4163);
    end;
    exWks2.Columns['B:D'].WrapText := True;
    exWks2.Rows['11:' + IntToStr(11 + fact_no)].EntireRow.AutoFit;
    // сортировка
    exWks2.Range['B11:H' + IntToStr(11 + fact_no)].Sort(Key1 := exWks2.Range['B12'], Key2 := exWks2.Range['F12'], Header := 1);
    // разделяем на группы
    recNo := 1; rec_begin := 1;
    while recNo <= fact_no + 1 do begin
      if (exWks2.Range['B' + IntToStr(11 + recNo)].Value <> exWks2.Range['B' + IntToStr(11 + rec_begin)].Value)
      or (recNo = (fact_no + 1)) then begin
        exWks2.Rows[IntToStr(11 + rec_begin)].Insert;
        exWks2.Rows[IntToStr(12 + rec_begin)].Copy;
        exWks2.Rows[IntToStr(11 + rec_begin)].PasteSpecial(1);

        exWks2.Rows[IntToStr(12 + rec_begin) + ':' + IntToStr(11 + recNo)].Group;
        exWks2.Range['B' + IntToStr(11 + rec_begin)].Value := exWks2.Range['B' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['C' + IntToStr(11 + rec_begin)].Value := exWks2.Range['C' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['D' + IntToStr(11 + rec_begin)].Value := exWks2.Range['D' + IntToStr(12 + rec_begin)].Value;
        exWks2.Range['E' + IntToStr(11 + rec_begin)].Value := null;
        exWks2.Range['F' + IntToStr(11 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['G' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';
        exWks2.Range['H' + IntToStr(11 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin) + ']C)';

        inc(recNo);
        inc(fact_no);
        rec_begin := recNo;
      end;
      inc(recNo);
    end;

    // Второй лист - с-ф ЦФТО
    exWks2 := exWkb.WorkSheets[2];
    exWks2.Outline.SummaryRow := 0;
    sp_Report_return_zfto := TADOStoredProc.Create(nil);
    sp_Report_return_zfto.Connection := Fconnect;
    sp_Report_return_zfto.ProcedureName := sp_name;
    sp_Report_return_zfto.Parameters.Refresh;
    sp_Report_return_zfto.Parameters.ParamByName('@str_bargain_id'           ).Value := str_bargain_id;
    sp_Report_return_zfto.Parameters.ParamByName('@acts_type_cod'            ).Value := cod_shablon;
    sp_Report_return_zfto.Parameters.ParamByName('@contract_agent_id'        ).Value := contract_agent_id;
    sp_Report_return_zfto.Parameters.ParamByName('@str_zfto_score_id'        ).Value := str_zfto_score_id;
    sp_Report_return_zfto.Parameters.ParamByName('@type_result'              ).Value := 4;
    sp_Report_return_zfto.Parameters.ParamByName('@set_routefromfact'        ).Value := retActSettings[6][4];
    sp_Report_return_zfto.Parameters.ParamByName('@set_kargofromfact'        ).Value := retActSettings[6][5];
    sp_Report_return_zfto.Parameters.ParamByName('@set_weightfromfact'       ).Value := retActSettings[6][6];
    sp_Report_return_zfto.CommandTimeout := 100;
    sp_Report_return_zfto.Open;

    recNo := 1;

    zfto_score_id := -9;
    rec_begin     := 0;
    sum_str := ''; str_num := ''; str_text := '';
    while not sp_Report_return_zfto.Eof do begin
      exWks2.Rows[IntToStr(5 + recNo)].Insert;
      exWks2.Rows[IntToStr(4 + recNo)].Copy;
      exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);

      if zfto_score_id <> sp_Report_return_zfto.FieldByName('zfto_score_id').Value then begin
        // Шапка первого листа
        exWks.Range['E7'].Value := sp_Report_return_zfto.FieldByName('firm_agent_name_full').AsString;
        if str_num <> '' then str_num := str_num + ', ';
        str_num := str_num +
          sp_Report_return_zfto.FieldByName('fact_num').AsString + ' от ' +
          FormatDateTime('dd.mm.yyyy', sp_Report_return_zfto.FieldByName('fact_date').AsDateTime);
        exWks.Range['E8'].Value := str_num;
        if str_text <> '' then str_text := str_text + ', ';
        str_text := str_text +
          sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
        exWks.Range['E9'].Value := str_text;

        if rec_begin <> 0 then begin
          exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
          exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
          if sum_str = '' then
            sum_str := '=G' + IntToStr(4 + rec_begin)
          else
            sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
        end;

        rec_begin := recNo;
        zfto_score_id := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
        exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
        exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
        exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
        recNo := recNo + 1;

        exWks2.Rows[IntToStr(5 + recNo)].Insert;
        exWks2.Rows[IntToStr(4 + recNo)].Copy;
        exWks2.Rows[IntToStr(5 + recNo)].PasteSpecial(1);
      end;

      exWks2.Range['A' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('zfto_score_id').Value;
      exWks2.Range['B' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_num').AsString;
      exWks2.Range['C' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('fact_date').Value;
      exWks2.Range['D' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('ktgrm_text').AsString;
      exWks2.Range['E' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('number_doc').AsString;
      exWks2.Range['F' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('vagon_num').AsString;
      exWks2.Range['G' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('nds_rub').Value;
      exWks2.Range['H' + IntToStr(4 + recNo)].Value := sp_Report_return_zfto.FieldByName('sum_rub').Value;

      recNo := recNo + 1;
      ShowTextMessage('Осталось ' + IntToStr(sp_Report_return_zfto.RecordCount - sp_Report_return_zfto.RecNo), False);
      sp_Report_return_zfto.Next;
    end;

    if rec_begin <> 0 then begin
      exWks2.Rows[IntToStr(5 + rec_begin) + ':' + IntToStr(5 + recNo-2)].Group;
      exWks2.Range['G' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['H' + IntToStr(4 + rec_begin)].Value := '=SUM(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      exWks2.Range['F' + IntToStr(4 + rec_begin)].Value := '=COUNTA(R[1]C:R[' + IntToStr(recNo-rec_begin-1) + ']C)';
      if sum_str = '' then
        sum_str := '=G' + IntToStr(4 + rec_begin)
      else
        sum_str := sum_str + '+G' + IntToStr(4 + rec_begin);
    end;

    exWks2.Outline.ShowLevels(1);
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Rows[IntToStr(4 + recNo)].Delete;
    exWks2.Range['G' + IntToStr(4 + recNo)].Value := sum_str;
    exWks2.Range['H' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'H');
    exWks2.Range['F' + IntToStr(4 + recNo)].Value := ReplaceStr(sum_str, 'G', 'F');

    // Третий лист (по галочке)
    if retActSettings[6][3] = True then begin
      exWks.Copy(After := exWks2);
      exWks2 := exWkb.WorkSheets[3];
      exWks.Name := 'Отчет';
      exWks2.Name := 'Акт';
      // удалим лишнее имя
      exWks2.Names['acts_cod'].Delete;
      // заменяем Отчет на Акт
      exWks2.Cells.Replace('Отчет', 'Акт');

      exWks2.Range['B1'].Value := '="АКТ к Отчету № "&acts_cod&" от ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.' + '"';
    end;

    exWks := exWkb.WorkSheets[1];
    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, sum_rep);

    sp_Report_return_tarif.Free;
    sp_Report_return_zfto.Free;

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);
//    exApp.Visible := True;
    VarClear(exWks); VarClear(exWks2); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
end;

procedure TfmAgree2.dxBarButton159Click(Sender: TObject);
var
  retActSettings      : Variant;

  exApp, exWkb, exWks : Variant;
  SP_Balans_Detail    : TADOStoredProc;
  Query_tmp, Q        : TADOQuery;
  recNo               : integer;
  str_bargain_id      : string;
  i                   : integer;
  contract_agent_id   : integer;

  cod_shablon         : integer;

  str_expeditor       : array [1..2] of string;
  PrintArea           : string;

  sp_name   : string;
  type_result : integer;
begin
  cod_shablon := TComponent(Sender).Tag;
  //277 = 'Акт оказанных услуг (тариф вознагр, ТАИФ) - транзит'

  if SP_Agree.Eof then exit;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name, firm_property_cod FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;

  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  if (str_expeditor[1] = '') or (str_expeditor[2] = '') then begin
    Application.MessageBox('Для формирования актов необходимо выбрать в настройках договора' + #10 +
                           'тип взаимоотношений между собственной организацией и организацией клиентом',
                           'Внимание! Акт не может быть сформирован',
                           MB_ICONEXCLAMATION or MB_OK);
    exit;
  end;

  str_bargain_id := '';
  for i:=0 to cxGrid1DBBandedTableView1.Controller.SelectedRecordCount - 1 do
    str_bargain_id := str_bargain_id + ', ' + IntToStr(cxGrid1DBBandedTableView1.Controller.SelectedRows[i].Values[cxGrid1DBBandedTableView1bargain_id.Index]);
  Delete(str_bargain_id, 1, 2);

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT DISTINCT contract_agent_id, contract_agent_cod, firm_agent_name FROM view_shaping_rate WHERE service_type = 1 AND bargain_id in (' + str_bargain_id + ')');
  Q.Open;
  fmFilter := TfmFilter.Create(0, Q, 'contract_agent_id', 'contract_agent_cod', 'firm_agent_name');
  fmFilter._SetCaption := 'Подрядчик, чьи расходы перевыставляем';
  if fmFilter.ShowModal = mrOk then begin

    contract_agent_id := fmFilter.GetId;

    retActSettings := SaveActsBegin(Fconnect, usr_pwd, str_bargain_id, cod_shablon, 1, ACT_SET_ADDSIGN or ACT_SET_ALLPARAMFROMFACT, -9, contract_agent_id);
    if retActSettings[0] = -9 then
      exit;

    Screen.Cursor := crHourglass;
    ShowTextMessage('Формирование отчёта...', False);

    ShowTextMessage('Запуск Excel ...', False);
    exApp := CreateOleObject('Excel.Application');
    exWkb := exApp.Workbooks.Add(GetDocBlob(Fconnect, cod_shablon));
    exWkb := exApp.ActiveWorkbook;
    exWks := exWkb.WorkSheets[1];

    // Перед заполнением спрячем не нужные колонки - если это необходимо
    if VarToStr(retActSettings[10]) <> '' then
      exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

    // Заполняем шапку и подписи
    exWks.Range['C3'].Value := 'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.' + #10 +
                               'между ' + VarToStr(retActSettings[12][1]) + ' и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + #10 +
                               'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.';
    exWks.Range['N4'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

    exWks.Range['B6'].Value := VarToStr(retActSettings[12][1]) + ', именуемое в дальнейшем "' + str_expeditor[1] + '", в лице ' + VarToStr(retActSettings[4][2]) +
                               ', с одной стороны, и ' + SP_Agree.FieldByName('firm_customer_name_short').AsString + ', в лице ' + VarToStr(retActSettings[5][2]) +
                               ', именуемое в дальнейшем "' + str_expeditor[2] + '", с другой стороны, составили настоящий Акт о нижеследующем:';

    exWks.Range['B8'].Value := 'За период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г..: ' + ReplaceStr(str_expeditor[1] + 'ом', 'ьо', 'е') + ' были оказаны услуги, ' +
                               'указанные ниже, ' +
                               'в соответствии с ДОГОВОРОМ № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

    exWks.Range['B17'].Value := 'Вышеперечисленные услуги выполнены полностью и в срок. ' + str_expeditor[2] + '  претензий по объему, качеству и срокам оказания услуг не имеет.';
    exWks.Range['B18'].Value := 'Настоящий Акт составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью ' +
                                'договора № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

    exWks.Range['B20'].Value := VarToStr(retActSettings[12][1]);
    exWks.Range['J20'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

    // Подписанты
    if retActSettings[13][2] = True then
      exWks.Range['B22'].Value := VarToStr(retActSettings[14][1]) + ' __________________ ' + VarToStr(retActSettings[13][1]) + ''
    else
      exWks.Range['B22'].Value := Null;
    if retActSettings[13][5] = True then
      exWks.Range['B24'].Value := VarToStr(retActSettings[14][4]) + ' _________________ ' + VarToStr(retActSettings[13][4]) + ''
    else
      exWks.Range['B24'].Value := Null;
    if retActSettings[13][8] = True then
      exWks.Range['J22'].Value := VarToStr(retActSettings[14][7]) + ' __________________ ' + VarToStr(retActSettings[13][7]) + ''
    else
      exWks.Range['J22'].Value := Null;
    if retActSettings[13][11] = True then
      exWks.Range['J24'].Value := VarToStr(retActSettings[14][10]) + ' _________________ ' + VarToStr(retActSettings[13][10]) + ''
    else
      exWks.Range['J24'].Value := Null;

    if retActSettings[6][2] = True then begin
      // 1. Раздвинем область печати на 4 строки вниз
      PrintArea := exWks.PageSetup.PrintArea;
      if PrintArea <> '' then begin
        PrintArea := exWks.Range[PrintArea].Resize[exWks.Range[PrintArea].Rows.Count + 4, exWks.Range[PrintArea].Columns.Count].Address;
        exWks.PageSetup.PrintArea := WideString(PrintArea);
      end;
      // 2. Копируем формат
      exWks.Rows['22:24'].Copy;
      exWks.Rows['26:28'].PasteSpecial(Paste:=-4122);
      // 3. Добавим нужные нам строки
      exWks.Range['B26'].Value := 'Дата подписания';
      exWks.Range['B28'].Value := '"____" __________________ 201__';
      exWks.Range['J26'].Value := 'Дата подписания';
      exWks.Range['J28'].Value := '"____" __________________ 201__';
    end;

    if (retActSettings[7][0] <> 3) then begin
      exWks.Range['K12'].Value := 'сумма без НДС, ' + VarToStr(retActSettings[7][1]);
      exWks.Range['L12'].Value := 'сумма НДС, ' + VarToStr(retActSettings[7][1]);
      exWks.Range['M12'].Value := 'сумма с НДС, ' + VarToStr(retActSettings[7][1]);
    end;

    // ed_izm_cod = '001' // контейнер
    if SP_Agree.FieldByName('ed_izm_cod').AsString = '001' then
      exWks.Range['G12'].Value := 'кол-во контейнеров';

    // Автоподбор по высоте
    AutoFitMergeCell(exWks.Range['B6']);
    AutoFitMergeCell(exWks.Range['B8']);
    AutoFitMergeCell(exWks.Range['B18']);

    // Данные отчета - перевозки
    ShowTextMessage('Подготовка данных ...', False);

    sp_name := 'sp_Report_return_tarif_TAIF';
    type_result := 103;

    SP_Balans_Detail := TADOStoredProc.Create(nil);
    SP_Balans_Detail.Connection := Fconnect;
    SP_Balans_Detail.ProcedureName := sp_name;
    SP_Balans_Detail.Parameters.Refresh;
    SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
    SP_Balans_Detail.Parameters.ParamByName('@contract_agent_id' ).Value := contract_agent_id;
    SP_Balans_Detail.Parameters.ParamByName('@type_result'       ).Value := type_result;
    SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
    SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
    SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact').Value := retActSettings[6][6];
    SP_Balans_Detail.CommandTimeout := 100;
    SP_Balans_Detail.Open;

    recNo := 1;
    while not SP_Balans_Detail.Eof do begin
      exWks.Rows[IntToStr(13 + recNo)].Insert;
      exWks.Rows[IntToStr(12 + recNo)].Copy;
      exWks.Rows[IntToStr(13 + recNo)].PasteSpecial(1);

      exWks.Range['C9'].Value := 'Вид услуги: ' + SP_Balans_Detail.FieldByName('service_kind').AsString;

      exWks.Range['B' + IntToStr(12 + recNo)].Value := recNo;
      exWks.Range['C' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('route_name').AsString;
      exWks.Range['D' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
      exWks.Range['E' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('date_from_to').AsString;
      exWks.Range['F' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('kargoETSNG_name').AsString;
      exWks.Range['G' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('cnt').Value;

      if SP_Balans_Detail.FieldByName('fact_weight').IsNull then
        exWks.Range['H' + IntToStr(12 + recNo)].Value := null
      else
        exWks.Range['H' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('fact_weight').AsFloat;

      if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
        exWks.Range['I' + IntToStr(12 + recNo)].Value := null
      else
        exWks.Range['I' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

      Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('shaping_rate_nds_id').Value, []);
      exWks.Range['J' + IntToStr(12 + recNo)].Value := Query_NDS.FieldByName('nds_name').AsString;
      exWks.Range['M' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('client_sum').AsCurrency - SP_Balans_Detail.FieldByName('agent_sum').AsCurrency;

      exWks.Range['N' + IntToStr(12 + recNo)].Value := SP_Balans_Detail.FieldByName('agreement_describe').AsString;

      inc(recNo);

      ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo), False);
      SP_Balans_Detail.Next;
    end;

    exWks.Rows[IntToStr(12 + recNo)].Delete;
    if recNo > 1 then
      exWks.Rows[IntToStr(12 + recNo)].Delete
    else begin
      exWks.Rows[IntToStr(12 + recNo)].ClearContents;
      recNo := 2;
    end;

    SP_Balans_Detail.Free;

    exWks.Range['A1'].Select;

    SaveActsEnd(Fconnect, exWks, retActSettings, str_bargain_id, exWks.Range['M' + IntToStr(12 + recNo)].Value);

    Screen.Cursor := crDefault;
    ShowTextMessage('', True);

    VarClear(exWks); VarClear(exWkb); VarClear(exApp);
  end;
  Q.Free;
end;

procedure TfmAgree2.LocateStrBargainID(str_bargain_id: string);
var               Q : TADOQuery;
    list_bargain_id : array of string;
begin
  Screen.Cursor := crHourGlass;

  Q := TADOQuery.Create(nil);
  Q.Connection := Fconnect;
  Q.SQL.Add('SELECT max(date_period) max_date_period, min(date_period) min_date_period FROM view_bargain_rights WHERE bargain_id in (' + str_bargain_id + ')');
  Q.Open;

  if Q.RecordCount > 0 then begin
    Fdate1 := Q.FieldByName('min_date_period').AsDateTime;
    Fdate1 := Fdate1 - DayOf(Fdate1) + 1;

    Fdate2 := Q.FieldByName('max_date_period').AsDateTime;
    Fdate2 := Fdate2 - DayOf(Fdate2) + 1;
    Fdate2 := IncMonth(Fdate2, 1) - 1;

    dxBarSubItem3.Caption := FormatDateTime('mmm yy', Fdate1) + ' - ' + FormatDateTime('mmm yy', Fdate2);

    Factive_users_id := -9;
    Caption := 'Перевозки по договорам (Все)';

    RefreshProcedure(-9,-9);

    Q.SQL.Clear;
    Q.SQL.Add('SELECT bargain_id FROM view_bargain_rights WHERE bargain_id in (' + str_bargain_id + ')');
    Q.Open;

    SetLength(list_bargain_id, Q.RecordCount);
    while not Q.Eof do begin
      list_bargain_id[Q.RecNo-1] := Q.FieldByName('bargain_id').AsString;
      Q.Next;
    end;

    cxGrid1DBBandedTableView1.DataController.Filter.Clear;
    cxGrid1DBBandedTableView1.DataController.Filter.Options := cxGrid1DBBandedTableView1.DataController.Filter.Options + [fcoCaseInsensitive];
    cxGrid1DBBandedTableView1.DataController.Filter.Root.BoolOperatorKind := fboAnd;
    cxGrid1DBBandedTableView1.DataController.Filter.Root.AddItem(cxGrid1DBBandedTableView1bargain_id, foInList, list_bargain_id, str_bargain_id);
    cxGrid1DBBandedTableView1.DataController.Filter.Active := True;
  end else begin
    Application.MessageBox('Перевозки не найдены.', 'Сообщение', MB_ICONINFORMATION or MB_OK);
  end;

  Q.Free;
  Screen.Cursor := crDefault;
end;


procedure TfmAgree2.Report_WorkVolume(retActSettings: Variant; exWkb: Variant; str_bargain_id: string; Query_Act: TCustomADODataSet);
var ClientDS_delta                     : TClientDataSet;
    ClientDS_distance                  : TClientDataSet;
    delta_sum, delta_nds, delta_notnds : Currency;
    exWks                              : Variant;
    nds_rate                           : Currency;

var
    SP_Balans_Detail    : TADOStoredProc;
    Query_tmp           : TADOQuery;
    recNo               : integer;
    recXls              : integer;
    str_expeditor       : array [1..2] of string;

begin
  ClientDS_delta := TClientDataSet.Create(nil);
  ClientDS_delta.FieldDefs.Add('bargain_id',   ftInteger);
  ClientDS_delta.FieldDefs.Add('cnt',          ftInteger);
  ClientDS_delta.FieldDefs.Add('sum',          ftCurrency);
  ClientDS_delta.FieldDefs.Add('sum_nds',      ftCurrency);
  ClientDS_delta.FieldDefs.Add('sum_notnds',   ftCurrency);
  ClientDS_delta.CreateDataSet;
  ClientDS_delta.LogChanges := False;

  // Заполним суммы из акта сгруппированные по перевозками
  Query_Act.First;
  while not Query_Act.Eof do begin
    if not ClientDS_delta.Locate('bargain_id', Query_Act.FieldByName('bargain_id').AsInteger, []) then begin
      ClientDS_delta.Append;
      ClientDS_delta['bargain_id'] := Query_Act.FieldByName('bargain_id').Value;
      ClientDS_delta['cnt'] := 0;
      ClientDS_delta['sum'] := 0;
      ClientDS_delta['sum_nds'] := 0;
      ClientDS_delta['sum_notnds'] := 0;
    end else begin
      ClientDS_delta.Edit;
    end;

    if not TryStrToCurr(Query_Act.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;

    ClientDS_delta['cnt'] := 0;
    ClientDS_delta['sum'] := ClientDS_delta['sum'] + RoundCurr(Query_Act.FieldByName('summa').AsCurrency, -2);
    ClientDS_delta['sum_nds'] := ClientDS_delta['sum_nds'] + RoundCurr(Query_Act.FieldByName('summa').AsCurrency * (nds_rate / (100 + nds_rate)), -2);
//    ClientDS_delta['sum_notnds'] := ClientDS_delta['sum_notnds'] + RoundCurr(Query_Act.FieldByName('summa').AsCurrency * (100 / (100 + nds_rate)), -2);
    ClientDS_delta['sum_notnds'] := ClientDS_delta['sum'] - ClientDS_delta['sum_nds'];

    ClientDS_delta.Post;

    Query_Act.Next;
  end;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  ShowTextMessage('Формирование отчёта...', False);
  exWks := exWkb.WorkSheets[1];
  exWks.Select;


  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи

  exWks.Range['B2'].Value := 'Исполнитель: ' + SP_Agree.FieldByName('firm_self_name_short').AsString;
  exWks.Range['B3'].Value := 'Заказчик: ' + SP_Agree.FieldByName('firm_customer_name_short').AsString;
  exWks.Range['B4'].Value := 'Период: c ' + VarToStr(retActSettings[3][1]) + ' по ' + VarToStr(retActSettings[3][2]);


  // валюта
//  if (retActSettings[7][0] <> 3) then begin
//    exWks.Range['brief_name'].Value := VarToStr(retActSettings[7][1]);
//  end;

  // Подписанты
//  if retActSettings[13][2] = True then begin
//    exWks.Range['B26'].Value := retActSettings[14][1];
//    exWks.Range['F26'].Value := retActSettings[13][1];
//  end else
//    exWks.Range['B26:H26'].ClearContents;
//
//  if retActSettings[13][5] = True then begin
//    exWks.Range['B28'].Value := retActSettings[14][4];
//    exWks.Range['F28'].Value := retActSettings[13][4];
//  end else
//    exWks.Range['B28:H28'].ClearContents;
//
//  if retActSettings[13][8] = True then begin
//    exWks.Range['K26'].Value := retActSettings[14][7];
//    exWks.Range['N26'].Value := retActSettings[13][7];
//  end else
//    exWks.Range['K26:O26'].ClearContents;
//  if retActSettings[13][11] = True then begin
//    exWks.Range['K28'].Value := retActSettings[14][10];
//    exWks.Range['N28'].Value := retActSettings[13][10];
//  end else
//    exWks.Range['K28:O28'].ClearContents;

  // Автоподбор по высоте
//  AutoFitMergeCell(exWks.Range['B20']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'       ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'       ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@set_datedelivery'  ).Value := retActSettings[6][12];
//  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact' ).Value := retActSettings[6][6];
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Заполним суммы из повагонки
  // Мы ищем разницу между актом и повагонкой
  SP_Balans_Detail.First;
  while not SP_Balans_Detail.Eof do begin
    if ClientDS_delta.Locate('bargain_id', SP_Balans_Detail.FieldByName('bargain_id').AsInteger, []) then begin
      ClientDS_delta.Edit;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      ClientDS_delta['cnt'] := ClientDS_delta['cnt'] + 1;
      ClientDS_delta['sum'] := ClientDS_delta['sum'] - RoundCurr(SP_Balans_Detail.FieldByName('summa').AsCurrency, -2);
      ClientDS_delta['sum_nds'] := ClientDS_delta['sum_nds'] - RoundCurr(SP_Balans_Detail.FieldByName('summa').AsCurrency * (nds_rate / (100 + nds_rate)), -2);
      ClientDS_delta['sum_notnds'] := ClientDS_delta['sum_notnds'] - RoundCurr(SP_Balans_Detail.FieldByName('summa').AsCurrency * (100 / (100 + nds_rate)), -2);

      ClientDS_delta.Post;
    end;

    SP_Balans_Detail.Next;
  end;

  SP_Balans_Detail.First;
  recNo := 1;
  recXls := 9;
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := SP_Balans_Detail.RecNo;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').AsString;
    exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_node_begin_name').AsString;
    exWks.Range['G' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_node_end_name').AsString;
    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('fact_kargoETSNG_name').AsString;
    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks.Range['I' + IntToStr(recXls)].Value := null
    else
      exWks.Range['I' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;
    exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    exWks.Range['K' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('distance').Value;
    exWks.Range['L' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('rate_without_nds').Value;



    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['M' + IntToStr(recXls)].Value := Query_NDS.FieldByName('nds_name').AsString;


    // посчитаем корректировку (размазываем разницу по всем вагонам в перевозке)
    delta_sum := 0; delta_nds := 0; delta_notnds := 0;
    if ClientDS_delta.Locate('bargain_id', SP_Balans_Detail.FieldByName('bargain_id').AsInteger, []) then begin
      // на каждом шаге мы нераспределенный остаток делим на оставшееся число вагонов
      delta_sum := integer(ClientDS_delta['sum'] * 100) div ClientDS_delta['cnt'] / 100;
      delta_nds := integer(ClientDS_delta['sum_nds'] * 100) div ClientDS_delta['cnt'] / 100;
      delta_notnds := integer(ClientDS_delta['sum_notnds'] * 100) div ClientDS_delta['cnt'] / 100;

      ClientDS_delta.Edit;
      ClientDS_delta['cnt'] := ClientDS_delta['cnt'] - 1;
      ClientDS_delta['sum'] := ClientDS_delta['sum'] - delta_sum;
      ClientDS_delta['sum_nds'] := ClientDS_delta['sum_nds'] - delta_nds;
      ClientDS_delta['sum_notnds'] := ClientDS_delta['sum_notnds'] - delta_notnds;
      ClientDS_delta.Post;
    end;

    if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
    exWks.Range['M' + IntToStr(recXls)].Value := RoundCurr(SP_Balans_Detail.FieldByName('summa').Value * (100 / (100 + nds_rate)), -2) + delta_notnds;
    exWks.Range['N' + IntToStr(recXls)].Value := RoundCurr(SP_Balans_Detail.FieldByName('summa').Value * (nds_rate / (100 + nds_rate)), -2) + delta_nds;
    exWks.Range['O' + IntToStr(recXls)].Value := RoundCurr(SP_Balans_Detail.FieldByName('summa').Value, -2) + delta_sum;


    inc(recNo);
    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(recXls)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(recXls)].Delete
  else begin
    exWks.Rows[IntToStr(recXls)].ClearContents;
    inc(recXls);
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;
  ShowTextMessage('', True);

  ClientDS_delta.Free;
  VarClear(exWks);
end;

procedure TfmAgree2.Report_RegistrVolume(retActSettings: Variant; exWkb: Variant; str_bargain_id: string; Query_Act: TCustomADODataSet);
var ClientDS_delta                     : TClientDataSet;
    ClientDS_distance                  : TClientDataSet;
    exWks                              : Variant;
    SP_Balans_Detail    : TADOStoredProc;
    Query_tmp           : TADOQuery;
    recNo               : integer;
    recXls              : integer;
    nds_rate            : currency;
    str_expeditor       : array [1..2] of string;
begin
  ClientDS_delta := TClientDataSet.Create(nil);
  ClientDS_delta.FieldDefs.Add('bargain_id',   ftInteger);
  ClientDS_delta.FieldDefs.Add('cnt',          ftInteger);
  ClientDS_delta.FieldDefs.Add('sum',          ftCurrency);
  ClientDS_delta.FieldDefs.Add('sum_nds',      ftCurrency);
  ClientDS_delta.FieldDefs.Add('sum_notnds',   ftCurrency);
  ClientDS_delta.CreateDataSet;
  ClientDS_delta.LogChanges := False;

  // Заполним суммы из акта сгруппированные по перевозками
  Query_Act.First;
  while not Query_Act.Eof do begin
    if not ClientDS_delta.Locate('bargain_id', Query_Act.FieldByName('bargain_id').AsInteger, []) then begin
      ClientDS_delta.Append;
      ClientDS_delta['bargain_id'] := Query_Act.FieldByName('bargain_id').Value;
      ClientDS_delta['cnt'] := 0;
      ClientDS_delta['sum'] := 0;
      ClientDS_delta['sum_nds'] := 0;
      ClientDS_delta['sum_notnds'] := 0;
    end else begin
      ClientDS_delta.Edit;
    end;

    if not TryStrToCurr(Query_Act.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;

    ClientDS_delta['cnt'] := 0;
    ClientDS_delta['sum'] := ClientDS_delta['sum'] + RoundCurr(Query_Act.FieldByName('summa').AsCurrency, -2);
    ClientDS_delta['sum_nds'] := ClientDS_delta['sum_nds'] + RoundCurr(Query_Act.FieldByName('summa').AsCurrency * (nds_rate / (100 + nds_rate)), -2);
//    ClientDS_delta['sum_notnds'] := ClientDS_delta['sum_notnds'] + RoundCurr(Query_Act.FieldByName('summa').AsCurrency * (100 / (100 + nds_rate)), -2);
    ClientDS_delta['sum_notnds'] := ClientDS_delta['sum'] - ClientDS_delta['sum_nds'];

    ClientDS_delta.Post;

    Query_Act.Next;
  end;

  // --- валюта договора по умолчанию для акта сверки -----
  Query_tmp := TADOQuery.Create(nil);
  Query_tmp.Connection := Fconnect;
  Query_tmp.SQL.Add('SELECT type_firm_self_name, type_firm_customer_name FROM view_contract WHERE contract_id = ' + SP_Agree.FieldByName('contract_id').AsString);
  Query_tmp.Open;
  str_expeditor[1] := Query_tmp.FieldByName('type_firm_self_name').AsString;
  str_expeditor[2] := Query_tmp.FieldByName('type_firm_customer_name').AsString;
  Query_tmp.Free;

  ShowTextMessage('Формирование отчёта...', False);
  exWks := exWkb.WorkSheets[1];
  exWks.Select;

  // Перед заполнением спрячем не нужные колонки - если это необходимо
  if VarToStr(retActSettings[10]) <> '' then
    exWks.Range[VarToStr(retActSettings[10])].EntireColumn.Hidden := True;

  // Заполняем шапку и подписи
  exWks.Range['B5'].Value := 'за период с ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][1]) + 'г. по ' + FormatDateTime('dd.mm.yyyy', retActSettings[3][2]) + 'г.' + #10 +
                             'по Договору № ' + SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';
  exWks.Range['O7'].Value := FormatDateTime('dd.mm.yyyy', retActSettings[3][0]) + 'г.';

  exWks.Range['B23'].Value := 'Настоящий реестр оказанных услуг составлен в двух экземплярах (для каждой из Сторон) и является неотъемлемой частью договора № ' +
                              SP_Agree.FieldByName('contract_cod').AsString + ' от ' + FormatDateTime('dd.mm.yyyy', SP_Agree.FieldByName('contract_date_begin').AsDateTime) + 'г.';

  exWks.Range['B9'].Value := VarToStr(retActSettings[12][1]) + ' - ' + str_expeditor[1];
  exWks.Range['B10'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString + ' - ' + str_expeditor[2];
  exWks.Range['B27'].Value := VarToStr(retActSettings[12][1]);
  exWks.Range['J27'].Value := SP_Agree.FieldByName('firm_customer_name_short').AsString;

  // валюта
  if (retActSettings[7][0] <> 3) then begin
    exWks.Range['brief_name'].Value := VarToStr(retActSettings[7][1]);
  end;

  // Подписанты
  if retActSettings[13][2] = True then begin
    exWks.Range['B29'].Value := retActSettings[14][1];
    exWks.Range['E29'].Value := retActSettings[13][1];
  end else
    exWks.Range['B29:F29'].ClearContents;
  if retActSettings[13][8] = True then begin
    exWks.Range['J29'].Value := retActSettings[14][7];
    exWks.Range['N29'].Value := retActSettings[13][7];
  end else
    exWks.Range['J26:O26'].ClearContents;

  // Автоподбор по высоте
  AutoFitMergeCell(exWks.Range['B23']);

  // Данные отчета - перевозки
  ShowTextMessage('Подготовка данных ...', False);

  // Используем для ускорения, дабы не тыкаться несколько раз по одикаковым направлениям
  ClientDS_distance := TClientDataSet.Create(nil);
  ClientDS_distance.FieldDefs.Add('node_begin', ftString, 50);
  ClientDS_distance.FieldDefs.Add('node_end',   ftString, 50);
  ClientDS_distance.FieldDefs.Add('distance',   ftInteger);
  ClientDS_distance.CreateDataSet;
  ClientDS_distance.LogChanges := False;

  SP_Balans_Detail := TADOStoredProc.Create(nil);
  SP_Balans_Detail.Connection := Fconnect;
  SP_Balans_Detail.ProcedureName := 'sp_act_report_Povagonka';
  SP_Balans_Detail.Parameters.Refresh;
  SP_Balans_Detail.Parameters.ParamByName('@contract_id'       ).Value := retActSettings[8];
  SP_Balans_Detail.Parameters.ParamByName('@currency_id'       ).Value := retActSettings[7][0];
  SP_Balans_Detail.Parameters.ParamByName('@str_bargain_id'    ).Value := str_bargain_id;
  SP_Balans_Detail.Parameters.ParamByName('@set_routefromfact' ).Value := retActSettings[6][4];
  SP_Balans_Detail.Parameters.ParamByName('@set_kargofromfact' ).Value := retActSettings[6][5];
  SP_Balans_Detail.Parameters.ParamByName('@set_datedelivery'  ).Value := retActSettings[6][12];
//  SP_Balans_Detail.Parameters.ParamByName('@set_weightfromfact' ).Value := retActSettings[6][6];
  SP_Balans_Detail.CommandTimeout := 100;
  SP_Balans_Detail.Open;

  // Заполним суммы из повагонки
  // Мы ищем разницу между актом и повагонкой
  SP_Balans_Detail.First;
  while not SP_Balans_Detail.Eof do begin
    if ClientDS_delta.Locate('bargain_id', SP_Balans_Detail.FieldByName('bargain_id').AsInteger, []) then begin
      ClientDS_delta.Edit;

      if not TryStrToCurr(SP_Balans_Detail.FieldByName('bargain_nds_cod').AsString, nds_rate) then nds_rate := 0;
      ClientDS_delta['cnt'] := ClientDS_delta['cnt'] + 1;
      ClientDS_delta['sum'] := ClientDS_delta['sum'] - RoundCurr(SP_Balans_Detail.FieldByName('summa').AsCurrency, -2);
      ClientDS_delta['sum_nds'] := ClientDS_delta['sum_nds'] - RoundCurr(SP_Balans_Detail.FieldByName('summa').AsCurrency * (nds_rate / (100 + nds_rate)), -2);
      ClientDS_delta['sum_notnds'] := ClientDS_delta['sum_notnds'] - RoundCurr(SP_Balans_Detail.FieldByName('summa').AsCurrency * (100 / (100 + nds_rate)), -2);

      ClientDS_delta.Post;
    end;

    SP_Balans_Detail.Next;
  end;

  SP_Balans_Detail.First;
  recNo := 1;
  recXls := 15;
  while not SP_Balans_Detail.Eof do begin
    // Копируем строку
    exWks.Rows[IntToStr(recXls + 1)].Insert;
    exWks.Rows[IntToStr(recXls + 0)].Copy;
    exWks.Rows[IntToStr(recXls + 1)].PasteSpecial(1);

    exWks.Range['A' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_id').Value;
    exWks.Range['B' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_begin_name').AsString;
    exWks.Range['C' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_road_begin_cod').AsString;
    exWks.Range['D' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_node_end_name').AsString;
    exWks.Range['E' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_road_end_cod').AsString;
    exWks.Range['F' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('bargain_kargoETSNG_name').AsString;
    exWks.Range['H' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_from_to').Value;
    exWks.Range['I' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('date_delivery').Value;
    exWks.Range['J' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_document').AsString;
    exWks.Range['K' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('num_vagon').AsString;

    Query_NDS.Locate('nds_id', SP_Balans_Detail.FieldByName('bargain_nds_id').Value, []);
    exWks.Range['L' + IntToStr(recXls)].Value := Query_NDS.FieldByName('nds_name').AsString;

    if SP_Balans_Detail.FieldByName('calc_weight').IsNull then
      exWks.Range['M' + IntToStr(recXls)].Value := null
    else
      exWks.Range['M' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('calc_weight').AsFloat;

    exWks.Range['N' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('rate_without_nds').AsFloat;
    exWks.Range['O' + IntToStr(recXls)].Value := SP_Balans_Detail.FieldByName('summa_without_nds').AsFloat;

    if not ClientDS_distance.Locate('node_begin;node_end', VarArrayOf([SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString, SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString]), []) then begin
      ClientDS_distance.Append;
      ClientDS_distance.FieldByName('node_begin').AsString := SP_Balans_Detail.FieldByName('bargain_node_begin_cod').AsString;
      ClientDS_distance.FieldByName('node_end').AsString   := SP_Balans_Detail.FieldByName('bargain_node_end_cod').AsString;
      ClientDS_distance.FieldByName('distance').Value      := null;
//      ClientDS_distance.FieldByName('distance').Value      := GetCalcDistanceDB(ClientDS_distance.FieldByName('node_begin').AsString, ClientDS_distance.FieldByName('node_end').AsString, Fconnect, retActSettings[6][11], SP_Balans_Detail.FieldByName('date_from_to').Value);
      ClientDS_distance.Post;
    end;
    exWks.Range['G' + IntToStr(recXls)].Value := ' '; //ClientDS_distance.FieldByName('distance').Value;

    inc(recNo);
    inc(recXls);

    ShowTextMessage('Осталось ' + IntToStr(SP_Balans_Detail.RecordCount - SP_Balans_Detail.RecNo) + ' вагонов ...', False);
    SP_Balans_Detail.Next;
  end;

  exWks.Rows[IntToStr(recXls)].Delete;
  if recNo > 1 then
    exWks.Rows[IntToStr(recXls)].Delete
  else begin
    exWks.Rows[IntToStr(recXls)].ClearContents;
    inc(recXls);
  end;

  ClientDS_distance.Free;
  SP_Balans_Detail.Free;

  exWks.Range['A1'].Select;
  ShowTextMessage('', True);

  ClientDS_delta.Free;
  VarClear(exWks);
end;


end.
